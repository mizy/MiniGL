!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports.MiniGL=F():Q.MiniGL=F()}(self,(function(){return(()=>{"use strict";var __webpack_modules__={33:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(671);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(144);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(942);\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(628);\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n/**\n * Base 基类方便继承以实现其他类型的情况\n */\n\nvar Base = /*#__PURE__*/function () {\n  // 是否需要重绘\n\n  /**\n   * \n   * @param {any} config \n   */\n  function Base(config) {\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this, Base);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "vSize", 2);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "offset", 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "depthMask", true);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "depthTest", true);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "transparent", true);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "uniformsNeedUpdate", true);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "uniformLocations", {});\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "visible", true);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "uniformData", {\n      z: {\n        value: 1,\n        type: \'uniform1f\'\n      }\n    });\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "vertex", []);\n\n    this.init(config);\n  }\n\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(Base, [{\n    key: "init",\n    value: function init() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.config = Object.assign({\n        type: \'ok\'\n      }, config);\n      this.buffers = [];\n      this.buffersSize = []; // 初始化数据数组\n\n      this.indices = []; // 初始化模型转换矩阵，这个矩阵按需引用\n\n      this.matrix = gl_matrix__WEBPACK_IMPORTED_MODULE_3__/* .create */ .Ue();\n\n      if (config.shaders) {\n        this.shaders = _objectSpread(_objectSpread({}, this.shaders), config.shaders);\n      }\n\n      if (config.miniGL) {\n        config.miniGL.canvas.add(this);\n      }\n    }\n  }, {\n    key: "setMatrix",\n    value: function setMatrix(matrix) {\n      gl_matrix__WEBPACK_IMPORTED_MODULE_3__/* .copy */ .JG(this.matrix, matrix);\n    }\n  }, {\n    key: "setData",\n    value: function setData(data) {\n      this.setBufferData(data, \'position\', 2);\n    }\n  }, {\n    key: "setUniformData",\n    value: function setUniformData() {\n      if (!this.uniformData || !this.uniformsNeedUpdate) return;\n\n      for (var key in this.uniformData) {\n        var item = this.uniformData[key];\n        this.setUniform(key, item);\n      } // this.uniformsNeedUpdate = false;\n\n    }\n    /**\n     * @param  {} texture\n     * @param  {} key=\'u_Sampler\'\n     */\n\n  }, {\n    key: "setTexture",\n    value: function setTexture(texture) {\n      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'u_Sampler\';\n      this.uniformData[key] = {\n        type: \'uniform1i\',\n        // image\n        value: 0,\n        // 0号纹理传递\n        texture: texture.webglTexture ? texture.webglTexture : texture\n      };\n      this.texture = texture;\n      this.uniformsNeedUpdate = true;\n    }\n  }, {\n    key: "setUniform",\n    value: function setUniform(key, item) {\n      var gl = this.gl;\n      var value = item.value,\n          type = item.type,\n          texture = item.texture,\n          _item$textureUnit = item.textureUnit,\n          textureUnit = _item$textureUnit === void 0 ? 0 : _item$textureUnit; // 矩阵\n\n      if (type.indexOf(\'uniformMatrix\') > -1) {\n        gl[type](this.getUniformLocation(key), false, value); // 图形数据\n      } else if (texture) {\n        // 激活纹理单元0，这里可以配置激活多个纹理单元，用来完成一个shader里多个纹理叠加处理的后期效果\n        gl.activeTexture(gl["TEXTURE".concat(textureUnit)]); // 绑定纹理到单元0上\n\n        gl.bindTexture(gl.TEXTURE_2D, item.texture); // 传值\n\n        gl[type](this.getUniformLocation(key), value); // 行列数据\n      } else if (type.slice(-1) === \'v\' || (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(value) !== \'object\') {\n        gl[type](this.getUniformLocation(key), value);\n      } else {\n        gl[type](this.getUniformLocation(key), value[0] || value, value[1], value[2], value[3]);\n      }\n\n      this.uniformData[key] = item;\n    }\n    /**\n     * 新的缓存数据\n     * @param  {} data\n     * @param  {} name\n     */\n\n  }, {\n    key: "setBufferData",\n    value: function setBufferData(data, name, size, bufferType) {\n      // 没有的话初始化复用一个\n      if (!this.buffers[name]) {\n        this.buffers[name] = this.gl.createBuffer();\n      }\n\n      this.buffersSize[name] = size; // 顶点buffer\n\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[name]);\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(data), this.gl[bufferType || \'STATIC_DRAW\']);\n    }\n    /**\n     * 更新缓冲区数据\n     * @param {Array} data \n     * @param {string} name \n     * @param {number} offset \n     */\n\n  }, {\n    key: "updateBufferData",\n    value: function updateBufferData(data, name) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      // 顶点buffer\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[name]);\n      this.gl.bufferSubData(this.gl.ARRAY_BUFFER, offset, new Float32Array(data));\n    }\n  }, {\n    key: "setIndices",\n    value: function setIndices(indices) {\n      this.indices = indices; // 顶点buffer\n\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indicesPointer);\n      this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), this.gl.STATIC_DRAW);\n    } // 生成shader程序\n\n  }, {\n    key: "initShader",\n    value: function initShader() {\n      var gl = this.gl; // 加载shader\n\n      var vertexShaderObject = this.loadShader(this.shaders.vertex, this.gl.VERTEX_SHADER);\n      var fragmentShaderObject = this.loadShader(this.shaders.fragment, this.gl.FRAGMENT_SHADER); // 创建程序\n\n      var shaderProgram = this.gl.createProgram();\n      this.gl.attachShader(shaderProgram, vertexShaderObject);\n      this.gl.attachShader(shaderProgram, fragmentShaderObject);\n      this.gl.linkProgram(shaderProgram);\n\n      if (!this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS)) {\n        console.error(\'shaderProgram Error: \', gl.getError(), gl.getProgramParameter(shaderProgram, 35715), gl.getProgramInfoLog(shaderProgram).trim());\n        console.error(\'fragmentLog:\', gl.getShaderInfoLog(vertexShaderObject).trim(), this.addLineNumbers(gl.getShaderSource(vertexShaderObject)));\n        console.error(\'vertexLog:\', gl.getShaderInfoLog(fragmentShaderObject).trim(), this.addLineNumbers(gl.getShaderSource(fragmentShaderObject)));\n        return;\n      }\n\n      this.shaderProgram = shaderProgram;\n    }\n  }, {\n    key: "addLineNumbers",\n    value: function addLineNumbers(string) {\n      var lines = string.split(\'\\n\');\n\n      for (var i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + \': \' + lines[i];\n      }\n\n      return lines.join(\'\\n\');\n    } // 获取顶点变量地址\n\n  }, {\n    key: "getAttribLocation",\n    value: function getAttribLocation(name) {\n      return this.gl.getAttribLocation(this.shaderProgram, name);\n    } // 获取uniform变量地址\n\n  }, {\n    key: "getUniformLocation",\n    value: function getUniformLocation(name) {\n      // 缓存会每秒快20ms左右，节省一帧的时机\n      if (this.uniformLocations[name]) return this.uniformLocations[name];\n      this.uniformLocations[name] = this.gl.getUniformLocation(this.shaderProgram, name);\n      return this.uniformLocations[name];\n    } // 加载shader\n\n  }, {\n    key: "loadShader",\n    value: function loadShader(shaderStr, type) {\n      var shader = this.gl.createShader(type);\n      this.gl.shaderSource(shader, shaderStr);\n      this.gl.compileShader(shader);\n      return shader;\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      if (!this.shaders) return; // 2D 只需要两个坐标轴标识位置\n\n      var vLen = Math.ceil(this.vertex.length / this.vSize); // 几个点\n\n      var offset = 0; // 从数据第几位开始偏移\n\n      var normalize = false;\n\n      for (var key in this.buffers) {\n        var bufferData = this.buffers[key];\n        var bufferPosition = this.getAttribLocation(key); // 分别绑定数据到shader程序中\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData);\n        this.gl.vertexAttribPointer(bufferPosition, this.buffersSize[key], this.gl.FLOAT, normalize, 0, offset);\n        this.gl.enableVertexAttribArray(bufferPosition);\n      } // 加载shader程序\n\n\n      this.gl.useProgram(this.shaderProgram);\n      this.setUniformData(); // 渲染\n\n      if (this.vertex.length) {\n        this.gl.drawArrays(this.gl[this.drawType], this.offset, vLen);\n      }\n    }\n  }, {\n    key: "afterRender",\n    value: function afterRender() {}\n  }, {\n    key: "onAdd",\n    value: function onAdd(miniGL) {\n      this.miniGL = miniGL; // 获取顶点数据内存里的指针\n\n      this.gl = miniGL.gl; // 没有初始化的情况\n\n      if (!this.indicesPointer) {\n        this.indicesPointer = this.gl.createBuffer();\n      }\n\n      if (this.shaders && !this.shaderProgram) {\n        this.initShader();\n      }\n    }\n  }, {\n    key: "translate",\n    value: function translate(x, y) {\n      gl_matrix__WEBPACK_IMPORTED_MODULE_3__/* .translate */ .Iu(this.matrix, this.matrix, [x, y]);\n    }\n  }, {\n    key: "scale",\n    value: function scale(x, y) {\n      y = y || x;\n      gl_matrix__WEBPACK_IMPORTED_MODULE_3__/* .scale */ .bA(this.matrix, this.matrix, [x, y]);\n    } // 销毁shader\n\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      var _this = this;\n\n      var shaders = this.gl.getAttachedShaders(this.shaderProgram);\n      shaders.forEach(function (item) {\n        _this.gl.deleteShader(item);\n      });\n      this.gl.deleteBuffer(this.indicesPointer);\n      this.gl.deleteProgram(this.shaderProgram);\n      this.parent = undefined;\n      this.dispose();\n    } // 释放buffer空间\n\n  }, {\n    key: "dispose",\n    value: function dispose() {\n      for (var key in this.buffers) {\n        this.gl.disableVertexAttribArray(this.buffers[key]);\n        this.gl.deleteBuffer(this.buffers[key]);\n      }\n\n      for (var _key in this.uniformData) {\n        if (this.uniformData[_key].texture) {\n          this.gl.deleteTexture(this.uniformData[_key].texture);\n        }\n      }\n\n      this.buffers = {};\n    }\n  }]);\n\n  return Base;\n}();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Base);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33\n')},947:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": () => (/* binding */ Mesh_InstanceMesh)\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 5 modules\nvar toConsumableArray = __webpack_require__(785);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(671);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(144);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__(326);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js + 1 modules\nvar inherits = __webpack_require__(340);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\nvar possibleConstructorReturn = __webpack_require__(963);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(120);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(942);\n;// CONCATENATED MODULE: ./src/Shaders/instanceMeshShader.js\n/* harmony default export */ const instanceMeshShader = ({\n  vertexShader: \"\\n\\tprecision lowp float;\\n\\tattribute vec2 position;\\n    attribute vec4 color;\\n    attribute vec3 instanceOffset;\\n\\tvarying vec4 vColor;\\n\\tuniform mat3 transform;\\n    uniform float z;\\n\\tvoid main()\\n\\t{\\n\\t\\tvColor = color;\\n        vColor.a = instanceOffset.z;\\n\\n\\t\\tvec3 mPosition = transform * vec3(vec2(position.x+instanceOffset.x,position.y+instanceOffset.y),z);\\n\\t\\tgl_Position = vec4(mPosition.xy,z,1.0);\\n\\t}\\n\\t\",\n  fragmentShader: \"\\n\\tprecision lowp float;\\n\\tvarying vec4 vColor;\\n\\tvoid main()\\n\\t{\\n\\t\\tgl_FragColor = vColor;\\n\\t}\\n\\t\"\n});\n// EXTERNAL MODULE: ./src/Utils/LoadTexture.js\nvar LoadTexture = __webpack_require__(816);\n// EXTERNAL MODULE: ./src/Mesh/Base.js\nvar Base = __webpack_require__(33);\n;// CONCATENATED MODULE: ./src/Mesh/InstanceMesh.js\n\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\nvar InstanceMesh = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(InstanceMesh, _Base);\n\n  var _super = _createSuper(InstanceMesh);\n\n  // array.BYTES_PER_ELEMENT * indicesEachLength\n  function InstanceMesh() {\n    var _this;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      // 一个值对应几个对象\n      instanceDivisor: 1\n    };\n\n    (0,classCallCheck/* default */.Z)(this, InstanceMesh);\n\n    _this = _super.call(this, config);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), \"drawType\", 'TRIANGLES');\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), \"offset\", 0);\n\n    _this.shaders = {\n      vertex: instanceMeshShader.vertexShader,\n      fragment: instanceMeshShader.fragmentShader\n    };\n    _this.uniformData = {\n      z: {\n        value: config.z || 1,\n        type: 'uniform1f'\n      }\n    };\n\n    _this.init(config);\n\n    _this.vSize = 2;\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(InstanceMesh, [{\n    key: \"setMap\",\n    value: function setMap(src) {\n      var _this2 = this;\n\n      return (0,LoadTexture/* default */.Z)(this.gl, src).then(function (texture) {\n        _this2.uniformData['map'] = {\n          type: 'uniform1i',\n          // image\n          value: 0,\n          // 0号纹理传递\n          texture: texture\n        };\n        _this2.uniformsNeedUpdate = true;\n      });\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(data, indices) {\n      this.dispose();\n      var points = [];\n      var colors = [];\n      this.data = data;\n      data.forEach(function (item) {\n        var coord = [item.position.x, item.position.y];\n        var color = item.color || [0, 0.1, 0.2, 1];\n        colors.push.apply(colors, (0,toConsumableArray/* default */.Z)(color));\n        points.push.apply(points, coord);\n      });\n      this.vertex = points;\n      this.setBufferData(points, 'position', 2);\n      this.setBufferData(colors, 'color', 4);\n      this.setIndices(indices);\n    }\n  }, {\n    key: \"setBufferDatas\",\n    value: function setBufferDatas(_ref) {\n      var position = _ref.position,\n          color = _ref.color,\n          indices = _ref.indices,\n          uvs = _ref.uvs;\n      var viewport = this.miniGL.viewport;\n      this.dispose();\n      this.vertex = position;\n      this.setBufferData(position, 'position', 2);\n      this.setBufferData(color, 'color', 4);\n      this.setBufferData(uvs, 'uv', 2);\n      this.setIndices(indices);\n    }\n  }, {\n    key: \"setIndices\",\n    value: function setIndices(input) {\n      var indices = []; // 支持显示网格线\n\n      if (this.config.wireFrame && this.drawType === 'TRIANGLES') {\n        for (var i = 0; i < input.length - 2; i += 3) {\n          indices.push(input[i], input[i + 1], input[i + 1], input[i + 2], input[i + 2], input[i]);\n        }\n      } else {\n        indices = input;\n      }\n\n      this.indices = indices;\n      this.count = !this.count ? indices.length : this.count; // 顶点buffer\n\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indicesPointer);\n      this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), this.gl.STATIC_DRAW);\n    } // 设置实例数组\n\n  }, {\n    key: \"setInstanceData\",\n    value: function setInstanceData(instanceData) {\n      this.instanceData = instanceData;\n      var eachLength = instanceData[0].length;\n      var arr = [];\n      this.instanceData.forEach(function (item) {\n        arr.push.apply(arr, (0,toConsumableArray/* default */.Z)(item));\n      });\n      this.setBufferData(arr, 'instanceOffset', eachLength);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // 2D 只需要两个坐标轴标识位置\n      var offset = 0; // 从数据第几位开始偏移\n\n      var normalize = false; // 分别绑定数据到shader程序中\n\n      for (var key in this.buffers) {\n        var bufferData = this.buffers[key];\n        var bufferPosition = this.getAttribLocation(key); // 分别绑定数据到shader程序中\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData); // 绑定数据\n        // 挂载到对应的指针上\n\n        this.gl.vertexAttribPointer(bufferPosition, this.buffersSize[key], this.gl.FLOAT, normalize, 0, offset);\n        this.gl.enableVertexAttribArray(bufferPosition);\n      } // 加载实例偏移数组，这里写死instanceOffset的数据指针名，注意不要导致命名冲突了\n\n\n      this.gl.vertexAttribDivisor(this.getAttribLocation('instanceOffset'), this.config.instanceDivisor); // 使用顶点数据\n\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indicesPointer); // 加载shader程序\n\n      this.gl.useProgram(this.shaderProgram); // 配置uniform\n\n      this.setUniformData(); // 渲染\n\n      if (this.indices.length) {\n        var drawType = this.config.wireFrame ? 'LINES' : this.gl[this.drawType]; // offset必须乘以类型数组的长度，意味着要从内存中数据的对应字节数开始算 根据类型乘对应的TypeArray.BYTES_PER_ELEMENT\n\n        this.gl.drawElementsInstanced(drawType, this.count, this.gl.UNSIGNED_SHORT, this.offset, this.instanceData.length);\n      }\n    }\n  }]);\n\n  return InstanceMesh;\n}(Base/* default */.Z);\n\n/* harmony default export */ const Mesh_InstanceMesh = (InstanceMesh);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///947\n")},70:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": () => (/* binding */ Mesh_Line)\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 5 modules\nvar toConsumableArray = __webpack_require__(785);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(671);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(144);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__(326);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js + 1 modules\nvar inherits = __webpack_require__(340);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\nvar possibleConstructorReturn = __webpack_require__(963);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(120);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(942);\n;// CONCATENATED MODULE: ./src/Shaders/line.js\n/* harmony default export */ const line = ({\n  // shader中进行坐标转换会不会快？CPU只会调用一次，GPU每帧都要重复去运算，2d情况下没有相机，\n  // 没有坐标因相机而变化的情况，所以不用再shader中运算，可以减少cpu的调用率\n  // 发现还是会大规模常常对坐标进行替换，那还是放进shader中运算吧\n  vertexShader: "\\n\\tprecision highp float;\\n\\tattribute vec2 position;\\n\\tattribute vec4 color;\\n    uniform mat3 transform;\\n    uniform mat3 modelView;\\n\\tuniform float z;\\n\\tvarying vec4 vColor;\\n\\tvoid main()\\n\\t{\\n\\t\\tvColor = color;\\n\\t\\tvec3 mPosition = transform * modelView * vec3(position,1.);\\n\\t\\tgl_Position = vec4(mPosition.xy,z,1.);\\n\\t}\\n\\t",\n  fragmentShader: "\\n\\tprecision highp float;\\n\\tvarying vec4 vColor;\\n\\tvoid main()\\n\\t{\\n\\t\\tgl_FragColor = vColor;\\n\\t}\\n\\t"\n});\n// EXTERNAL MODULE: ./src/Mesh/Base.js\nvar Base = __webpack_require__(33);\n;// CONCATENATED MODULE: ./src/Mesh/Line.js\n\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\nvar Line = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(Line, _Base);\n\n  var _super = _createSuper(Line);\n\n  function Line(config) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, Line);\n\n    config = Object.assign({\n      z: 1\n    }, config);\n    _this = _super.call(this, config);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", \'LINE_STRIP\');\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "shaders", {\n      vertex: line.vertexShader,\n      fragment: line.fragmentShader\n    });\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    _this.uniformData = {\n      z: {\n        value: Math.min(config.z, 1),\n        type: \'uniform1f\'\n      }\n    };\n\n    _this.init(config);\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(Line, [{\n    key: "setData",\n    value: function setData(data) {\n      var _this2 = this;\n\n      this.dispose();\n      var points = [];\n      this.data = data;\n      var colors = [];\n      data.forEach(function (item) {\n        points.push(item.position.x, item.position.y);\n        colors.push.apply(colors, (0,toConsumableArray/* default */.Z)(item.color || _this2.config.color || [1, 0, 1, 1]));\n      });\n      this.vertex = points;\n      this.setBufferData(points, \'position\', 2);\n      this.setBufferData(colors, \'color\', 4);\n    }\n    /**\n     * \n     * @param {any} param 入参\n     */\n\n  }, {\n    key: "setBufferDatas",\n    value: function setBufferDatas(_ref) {\n      var position = _ref.position,\n          color = _ref.color;\n      this.dispose();\n      this.vertex = position;\n      position && this.setBufferData(position, \'position\', 2);\n      color && this.setBufferData(color, \'color\', 4);\n    }\n  }]);\n\n  return Line;\n}(Base/* default */.Z);\n\n/* harmony default export */ const Mesh_Line = (Line);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBZTtBQUNkO0FBQ0E7QUFDQTtBQUNBQSxFQUFBQSxZQUFZLHdWQUpFO0FBb0JkQyxFQUFBQSxjQUFjO0FBcEJBLENBQWYsRTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBQTtBQUNBOztJQUVNRzs7Ozs7QUFRTCxnQkFBWUMsTUFBWixFQUFvQjtBQUFBOztBQUFBOztBQUNuQkEsSUFBQUEsTUFBTSxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBYztBQUN0QkMsTUFBQUEsQ0FBQyxFQUFFO0FBRG1CLEtBQWQsRUFFTkgsTUFGTSxDQUFUO0FBR0EsOEJBQU1BLE1BQU47O0FBSm1CLG1HQVBULFlBT1M7O0FBQUEsa0dBTlY7QUFDVEksTUFBQUEsTUFBTSxFQUFFUCxpQkFEQztBQUVUUSxNQUFBQSxRQUFRLEVBQUVSLG1CQUF5QkQ7QUFGMUIsS0FNVTs7QUFBQSxpR0FGWCxDQUVXOztBQUtuQixVQUFLVSxXQUFMLEdBQW1CO0FBQ2xCSCxNQUFBQSxDQUFDLEVBQUU7QUFDRkksUUFBQUEsS0FBSyxFQUFFQyxJQUFJLENBQUNDLEdBQUwsQ0FBU1QsTUFBTSxDQUFDRyxDQUFoQixFQUFtQixDQUFuQixDQURMO0FBRUZPLFFBQUFBLElBQUksRUFBRTtBQUZKO0FBRGUsS0FBbkI7O0FBTUEsVUFBS0MsSUFBTCxDQUFVWCxNQUFWOztBQVhtQjtBQVluQjs7OztXQUVELGlCQUFRWSxJQUFSLEVBQWM7QUFBQTs7QUFDYixXQUFLQyxPQUFMO0FBQ0EsVUFBTUMsTUFBTSxHQUFHLEVBQWY7QUFDQSxXQUFLRixJQUFMLEdBQVlBLElBQVo7QUFDQSxVQUFNRyxNQUFNLEdBQUcsRUFBZjtBQUNBSCxNQUFBQSxJQUFJLENBQUNJLE9BQUwsQ0FBYSxVQUFBQyxJQUFJLEVBQUk7QUFDcEJILFFBQUFBLE1BQU0sQ0FBQ0ksSUFBUCxDQUFZRCxJQUFJLENBQUNFLFFBQUwsQ0FBY0MsQ0FBMUIsRUFBNkJILElBQUksQ0FBQ0UsUUFBTCxDQUFjRSxDQUEzQztBQUNBTixRQUFBQSxNQUFNLENBQUNHLElBQVAsT0FBQUgsTUFBTSx1Q0FBVUUsSUFBSSxDQUFDSyxLQUFMLElBQWMsTUFBSSxDQUFDdEIsTUFBTCxDQUFZc0IsS0FBMUIsSUFBbUMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLENBQTdDLEVBQU47QUFDQSxPQUhEO0FBSUEsV0FBS2xCLE1BQUwsR0FBY1UsTUFBZDtBQUNBLFdBQUtTLGFBQUwsQ0FBbUJULE1BQW5CLEVBQTJCLFVBQTNCLEVBQXVDLENBQXZDO0FBQ0EsV0FBS1MsYUFBTCxDQUFtQlIsTUFBbkIsRUFBMkIsT0FBM0IsRUFBb0MsQ0FBcEM7QUFDQTtBQUVEO0FBQ0Q7QUFDQTtBQUNBOzs7O1dBQ0MsOEJBRUc7QUFBQSxVQURGSSxRQUNFLFFBREZBLFFBQ0U7QUFBQSxVQURRRyxLQUNSLFFBRFFBLEtBQ1I7QUFDRixXQUFLVCxPQUFMO0FBQ0EsV0FBS1QsTUFBTCxHQUFjZSxRQUFkO0FBQ0FBLE1BQUFBLFFBQVEsSUFBSSxLQUFLSSxhQUFMLENBQW1CSixRQUFuQixFQUE2QixVQUE3QixFQUF5QyxDQUF6QyxDQUFaO0FBRUFHLE1BQUFBLEtBQUssSUFBSSxLQUFLQyxhQUFMLENBQW1CRCxLQUFuQixFQUEwQixPQUExQixFQUFtQyxDQUFuQyxDQUFUO0FBRUE7Ozs7RUFqRGlCeEI7O0FBb0RuQixnREFBZUMsSUFBZiIsInNvdXJjZXMiOlsid2VicGFjazovL01pbmlHTC8uL3NyYy9TaGFkZXJzL2xpbmUuanM/ZDZmYSIsIndlYnBhY2s6Ly9NaW5pR0wvLi9zcmMvTWVzaC9MaW5lLmpzPzljMGQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuXHQvLyBzaGFkZXLkuK3ov5vooYzlnZDmoIfovazmjaLkvJrkuI3kvJrlv6vvvJ9DUFXlj6rkvJrosIPnlKjkuIDmrKHvvIxHUFXmr4/luKfpg73opoHph43lpI3ljrvov5DnrpfvvIwyZOaDheWGteS4i+ayoeacieebuOacuu+8jFxuXHQvLyDmsqHmnInlnZDmoIflm6Dnm7jmnLrogIzlj5jljJbnmoTmg4XlhrXvvIzmiYDku6XkuI3nlKjlho1zaGFkZXLkuK3ov5DnrpfvvIzlj6/ku6Xlh4/lsJFjcHXnmoTosIPnlKjnjodcblx0Ly8g5Y+R546w6L+Y5piv5Lya5aSn6KeE5qih5bi45bi45a+55Z2Q5qCH6L+b6KGM5pu/5o2i77yM6YKj6L+Y5piv5pS+6L+bc2hhZGVy5Lit6L+Q566X5ZCnXG5cdHZlcnRleFNoYWRlcjogYFxuXHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdGF0dHJpYnV0ZSB2ZWMyIHBvc2l0aW9uO1xuXHRhdHRyaWJ1dGUgdmVjNCBjb2xvcjtcbiAgICB1bmlmb3JtIG1hdDMgdHJhbnNmb3JtO1xuICAgIHVuaWZvcm0gbWF0MyBtb2RlbFZpZXc7XG5cdHVuaWZvcm0gZmxvYXQgejtcblx0dmFyeWluZyB2ZWM0IHZDb2xvcjtcblx0dm9pZCBtYWluKClcblx0e1xuXHRcdHZDb2xvciA9IGNvbG9yO1xuXHRcdHZlYzMgbVBvc2l0aW9uID0gdHJhbnNmb3JtICogbW9kZWxWaWV3ICogdmVjMyhwb3NpdGlvbiwxLik7XG5cdFx0Z2xfUG9zaXRpb24gPSB2ZWM0KG1Qb3NpdGlvbi54eSx6LDEuKTtcblx0fVxuXHRgLFxuXG5cdGZyYWdtZW50U2hhZGVyOiBgXG5cdHByZWNpc2lvbiBoaWdocCBmbG9hdDtcblx0dmFyeWluZyB2ZWM0IHZDb2xvcjtcblx0dm9pZCBtYWluKClcblx0e1xuXHRcdGdsX0ZyYWdDb2xvciA9IHZDb2xvcjtcblx0fVxuXHRgXG59O1xuIiwiaW1wb3J0IGxpbmVTaGFkZXIgZnJvbSAnLi4vU2hhZGVycy9saW5lJztcbmltcG9ydCBCYXNlIGZyb20gJy4vQmFzZSc7XG5cbmNsYXNzIExpbmUgZXh0ZW5kcyBCYXNlIHtcblx0ZHJhd1R5cGUgPSAnTElORV9TVFJJUCc7XG5cdHNoYWRlcnMgPSB7XG5cdFx0dmVydGV4OiBsaW5lU2hhZGVyLnZlcnRleFNoYWRlcixcblx0XHRmcmFnbWVudDogbGluZVNoYWRlci5mcmFnbWVudFNoYWRlclxuXHR9XG5cdG9mZnNldCA9IDA7XG5cblx0Y29uc3RydWN0b3IoY29uZmlnKSB7XG5cdFx0Y29uZmlnID0gT2JqZWN0LmFzc2lnbih7XG5cdFx0XHR6OiAxXG5cdFx0fSwgY29uZmlnKTtcblx0XHRzdXBlcihjb25maWcpO1xuXHRcdHRoaXMudW5pZm9ybURhdGEgPSB7XG5cdFx0XHR6OiB7XG5cdFx0XHRcdHZhbHVlOiBNYXRoLm1pbihjb25maWcueiwgMSksXG5cdFx0XHRcdHR5cGU6ICd1bmlmb3JtMWYnXG5cdFx0XHR9XG5cdFx0fTtcblx0XHR0aGlzLmluaXQoY29uZmlnKTtcblx0fVxuXG5cdHNldERhdGEoZGF0YSkge1xuXHRcdHRoaXMuZGlzcG9zZSgpO1xuXHRcdGNvbnN0IHBvaW50cyA9IFtdO1xuXHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cdFx0Y29uc3QgY29sb3JzID0gW107XG5cdFx0ZGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xuXHRcdFx0cG9pbnRzLnB1c2goaXRlbS5wb3NpdGlvbi54LCBpdGVtLnBvc2l0aW9uLnkpO1xuXHRcdFx0Y29sb3JzLnB1c2goLi4uKGl0ZW0uY29sb3IgfHwgdGhpcy5jb25maWcuY29sb3IgfHwgWzEsIDAsIDEsIDFdKSk7XG5cdFx0fSk7XG5cdFx0dGhpcy52ZXJ0ZXggPSBwb2ludHM7XG5cdFx0dGhpcy5zZXRCdWZmZXJEYXRhKHBvaW50cywgJ3Bvc2l0aW9uJywgMik7XG5cdFx0dGhpcy5zZXRCdWZmZXJEYXRhKGNvbG9ycywgJ2NvbG9yJywgNCk7XG5cdH1cblxuXHQvKipcblx0ICogXG5cdCAqIEBwYXJhbSB7YW55fSBwYXJhbSDlhaXlj4Jcblx0ICovXG5cdHNldEJ1ZmZlckRhdGFzKHtcblx0XHRwb3NpdGlvbiwgY29sb3Jcblx0fSkge1xuXHRcdHRoaXMuZGlzcG9zZSgpO1xuXHRcdHRoaXMudmVydGV4ID0gcG9zaXRpb247XG5cdFx0cG9zaXRpb24gJiYgdGhpcy5zZXRCdWZmZXJEYXRhKHBvc2l0aW9uLCAncG9zaXRpb24nLCAyKTtcblxuXHRcdGNvbG9yICYmIHRoaXMuc2V0QnVmZmVyRGF0YShjb2xvciwgJ2NvbG9yJywgNCk7XG5cblx0fVxuXG59XG5leHBvcnQgZGVmYXVsdCBMaW5lO1xuIl0sIm5hbWVzIjpbInZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwibGluZVNoYWRlciIsIkJhc2UiLCJMaW5lIiwiY29uZmlnIiwiT2JqZWN0IiwiYXNzaWduIiwieiIsInZlcnRleCIsImZyYWdtZW50IiwidW5pZm9ybURhdGEiLCJ2YWx1ZSIsIk1hdGgiLCJtaW4iLCJ0eXBlIiwiaW5pdCIsImRhdGEiLCJkaXNwb3NlIiwicG9pbnRzIiwiY29sb3JzIiwiZm9yRWFjaCIsIml0ZW0iLCJwdXNoIiwicG9zaXRpb24iLCJ4IiwieSIsImNvbG9yIiwic2V0QnVmZmVyRGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///70\n')},776:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(671);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(144);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(942);\n\n\n\n\nvar Texture = /*#__PURE__*/function () {\n  /**\n   * @param {Boolean} 是否支持预乘，默认为true，会提前乘好rgb*a，不需要再次乘alpha\n   */\n  function Texture(miniGL) {\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, Texture);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this, "premultiplyAlpha", true);\n\n    this.miniGL = miniGL;\n    this.canvas = document.createElement(\'canvas\');\n    this.ctx = this.canvas.getContext(\'2d\');\n  }\n\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(Texture, [{\n    key: "lg2",\n    value: function lg2(n) {\n      return Math.log(n) / Math.log(2);\n    }\n  }, {\n    key: "create",\n    value: function create(_ref) {\n      var image = _ref.image,\n          rect = _ref.rect,\n          _ref$reverseY = _ref.reverseY,\n          reverseY = _ref$reverseY === void 0 ? true : _ref$reverseY,\n          name = _ref.name;\n\n      if (rect) {\n        this.canvas.width = rect.width;\n        this.canvas.height = rect.height;\n        this.canvas.setAttribute(\'data-name\', name);\n        this.ctx.drawImage(image, -rect.x, -rect.y);\n        image = this.canvas;\n      }\n\n      var gl = this.miniGL.gl;\n      var texture = gl.createTexture(); // 挂载当前的空材质开始操作\n\n      gl.bindTexture(gl.TEXTURE_2D, texture); // 这个在读取图片数据前使用\n\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha); // 灌入图形数据\n\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image); // 反转y轴\n\n      if (reverseY) {\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, reverseY);\n      } // 支持缩小纹理\n\n\n      gl.generateMipmap(gl.TEXTURE_2D); // 放大缩小的时候都使用线性插值，减少颗粒感\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); // 取消挂载\n\n      gl.bindTexture(gl.TEXTURE_2D, null);\n      this.webglTexture = texture;\n      return texture;\n    }\n    /**\n     * 更新材质数据\n     * @param {*} texture\n     * @param {*} image\n     */\n\n  }, {\n    key: "update",\n    value: function update(texture, image) {\n      var gl = this.miniGL.gl;\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n    }\n  }]);\n\n  return Texture;\n}();\n\n;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Texture);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzc2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBTUE7QUFDRjtBQUNKO0FBQ0E7QUFFSSxtQkFBWUMsTUFBWixFQUFvQjtBQUFBOztBQUFBLHlIQURELElBQ0M7O0FBQ2hCLFNBQUtBLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtDLE1BQUwsR0FBY0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLFFBQXZCLENBQWQ7QUFDQSxTQUFLQyxHQUFMLEdBQVcsS0FBS0gsTUFBTCxDQUFZSSxVQUFaLENBQXVCLElBQXZCLENBQVg7QUFDSDs7OztXQUNELGFBQUlDLENBQUosRUFBTztBQUNULGFBQU9DLElBQUksQ0FBQ0MsR0FBTCxDQUFTRixDQUFULElBQWNDLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsQ0FBckI7QUFDQTs7O1dBQ0Usc0JBQTZDO0FBQUEsVUFBckNDLEtBQXFDLFFBQXJDQSxLQUFxQztBQUFBLFVBQTlCQyxJQUE4QixRQUE5QkEsSUFBOEI7QUFBQSwrQkFBeEJDLFFBQXdCO0FBQUEsVUFBeEJBLFFBQXdCLDhCQUFiLElBQWE7QUFBQSxVQUFQQyxJQUFPLFFBQVBBLElBQU87O0FBQ3pDLFVBQUlGLElBQUosRUFBVTtBQUNOLGFBQUtULE1BQUwsQ0FBWVksS0FBWixHQUFvQkgsSUFBSSxDQUFDRyxLQUF6QjtBQUNBLGFBQUtaLE1BQUwsQ0FBWWEsTUFBWixHQUFxQkosSUFBSSxDQUFDSSxNQUExQjtBQUNBLGFBQUtiLE1BQUwsQ0FBWWMsWUFBWixDQUF5QixXQUF6QixFQUFzQ0gsSUFBdEM7QUFDQSxhQUFLUixHQUFMLENBQVNZLFNBQVQsQ0FBbUJQLEtBQW5CLEVBQTBCLENBQUNDLElBQUksQ0FBQ08sQ0FBaEMsRUFBbUMsQ0FBQ1AsSUFBSSxDQUFDUSxDQUF6QztBQUNBVCxRQUFBQSxLQUFLLEdBQUcsS0FBS1IsTUFBYjtBQUNIOztBQUNELFVBQU1rQixFQUFFLEdBQUcsS0FBS25CLE1BQUwsQ0FBWW1CLEVBQXZCO0FBQ0EsVUFBTUMsT0FBTyxHQUFHRCxFQUFFLENBQUNFLGFBQUgsRUFBaEIsQ0FUeUMsQ0FXekM7O0FBQ0FGLE1BQUFBLEVBQUUsQ0FBQ0csV0FBSCxDQUFlSCxFQUFFLENBQUNJLFVBQWxCLEVBQThCSCxPQUE5QixFQVp5QyxDQWF6Qzs7QUFDQUQsTUFBQUEsRUFBRSxDQUFDSyxXQUFILENBQWVMLEVBQUUsQ0FBQ00sOEJBQWxCLEVBQWtELEtBQUtDLGdCQUF2RCxFQWR5QyxDQWV6Qzs7QUFDQVAsTUFBQUEsRUFBRSxDQUFDUSxVQUFILENBQWNSLEVBQUUsQ0FBQ0ksVUFBakIsRUFBNkIsQ0FBN0IsRUFBZ0NKLEVBQUUsQ0FBQ1MsSUFBbkMsRUFBeUNULEVBQUUsQ0FBQ1MsSUFBNUMsRUFBa0RULEVBQUUsQ0FBQ1UsYUFBckQsRUFBb0VwQixLQUFwRSxFQWhCeUMsQ0FpQnpDOztBQUNBLFVBQUlFLFFBQUosRUFBYztBQUNWUSxRQUFBQSxFQUFFLENBQUNLLFdBQUgsQ0FBZUwsRUFBRSxDQUFDVyxtQkFBbEIsRUFBdUNuQixRQUF2QztBQUNILE9BcEJ3QyxDQXNCekM7OztBQUNBUSxNQUFBQSxFQUFFLENBQUNZLGNBQUgsQ0FBa0JaLEVBQUUsQ0FBQ0ksVUFBckIsRUF2QnlDLENBeUJ6Qzs7QUFDQUosTUFBQUEsRUFBRSxDQUFDYSxhQUFILENBQWlCYixFQUFFLENBQUNJLFVBQXBCLEVBQWdDSixFQUFFLENBQUNjLGtCQUFuQyxFQUF1RGQsRUFBRSxDQUFDZSxNQUExRDtBQUNBZixNQUFBQSxFQUFFLENBQUNhLGFBQUgsQ0FBaUJiLEVBQUUsQ0FBQ0ksVUFBcEIsRUFBZ0NKLEVBQUUsQ0FBQ2dCLGtCQUFuQyxFQUF1RGhCLEVBQUUsQ0FBQ2lCLG9CQUExRDtBQUNBakIsTUFBQUEsRUFBRSxDQUFDYSxhQUFILENBQWlCYixFQUFFLENBQUNJLFVBQXBCLEVBQWdDSixFQUFFLENBQUNrQixjQUFuQyxFQUFtRGxCLEVBQUUsQ0FBQ21CLGFBQXREO0FBQ0FuQixNQUFBQSxFQUFFLENBQUNhLGFBQUgsQ0FBaUJiLEVBQUUsQ0FBQ0ksVUFBcEIsRUFBZ0NKLEVBQUUsQ0FBQ29CLGNBQW5DLEVBQW1EcEIsRUFBRSxDQUFDbUIsYUFBdEQsRUE3QnlDLENBK0J6Qzs7QUFDQW5CLE1BQUFBLEVBQUUsQ0FBQ0csV0FBSCxDQUFlSCxFQUFFLENBQUNJLFVBQWxCLEVBQThCLElBQTlCO0FBQ0EsV0FBS2lCLFlBQUwsR0FBb0JwQixPQUFwQjtBQUNBLGFBQU9BLE9BQVA7QUFDSDtBQUVEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7Ozs7V0FDSSxnQkFBT0EsT0FBUCxFQUFnQlgsS0FBaEIsRUFBdUI7QUFDbkIsVUFBTVUsRUFBRSxHQUFHLEtBQUtuQixNQUFMLENBQVltQixFQUF2QjtBQUNBQSxNQUFBQSxFQUFFLENBQUNHLFdBQUgsQ0FBZUgsRUFBRSxDQUFDSSxVQUFsQixFQUE4QkgsT0FBOUI7QUFDQUQsTUFBQUEsRUFBRSxDQUFDUSxVQUFILENBQWNSLEVBQUUsQ0FBQ0ksVUFBakIsRUFBNkIsQ0FBN0IsRUFBZ0NKLEVBQUUsQ0FBQ1MsSUFBbkMsRUFBeUNULEVBQUUsQ0FBQ1MsSUFBNUMsRUFBa0RULEVBQUUsQ0FBQ1UsYUFBckQsRUFBb0VwQixLQUFwRTtBQUNIOzs7Ozs7QUFDSjtBQUNELGlFQUFlVixPQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vTWluaUdMLy4vc3JjL1RleHR1cmUvVGV4dHVyZS5qcz8xOGNkIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFRleHR1cmUge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0g5piv5ZCm5pSv5oyB6aKE5LmY77yM6buY6K6k5Li6dHJ1Ze+8jOS8muaPkOWJjeS5mOWlvXJnYiph77yM5LiN6ZyA6KaB5YaN5qyh5LmYYWxwaGFcbiAgICAgKi9cbiAgICBwcmVtdWx0aXBseUFscGhhID0gdHJ1ZTtcbiAgICBjb25zdHJ1Y3RvcihtaW5pR0wpIHtcbiAgICAgICAgdGhpcy5taW5pR0wgPSBtaW5pR0w7XG4gICAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB9XG4gICAgbGcyKG4pIHtcblx0XHRyZXR1cm4gTWF0aC5sb2cobikgLyBNYXRoLmxvZygyKTtcblx0fVxuICAgIGNyZWF0ZSh7aW1hZ2UsIHJlY3QsIHJldmVyc2VZID0gdHJ1ZSwgbmFtZX0pIHtcbiAgICAgICAgaWYgKHJlY3QpIHtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gcmVjdC53aWR0aDtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHJlY3QuaGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy5jYW52YXMuc2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnLCBuYW1lKTtcbiAgICAgICAgICAgIHRoaXMuY3R4LmRyYXdJbWFnZShpbWFnZSwgLXJlY3QueCwgLXJlY3QueSk7XG4gICAgICAgICAgICBpbWFnZSA9IHRoaXMuY2FudmFzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5taW5pR0wuZ2w7XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cbiAgICAgICAgLy8g5oyC6L295b2T5YmN55qE56m65p2Q6LSo5byA5aeL5pON5L2cXG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuICAgICAgICAvLyDov5nkuKrlnKjor7vlj5blm77niYfmlbDmja7liY3kvb/nlKhcbiAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCB0aGlzLnByZW11bHRpcGx5QWxwaGEpO1xuICAgICAgICAvLyDngYzlhaXlm77lvaLmlbDmja5cbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBpbWFnZSk7XG4gICAgICAgIC8vIOWPjei9rHnovbRcbiAgICAgICAgaWYgKHJldmVyc2VZKSB7XG4gICAgICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCByZXZlcnNlWSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDmlK/mjIHnvKnlsI/nurnnkIZcbiAgICAgICAgZ2wuZ2VuZXJhdGVNaXBtYXAoZ2wuVEVYVFVSRV8yRCk7XG5cbiAgICAgICAgLy8g5pS+5aSn57yp5bCP55qE5pe25YCZ6YO95L2/55So57q/5oCn5o+S5YC877yM5YeP5bCR6aKX57KS5oSfXG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSX01JUE1BUF9MSU5FQVIpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG5cbiAgICAgICAgLy8g5Y+W5raI5oyC6L29XG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuICAgICAgICB0aGlzLndlYmdsVGV4dHVyZSA9IHRleHR1cmU7XG4gICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOabtOaWsOadkOi0qOaVsOaNrlxuICAgICAqIEBwYXJhbSB7Kn0gdGV4dHVyZVxuICAgICAqIEBwYXJhbSB7Kn0gaW1hZ2VcbiAgICAgKi9cbiAgICB1cGRhdGUodGV4dHVyZSwgaW1hZ2UpIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLm1pbmlHTC5nbDtcbiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XG4gICAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgaW1hZ2UpO1xuICAgIH1cbn07XG5leHBvcnQgZGVmYXVsdCBUZXh0dXJlO1xuIl0sIm5hbWVzIjpbIlRleHR1cmUiLCJtaW5pR0wiLCJjYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjdHgiLCJnZXRDb250ZXh0IiwibiIsIk1hdGgiLCJsb2ciLCJpbWFnZSIsInJlY3QiLCJyZXZlcnNlWSIsIm5hbWUiLCJ3aWR0aCIsImhlaWdodCIsInNldEF0dHJpYnV0ZSIsImRyYXdJbWFnZSIsIngiLCJ5IiwiZ2wiLCJ0ZXh0dXJlIiwiY3JlYXRlVGV4dHVyZSIsImJpbmRUZXh0dXJlIiwiVEVYVFVSRV8yRCIsInBpeGVsU3RvcmVpIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwicHJlbXVsdGlwbHlBbHBoYSIsInRleEltYWdlMkQiLCJSR0JBIiwiVU5TSUdORURfQllURSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJnZW5lcmF0ZU1pcG1hcCIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX01BR19GSUxURVIiLCJMSU5FQVIiLCJURVhUVVJFX01JTl9GSUxURVIiLCJMSU5FQVJfTUlQTUFQX0xJTkVBUiIsIlRFWFRVUkVfV1JBUF9TIiwiQ0xBTVBfVE9fRURHRSIsIlRFWFRVUkVfV1JBUF9UIiwid2ViZ2xUZXh0dXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///776\n')},816:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ loadTexture)\n/* harmony export */ });\n/* harmony import */ var _Loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(905);\n\nfunction loadTexture(gl, imagePath) {\n  function lg2(n) {\n    return Math.log(n) / Math.log(2);\n  }\n\n  return (0,_Loader__WEBPACK_IMPORTED_MODULE_0__.loadImage)(imagePath).then(function (image) {\n    var texture = gl.createTexture(); // 挂载当前的空材质开始操作\n\n    gl.bindTexture(gl.TEXTURE_2D, texture); // 灌入图形数据\n\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image); // 反转y轴\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1); // 支持放大缩小渐进加载和插值算法，整数倍情况\n\n    if (lg2(image.width) === 0 && lg2(image.height) === 0) {\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\n      gl.generateMipmap(gl.TEXTURE_2D);\n    } else {\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    } // 取消挂载\n\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return texture;\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODE2LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNlLFNBQVNDLFdBQVQsQ0FBcUJDLEVBQXJCLEVBQXlCQyxTQUF6QixFQUFvQztBQUNsRCxXQUFTQyxHQUFULENBQWFDLENBQWIsRUFBZ0I7QUFDZixXQUFPQyxJQUFJLENBQUNDLEdBQUwsQ0FBU0YsQ0FBVCxJQUFjQyxJQUFJLENBQUNDLEdBQUwsQ0FBUyxDQUFULENBQXJCO0FBQ0E7O0FBQ0QsU0FBT1Asa0RBQVMsQ0FBQ0csU0FBRCxDQUFULENBQXFCSyxJQUFyQixDQUEwQixVQUFBQyxLQUFLLEVBQUU7QUFDakMsUUFBTUMsT0FBTyxHQUFHUixFQUFFLENBQUNTLGFBQUgsRUFBaEIsQ0FEaUMsQ0FHakM7O0FBQ0FULElBQUFBLEVBQUUsQ0FBQ1UsV0FBSCxDQUFlVixFQUFFLENBQUNXLFVBQWxCLEVBQThCSCxPQUE5QixFQUppQyxDQUtqQzs7QUFDQVIsSUFBQUEsRUFBRSxDQUFDWSxVQUFILENBQWNaLEVBQUUsQ0FBQ1csVUFBakIsRUFBNkIsQ0FBN0IsRUFBZ0NYLEVBQUUsQ0FBQ2EsSUFBbkMsRUFBeUNiLEVBQUUsQ0FBQ2EsSUFBNUMsRUFBa0RiLEVBQUUsQ0FBQ2MsYUFBckQsRUFBb0VQLEtBQXBFLEVBTmlDLENBT2pDOztBQUNBUCxJQUFBQSxFQUFFLENBQUNlLFdBQUgsQ0FBZWYsRUFBRSxDQUFDZ0IsbUJBQWxCLEVBQXVDLENBQXZDLEVBUmlDLENBVWpDOztBQUNBLFFBQUlkLEdBQUcsQ0FBQ0ssS0FBSyxDQUFDVSxLQUFQLENBQUgsS0FBcUIsQ0FBckIsSUFBMEJmLEdBQUcsQ0FBQ0ssS0FBSyxDQUFDVyxNQUFQLENBQUgsS0FBc0IsQ0FBcEQsRUFBdUQ7QUFDbkRsQixNQUFBQSxFQUFFLENBQUNtQixhQUFILENBQWlCbkIsRUFBRSxDQUFDVyxVQUFwQixFQUFnQ1gsRUFBRSxDQUFDb0Isa0JBQW5DLEVBQXVEcEIsRUFBRSxDQUFDcUIsTUFBMUQ7QUFDQXJCLE1BQUFBLEVBQUUsQ0FBQ21CLGFBQUgsQ0FBaUJuQixFQUFFLENBQUNXLFVBQXBCLEVBQWdDWCxFQUFFLENBQUNzQixrQkFBbkMsRUFBdUR0QixFQUFFLENBQUN1QixxQkFBMUQ7QUFDQXZCLE1BQUFBLEVBQUUsQ0FBQ3dCLGNBQUgsQ0FBa0J4QixFQUFFLENBQUNXLFVBQXJCO0FBQ0gsS0FKRCxNQUlPO0FBQ0hYLE1BQUFBLEVBQUUsQ0FBQ21CLGFBQUgsQ0FBaUJuQixFQUFFLENBQUNXLFVBQXBCLEVBQWdDWCxFQUFFLENBQUNvQixrQkFBbkMsRUFBdURwQixFQUFFLENBQUNxQixNQUExRDtBQUNBckIsTUFBQUEsRUFBRSxDQUFDbUIsYUFBSCxDQUFpQm5CLEVBQUUsQ0FBQ1csVUFBcEIsRUFBZ0NYLEVBQUUsQ0FBQ3NCLGtCQUFuQyxFQUF1RHRCLEVBQUUsQ0FBQ3FCLE1BQTFEO0FBQ0FyQixNQUFBQSxFQUFFLENBQUNtQixhQUFILENBQWlCbkIsRUFBRSxDQUFDVyxVQUFwQixFQUFnQ1gsRUFBRSxDQUFDeUIsY0FBbkMsRUFBbUR6QixFQUFFLENBQUMwQixhQUF0RDtBQUNBMUIsTUFBQUEsRUFBRSxDQUFDbUIsYUFBSCxDQUFpQm5CLEVBQUUsQ0FBQ1csVUFBcEIsRUFBZ0NYLEVBQUUsQ0FBQzJCLGNBQW5DLEVBQW1EM0IsRUFBRSxDQUFDMEIsYUFBdEQ7QUFDSCxLQXBCZ0MsQ0FzQmpDOzs7QUFDQTFCLElBQUFBLEVBQUUsQ0FBQ1UsV0FBSCxDQUFlVixFQUFFLENBQUNXLFVBQWxCLEVBQThCLElBQTlCO0FBQ0EsV0FBT0gsT0FBUDtBQUNILEdBekJHLENBQVA7QUEwQkEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaW5pR0wvLi9zcmMvVXRpbHMvTG9hZFRleHR1cmUuanM/YjkyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2xvYWRJbWFnZX0gZnJvbSAnLi9Mb2FkZXInO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9hZFRleHR1cmUoZ2wsIGltYWdlUGF0aCkge1xuXHRmdW5jdGlvbiBsZzIobikge1xuXHRcdHJldHVybiBNYXRoLmxvZyhuKSAvIE1hdGgubG9nKDIpO1xuXHR9XG5cdHJldHVybiBsb2FkSW1hZ2UoaW1hZ2VQYXRoKS50aGVuKGltYWdlPT57XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cbiAgICAgICAgLy8g5oyC6L295b2T5YmN55qE56m65p2Q6LSo5byA5aeL5pON5L2cXG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuICAgICAgICAvLyDngYzlhaXlm77lvaLmlbDmja5cbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBpbWFnZSk7XG4gICAgICAgIC8vIOWPjei9rHnovbRcbiAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgMSk7XG5cbiAgICAgICAgLy8g5pSv5oyB5pS+5aSn57yp5bCP5riQ6L+b5Yqg6L295ZKM5o+S5YC8566X5rOV77yM5pW05pWw5YCN5oOF5Ya1XG4gICAgICAgIGlmIChsZzIoaW1hZ2Uud2lkdGgpID09PSAwICYmIGxnMihpbWFnZS5oZWlnaHQpID09PSAwKSB7XG4gICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVJfTUlQTUFQX05FQVJFU1QpO1xuICAgICAgICAgICAgZ2wuZ2VuZXJhdGVNaXBtYXAoZ2wuVEVYVFVSRV8yRCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOWPlua2iOaMgui9vVxuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcbiAgICAgICAgcmV0dXJuIHRleHR1cmU7XG4gICAgfSk7XG59XG4iXSwibmFtZXMiOlsibG9hZEltYWdlIiwibG9hZFRleHR1cmUiLCJnbCIsImltYWdlUGF0aCIsImxnMiIsIm4iLCJNYXRoIiwibG9nIiwidGhlbiIsImltYWdlIiwidGV4dHVyZSIsImNyZWF0ZVRleHR1cmUiLCJiaW5kVGV4dHVyZSIsIlRFWFRVUkVfMkQiLCJ0ZXhJbWFnZTJEIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJ3aWR0aCIsImhlaWdodCIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX01BR19GSUxURVIiLCJMSU5FQVIiLCJURVhUVVJFX01JTl9GSUxURVIiLCJMSU5FQVJfTUlQTUFQX05FQVJFU1QiLCJnZW5lcmF0ZU1pcG1hcCIsIlRFWFRVUkVfV1JBUF9TIiwiQ0xBTVBfVE9fRURHRSIsIlRFWFRVUkVfV1JBUF9UIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///816\n')},905:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "load": () => (/* binding */ load),\n/* harmony export */   "loadImage": () => (/* binding */ loadImage)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(942);\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * 加载资源\n * @param  {} url\n * @param  {} option={}\n */\nfunction load(url) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (option.type === \'image\') {\n    return loadImage(url);\n  }\n\n  option = Object.assign({\n    method: \'GET\',\n    headers: {}\n  }, option);\n  return fetch(url, _objectSpread({}, option)).then(function (res) {\n    if (option.responseType) {\n      return res[option.responseType]();\n    }\n\n    return res.json();\n  });\n}\n/**\n * 加载图片\n * @param  {} url\n */\n\n\nfunction loadImage(url) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n    image.src = url;\n\n    image.onload = function () {\n      resolve(image);\n    };\n\n    image.onerror = function (e) {\n      reject(e);\n    };\n  });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTA1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxJQUFULENBQWNDLEdBQWQsRUFBZ0M7QUFBQSxNQUFiQyxNQUFhLHVFQUFKLEVBQUk7O0FBQzVCLE1BQUlBLE1BQU0sQ0FBQ0MsSUFBUCxLQUFnQixPQUFwQixFQUE2QjtBQUN6QixXQUFPQyxTQUFTLENBQUNILEdBQUQsQ0FBaEI7QUFDSDs7QUFDREMsRUFBQUEsTUFBTSxHQUFHRyxNQUFNLENBQUNDLE1BQVAsQ0FBYztBQUNuQkMsSUFBQUEsTUFBTSxFQUFFLEtBRFc7QUFFbkJDLElBQUFBLE9BQU8sRUFBRTtBQUZVLEdBQWQsRUFHTk4sTUFITSxDQUFUO0FBSUEsU0FBT08sS0FBSyxDQUFDUixHQUFELG9CQUFVQyxNQUFWLEVBQUwsQ0FBd0JRLElBQXhCLENBQTZCLFVBQUFDLEdBQUcsRUFBRTtBQUNyQyxRQUFJVCxNQUFNLENBQUNVLFlBQVgsRUFBeUI7QUFDckIsYUFBT0QsR0FBRyxDQUFDVCxNQUFNLENBQUNVLFlBQVIsQ0FBSCxFQUFQO0FBQ0g7O0FBQ0QsV0FBT0QsR0FBRyxDQUFDRSxJQUFKLEVBQVA7QUFDSCxHQUxNLENBQVA7QUFNSDtBQUNEO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxTQUFTVCxTQUFULENBQW1CSCxHQUFuQixFQUF3QjtBQUNyQixTQUFPLElBQUlhLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBbUI7QUFDakMsUUFBSUMsS0FBSyxHQUFHLElBQUlDLEtBQUosRUFBWjtBQUNBRCxJQUFBQSxLQUFLLENBQUNFLEdBQU4sR0FBWWxCLEdBQVo7O0FBQ0FnQixJQUFBQSxLQUFLLENBQUNHLE1BQU4sR0FBZSxZQUFJO0FBQ2ZMLE1BQUFBLE9BQU8sQ0FBQ0UsS0FBRCxDQUFQO0FBQ0gsS0FGRDs7QUFHQUEsSUFBQUEsS0FBSyxDQUFDSSxPQUFOLEdBQWdCLFVBQUNDLENBQUQsRUFBSztBQUNqQk4sTUFBQUEsTUFBTSxDQUFDTSxDQUFELENBQU47QUFDSCxLQUZEO0FBR0osR0FUTSxDQUFQO0FBVUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaW5pR0wvLi9zcmMvVXRpbHMvTG9hZGVyLmpzPzhlZTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDliqDovb3otYTmupBcbiAqIEBwYXJhbSAge30gdXJsXG4gKiBAcGFyYW0gIHt9IG9wdGlvbj17fVxuICovXG5mdW5jdGlvbiBsb2FkKHVybCwgb3B0aW9uID0ge30pIHtcbiAgICBpZiAob3B0aW9uLnR5cGUgPT09ICdpbWFnZScpIHtcbiAgICAgICAgcmV0dXJuIGxvYWRJbWFnZSh1cmwpO1xuICAgIH1cbiAgICBvcHRpb24gPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgaGVhZGVyczoge31cbiAgICB9LCBvcHRpb24pO1xuICAgIHJldHVybiBmZXRjaCh1cmwsIHsuLi5vcHRpb259KS50aGVuKHJlcz0+e1xuICAgICAgICBpZiAob3B0aW9uLnJlc3BvbnNlVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc1tvcHRpb24ucmVzcG9uc2VUeXBlXSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgIH0pO1xufVxuLyoqXG4gKiDliqDovb3lm77niYdcbiAqIEBwYXJhbSAge30gdXJsXG4gKi9cbmZ1bmN0aW9uIGxvYWRJbWFnZSh1cmwpIHtcbiAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+e1xuICAgICAgICBsZXQgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaW1hZ2Uuc3JjID0gdXJsO1xuICAgICAgICBpbWFnZS5vbmxvYWQgPSAoKT0+e1xuICAgICAgICAgICAgcmVzb2x2ZShpbWFnZSk7XG4gICAgICAgIH07XG4gICAgICAgIGltYWdlLm9uZXJyb3IgPSAoZSk9PntcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfTtcbiAgIH0pO1xufVxuZXhwb3J0IHtcbiAgICBsb2FkLCBsb2FkSW1hZ2Vcbn07XG4iXSwibmFtZXMiOlsibG9hZCIsInVybCIsIm9wdGlvbiIsInR5cGUiLCJsb2FkSW1hZ2UiLCJPYmplY3QiLCJhc3NpZ24iLCJtZXRob2QiLCJoZWFkZXJzIiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwicmVzcG9uc2VUeXBlIiwianNvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiaW1hZ2UiLCJJbWFnZSIsInNyYyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///905\n')},88:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(905);\n\nvar Util = {\n  Loader: _Loader__WEBPACK_IMPORTED_MODULE_0__\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Util);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUNBO0FBQ0EsSUFBTUMsSUFBSSxHQUFHO0FBQ1RELEVBQUFBLE1BQU0sRUFBTkEsb0NBQU1BO0FBREcsQ0FBYjtBQUdBLGlFQUFlQyxJQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vTWluaUdMLy4vc3JjL1V0aWxzL2luZGV4LmpzP2M2NzMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgKiBhcyBMb2FkZXIgZnJvbSAnLi9Mb2FkZXInO1xuY29uc3QgVXRpbCA9IHtcbiAgICBMb2FkZXJcbn07XG5leHBvcnQgZGVmYXVsdCBVdGlsO1xuIl0sIm5hbWVzIjpbIkxvYWRlciIsIlV0aWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///88\n')},772:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ src)\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(671);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(144);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__(326);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js + 1 modules\nvar inherits = __webpack_require__(340);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\nvar possibleConstructorReturn = __webpack_require__(963);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(120);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(942);\n;// CONCATENATED MODULE: ./src/Base.js\n\n\n\n\n/**\n * 图层基础类\n * @class\n */\nvar Base = /*#__PURE__*/function () {\n  function Base() {\n    (0,classCallCheck/* default */.Z)(this, Base);\n\n    (0,defineProperty/* default */.Z)(this, "layers", []);\n\n    (0,defineProperty/* default */.Z)(this, "_listeners", {});\n  }\n\n  (0,createClass/* default */.Z)(Base, [{\n    key: "on",\n    value:\n    /**\n     * 事件监听,用法同jQuery.on\n     */\n    function on(type, listener) {\n      var listeners = this._listeners;\n\n      if (listeners[type] === undefined) {\n        listeners[type] = [];\n      }\n\n      if (listeners[type].indexOf(listener) === -1) {\n        listeners[type].push(listener);\n      }\n    }\n    /**\n     * 触发事件\n     * @example\n     * this.fire("change",event)\n     */\n\n  }, {\n    key: "fire",\n    value: function fire(type, event) {\n      var listeners = this._listeners;\n      var listenerArray = listeners[type];\n\n      if (listenerArray !== undefined) {\n        var array = listenerArray.slice(0);\n\n        for (var i = 0, l = array.length; i < l; i++) {\n          array[i].call(this, event);\n        }\n      }\n    }\n    /**\n     * 关闭事件\n     * @example\n     * this.off(\'change\',onChange)\n     */\n\n  }, {\n    key: "off",\n    value: function off(type, listener) {\n      var listeners = this._listeners;\n      var listenerArray = listeners[type];\n\n      if (listenerArray !== undefined) {\n        if (listener) {\n          var index = listenerArray.indexOf(listener);\n\n          if (index !== -1) {\n            listenerArray.splice(index, 1);\n          }\n        } else {\n          this._listeners[type] = [];\n        }\n      }\n    }\n  }, {\n    key: "initConfig",\n    value: function initConfig(config) {}\n    /**\n     * 地图添加图层时调用,由子类实现\n     * @param {any} map\n     */\n\n  }, {\n    key: "onAdd",\n    value: function onAdd(map) {\n      this.miniGL = map;\n    }\n    /**\n     * 地图每帧调用该函数\n     */\n\n  }, {\n    key: "update",\n    value: function update() {}\n    /**\n     * 移除图层时调用\n     */\n\n  }, {\n    key: "onRemove",\n    value: function onRemove() {\n      this._listeners = {};\n    }\n    /**\n     * 添加图层\n     * @param {Layer} layer - 图层\n     */\n\n  }, {\n    key: "addLayer",\n    value: function addLayer(layer) {\n      layer.id = ++this._layerid;\n      this.layers.push(layer);\n      layer.onAdd(this); // 初始化layer\n    }\n    /**\n     * 删除图层\n     * @param {Layer} layer - 图层\n     */\n\n  }, {\n    key: "removeLayer",\n    value: function removeLayer(layer) {\n      for (var x in this.layers) {\n        if (this.layers[x].id === layer.id) {\n          this.layers[x].onRemove && this.layers[x].onRemove();\n          this.layers.splice(x, 1);\n          return;\n        }\n      }\n    }\n    /**\n     * 获取图层通过id\n     */\n\n  }, {\n    key: "getLayerById",\n    value: function getLayerById(id) {\n      for (var i = 0; i < this.layers.length; i++) {\n        if (this.layers[i].id === id) return this.layers[i];\n      }\n    }\n  }]);\n\n  return Base;\n}();\n\n/* harmony default export */ const src_Base = (Base);\n// EXTERNAL MODULE: ./node_modules/gl-matrix/esm/mat3.js + 1 modules\nvar mat3 = __webpack_require__(628);\n;// CONCATENATED MODULE: ./src/View/Viewport.js\n\n\n\n/**\n * @class\n */\n\nvar ViewPort = /*#__PURE__*/function () {\n  function ViewPort(config) {\n    (0,classCallCheck/* default */.Z)(this, ViewPort);\n\n    this.miniGL = config.miniGL;\n    this.gl = this.miniGL.gl;\n    this.config = Object.assign({}, config.config);\n    this.transform = mat3/* create */.Ue(); // 2d视图转换矩阵\n\n    this.convertTransform = mat3/* create */.Ue(); // 空间转换矩阵\n\n    this.scale = 1;\n    this.translate = [0, 0];\n    this.rotation = Math.PI * 2; // 弧度\n  }\n  /**\n   * @param  {} x=0\n   * @param  {} y=0\n   */\n\n\n  (0,createClass/* default */.Z)(ViewPort, [{\n    key: "convertScreenToClip",\n    value: function convertScreenToClip() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return {\n        x: x * 2 / this.width - 1,\n        y: 1 - y * 2 / this.height\n      };\n    }\n    /**\n     * @param  {} x=0\n     * @param  {} y=0\n     */\n\n  }, {\n    key: "convertClipToScreen",\n    value: function convertClipToScreen() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return {\n        x: (x + 1) * this.width / 2,\n        y: (1 - y) * this.height / 2\n      };\n    }\n    /**\n     * 重新布局\n     */\n\n  }, {\n    key: "resize",\n    value: function resize() {\n      var ratio = window.devicePixelRatio;\n      this.pixelRatio = ratio;\n      var width = this.config.width || this.miniGL.container.clientWidth;\n      var height = this.config.height || this.miniGL.container.clientHeight;\n      var renderWidth = width * ratio;\n      var renderHeight = height * ratio;\n      this.miniGL.canvasDOM.width = renderWidth;\n      this.miniGL.canvasDOM.height = renderHeight;\n      this.miniGL.canvasDOM.style.width = width + \'px\';\n      this.miniGL.canvasDOM.style.height = height + \'px\';\n      this.gl.viewport(0, 0, renderWidth, renderHeight);\n      this.renderWidth = renderWidth;\n      this.renderHeight = renderHeight;\n      this.width = width;\n      this.height = height;\n      this.ratio = width / height;\n      this.makeMatrix();\n    }\n  }, {\n    key: "makeMatrix",\n    value: function makeMatrix() {\n      // 计算好坐标转换矩阵\n      var transform = mat3/* create */.Ue();\n      mat3/* scale */.bA(transform, transform, [2 / this.width, -2 / this.height]); // gl-matrix会以初次进行换算的坐标系为基准空间，来进行换算\n      // 也就是说每次进行转换的时候，都是在原矩阵上做计算和转换，而不只是改变矩阵的值\n\n      mat3/* translate */.Iu(transform, transform, [-this.width / 2, -this.height / 2]);\n      this.matrix = transform;\n      mat3/* copy */.JG(this.transform, transform);\n    }\n  }]);\n\n  return ViewPort;\n}();\n\n/* harmony default export */ const Viewport = (ViewPort);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 5 modules\nvar toConsumableArray = __webpack_require__(785);\n;// CONCATENATED MODULE: ./src/Shaders/mesh.js\n/* harmony default export */ const mesh = ({\n  vertexShader: "\\n\\tprecision highp float;\\n\\tattribute vec2 position;\\n\\tattribute vec4 color;\\n\\tvarying vec4 vColor;\\n    uniform mat3 transform;\\n    uniform mat3 modelView;\\n\\tuniform float z;\\n\\tvoid main()\\n\\t{\\n\\t\\tvColor = color;\\n\\t\\tvec3 mPosition = transform * modelView * vec3(position,1.);\\n\\t\\tgl_Position = vec4(mPosition.xy,z,1.0);\\n\\t\\t\\n\\t}\\n\\t",\n  fragmentShader: "\\n\\tprecision highp float;\\n\\tvarying vec4 vColor;\\n\\tvoid main()\\n\\t{\\n\\t\\tgl_FragColor = vColor;\\n\\t}\\n\\t"\n});\n// EXTERNAL MODULE: ./src/Mesh/Base.js\nvar Mesh_Base = __webpack_require__(33);\n;// CONCATENATED MODULE: ./src/Mesh/Mesh.js\n\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\nvar Mesh = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(Mesh, _Base);\n\n  var _super = _createSuper(Mesh);\n\n  // array.BYTES_PER_ELEMENT * indicesEachLength\n  function Mesh() {\n    var _this;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      wireFrame: false\n    };\n\n    (0,classCallCheck/* default */.Z)(this, Mesh);\n\n    _this = _super.call(this, config);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", \'TRIANGLES\');\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    _this.shaders = {\n      vertex: mesh.vertexShader,\n      fragment: mesh.fragmentShader\n    };\n    _this.uniformData.z = {\n      value: config.z || 1,\n      type: \'uniform1f\'\n    };\n\n    _this.init(config);\n\n    _this.vSize = 2;\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(Mesh, [{\n    key: "setMap",\n    value: function setMap(src) {\n      var _this2 = this;\n\n      return this.loadTexture(this.gl, src).then(function (texture) {\n        _this2.setData(texture);\n      });\n    }\n  }, {\n    key: "setData",\n    value: function setData(data, indices) {\n      this.dispose();\n      var points = [];\n      var colors = [];\n      this.data = data;\n      data.forEach(function (item) {\n        var coord = [item.position.x, item.position.y];\n        var color = item.color || [1, 1, 0, 1];\n        colors.push.apply(colors, (0,toConsumableArray/* default */.Z)(color));\n        points.push.apply(points, coord);\n      });\n      this.vertex = points;\n      this.setBufferData(points, \'position\', 2);\n      this.setBufferData(colors, \'color\', 4);\n      this.setIndices(indices);\n    }\n  }, {\n    key: "setBufferDatas",\n    value: function setBufferDatas(_ref) {\n      var position = _ref.position,\n          color = _ref.color,\n          indices = _ref.indices,\n          uvs = _ref.uvs;\n      var viewport = this.miniGL.viewport;\n      this.dispose();\n      this.vertex = position;\n      this.setBufferData(position, \'position\', 2);\n      this.setBufferData(color, \'color\', 4);\n      this.setBufferData(uvs, \'uv\', 2);\n      this.setIndices(indices);\n    }\n  }, {\n    key: "setIndices",\n    value: function setIndices(input) {\n      var indices = []; // 支持显示网格线\n\n      if (this.config.wireFrame && this.drawType === \'TRIANGLES\') {\n        for (var i = 0; i < input.length - 2; i += 3) {\n          indices.push(input[i], input[i + 1], input[i + 1], input[i + 2], input[i + 2], input[i]);\n        }\n      } else {\n        indices = input;\n      }\n\n      this.indices = indices; // 顶点buffer\n\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indicesPointer);\n      this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), this.gl.STATIC_DRAW);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      // 2D 只需要两个坐标轴标识位置\n      var offset = 0; // 从数据第几位开始偏移\n\n      var normalize = false; // 分别绑定数据到shader程序中\n\n      for (var key in this.buffers) {\n        var bufferData = this.buffers[key];\n        var bufferPosition = this.getAttribLocation(key); // 分别绑定数据到shader程序中\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData);\n        this.gl.vertexAttribPointer(bufferPosition, this.buffersSize[key], this.gl.FLOAT, normalize, 0, offset);\n        this.gl.enableVertexAttribArray(bufferPosition);\n      } // 使用顶点数据\n\n\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indicesPointer); // 加载shader程序\n\n      this.gl.useProgram(this.shaderProgram);\n      this.setUniformData(); // 渲染\n\n      if (this.indices.length) {\n        var drawType = this.config.wireFrame ? \'LINES\' : this.gl[this.drawType]; // offset必须乘以类型数组的长度，意味着要从内存中数据的对应字节数开始算 根据类型乘对应的BYTES_PER_ELEMENT\n\n        this.gl.drawElements(drawType, this.indices.length, this.gl.UNSIGNED_SHORT, this.offset);\n      }\n    }\n  }]);\n\n  return Mesh;\n}(Mesh_Base/* default */.Z);\n\n/* harmony default export */ const Mesh_Mesh = (Mesh);\n;// CONCATENATED MODULE: ./src/Shaders/point.js\n/* harmony default export */ const point = ({\n  vertexShader: function vertexShader(config) {\n    return "\\n\\t\\tprecision mediump float;\\n\\t\\tattribute vec2 position;\\n\\t\\tattribute vec4 color;\\n\\t\\tattribute float size;\\n\\t\\tattribute float initTime;\\n\\t\\tuniform float z;\\n\\t\\tuniform mat3 transform;\\n\\t\\tvarying vec4 vColor;\\n\\t\\tuniform float t;\\n\\t\\tuniform float scale;\\n        uniform float pixelRatio;\\n\\t\\tvarying float vTime;\\n\\t\\t\\n\\t\\tvoid main()\\n\\t\\t{\\n\\t\\t\\tvColor = color;\\n\\t\\t\\tgl_PointSize = size * pixelRatio ".concat(config.sizeAttenuation ? \'/scale\' : \'\', ";\\n\\t\\t\\tvec3 mPosition = transform * vec3(position,1.);\\n\\t\\t\\tgl_Position = vec4(mPosition.xy,z,1.);\\n\\t\\t\\tvTime = initTime;\\n\\t\\t}\\n\\t\\t");\n  },\n  fragmentShader: function fragmentShader(_ref) {\n    var isRound = _ref.isRound,\n        map = _ref.map,\n        isGradual = _ref.isGradual;\n    return "\\n\\t\\tprecision mediump float;\\n\\t\\tuniform float t;\\n\\t\\tuniform float antialias;\\n\\t\\tuniform sampler2D map;\\n\\t\\tvarying float vTime;\\n\\t\\tvarying vec4 vColor;\\n\\t\\tvoid main()\\n\\t\\t{\\n\\t\\t\\tfloat distance = distance(gl_PointCoord, vec2(0.5, 0.5));\\n\\t\\t".concat(isRound ? "\\n\\t\\t\\tif (distance <= 0.5){" : \'\', "\\n\\t\\t\\t").concat(map ? "\\n\\t\\t\\t\\tvec4 texelColor = texture2D( map, gl_PointCoord ); \\n\\t\\t\\t\\tgl_FragColor = texelColor;\\n\\t\\t\\t\\t".concat(isGradual ? "\\n\\t\\t\\t\\tgl_FragColor.w *= sin(t+vTime)*0.75/2. + 1.-0.75/2." : \'\', ";\\n\\t\\t\\t\\tif(texelColor.w<=0.01){\\n\\t\\t\\t\\t\\tdiscard;\\n\\t\\t\\t\\t}\\n\\t\\t\\t") : "\\n\\t\\t\\t\\tgl_FragColor = vColor;\\n\\t\\t\\t\\t".concat(isGradual ? "\\n\\t\\t\\t\\tgl_FragColor.w = 1. - distance*2.;\\n\\t\\t\\t\\tgl_FragColor.w *= sin(t+vTime)*0.75/2. + 1.-0.75/2. ;" : \'\', "\\n\\t\\t\\t"), "\\n\\t\\t").concat(isRound ? "\\n\\t\\t\\t\\tfloat smoothSideRatio = smoothstep(0.,antialias,(0.5-distance));\\n\\t\\t\\t\\tgl_FragColor.w *= smoothSideRatio;\\n\\t\\t\\t}else{\\n\\t\\t\\t\\tdiscard;\\n\\t\\t\\t}\\n\\t\\t" : \'\', "\\n\\t\\t}\\n\\t\\t");\n  }\n});\n;// CONCATENATED MODULE: ./src/Mesh/Point.js\n\n\n\n\n\n\n\n\n\nfunction Point_createSuper(Derived) { var hasNativeReflectConstruct = Point_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction Point_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\nvar Point = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(Point, _Base);\n\n  var _super = Point_createSuper(Point);\n\n  function Point(config) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, Point);\n\n    config = Object.assign({\n      isRound: true,\n      initTime: false,\n      sizeAttenuation: true\n    }, config);\n    _this = _super.call(this, config);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", \'POINTS\');\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "vertex", []);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "vSize", 2);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "bufferType", \'GL_DYNAMIC_DRAW\');\n\n    _this.shaders = {\n      vertex: config.vertexShader || point.vertexShader(config),\n      fragment: config.fragmentShader || point.fragmentShader(config)\n    };\n    _this.uniformData = {\n      z: {\n        value: 1,\n        type: \'uniform1f\'\n      },\n      t: {\n        value: 1,\n        type: \'uniform1f\'\n      },\n      antialias: {\n        value: 0.1,\n        type: \'uniform1f\'\n      }\n    };\n\n    _this.init(config);\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(Point, [{\n    key: "setData",\n    value: function setData(data) {\n      var _this2 = this;\n\n      this.dispose();\n      var points = [];\n      var colors = [];\n      var size = [];\n      var vTime = [];\n      data.forEach(function (item) {\n        points.push(item.position.x, item.position.y);\n        colors.push.apply(colors, (0,toConsumableArray/* default */.Z)(item.color || [1, 0, 0, 1]));\n        size.push(item.size || 10);\n        vTime.push(item.initTime || _this2.config.initTime || 2 * Math.random() * Math.PI);\n      });\n      this.vertex = points;\n      this.setBufferData(points, \'position\', 2);\n      this.setBufferData(colors, \'color\', 4);\n      this.setBufferData(size, \'size\', 1);\n      this.setBufferData(vTime, \'initTime\', 1);\n    }\n    /**\n     * \n     * @param {any} param 入参\n     */\n\n  }, {\n    key: "setBufferDatas",\n    value: function setBufferDatas(_ref) {\n      var position = _ref.position,\n          color = _ref.color,\n          size = _ref.size,\n          initTime = _ref.initTime;\n      var viewport = this.miniGL.viewport;\n      this.dispose();\n      this.uniformData.transform = {\n        value: viewport.transform,\n        type: \'uniformMatrix3fv\'\n      };\n      this.vertex = position;\n      position && this.setBufferData(position, \'position\', 2);\n      color && this.setBufferData(color, \'color\', 4);\n      size && this.setBufferData(size, \'size\', 1);\n\n      if (initTime) {\n        this.setBufferData(initTime, \'initTime\', 1);\n      }\n    }\n  }]);\n\n  return Point;\n}(Mesh_Base/* default */.Z);\n\n/* harmony default export */ const Mesh_Point = (Point);\n// EXTERNAL MODULE: ./src/Mesh/Line.js + 1 modules\nvar Line = __webpack_require__(70);\n;// CONCATENATED MODULE: ./src/Shaders/widthLine.js\n/* harmony default export */ const widthLine = ({\n  // 先求连接线然后再求垂线\n  // 求出等比放大的值\n  vertexShader: "\\n\\tprecision lowp float;\\n\\tattribute vec2 now;\\n\\tattribute vec2 pre;\\n\\tattribute vec2 next;\\n\\tattribute float side;\\n\\tuniform float width;\\n\\tuniform float aspect;\\n\\tuniform mat3 transform;\\n\\tuniform float offset;\\n\\tvarying float vSide;\\n\\tvoid main()\\n\\t{\\n\\t\\tvSide = side;\\n\\n\\t\\t// \\u5148\\u8F6C\\u6362\\u5750\\u6807\\u7CFB\\n\\t\\tvec2 mNow = (transform*vec3(now,1.)).xy;\\n\\t\\tvec2 mNext = (transform*vec3(next,1.)).xy;\\n\\t\\tvec2 mPre = (transform*vec3(pre,1.)).xy;\\n\\t\\tvec2 _now = vec2(mNow);\\n\\t\\tvec2 _next = vec2(mNext);\\n\\t\\tvec2 _pre =  vec2(mPre);\\n\\t\\n\\t\\t// \\u5148\\u628A\\u672C\\u5750\\u6807\\u7CFB\\u7684\\u5750\\u6807\\u653E\\u5927\\uFF0C\\u548C\\u771F\\u5B9E\\u7684\\u5916\\u754C\\u5750\\u6807\\u4E00\\u6837,\\u8FD9\\u6837\\u6C42\\u51FA\\u6765\\u7684\\u76F8\\u5BF9\\u5411\\u91CF\\u662F\\u51C6\\u786E\\u7684\\uFF0C\\u5982\\u679C\\u5728\\u540E\\u9762\\u4E4B\\u95F4\\u5BF9normal\\u8FDB\\u884C\\u53D8\\u5316\\uFF0C\\u5C31\\u4F1A\\u5F97\\u51FA\\u9519\\u8BEF\\u7684\\u7ED3\\u679C\\n\\t\\t_now.x *= aspect;\\n\\t\\t_next.x *= aspect;\\n\\t\\t_pre.x *= aspect;\\n\\t\\t\\n\\t\\tvec2 point0_1 = normalize(_now - _pre);\\n\\t\\tvec2 point2_1 = normalize(_next - _now);\\n\\t\\tvec2 point2_1_0v = normalize(point2_1 + point0_1);\\n\\t\\t\\n\\t\\tvec2 normal = vec2( -point2_1_0v.y , point2_1_0v.x );\\n\\t\\tvec2 offsets = offset*normal;\\n\\n\\t\\t//\\u8FD9\\u4E2A\\u7B97\\u6CD5\\u4E0B\\u5148\\u653E\\u5927,\\u6C42\\u51FA\\u7684Normal\\u6BD4\\u4F8B\\u5728\\u653E\\u5927\\u7684\\u5750\\u6807\\u7CFB\\u4E0B\\u662F\\u5BF9\\u7684\\uFF0C\\u6839\\u636E\\u8FD9\\u4E2Anormal\\u6C42\\u51FA\\u653E\\u5927\\u7684\\u6BD4\\u4F8B\\n\\t\\tfloat ratio = sqrt(1.0 - pow(dot(normal,point0_1),2.0));\\n\\t\\tvec2 dir = normal * width/ratio * .5 * side + offsets;\\n\\n\\t\\t// \\u5F97\\u51FA\\u7684x\\u5750\\u6807\\u4F1A\\u88AB\\u653E\\u5927\\uFF0C\\u8FD9\\u91CC\\u8981\\u9664\\u6389,\\u8BB0\\u5F97\\u8981\\u7528\\u8F6C\\u6362\\u540E\\u5750\\u6807\\u8FDB\\u884C\\u52A0\\u51CF\\n\\t\\tgl_Position = vec4(mNow.x + dir.x/aspect,mNow.y+dir.y , 1., 1.);\\n\\t}\\n\\t",\n  fragmentShader: "\\n\\tprecision lowp float;\\n\\tuniform vec4 color;\\n\\tvarying float vSide;\\n\\tvoid main()\\n\\t{\\n\\t\\tfloat smoothSideRatio = max(0.1,smoothstep(0.,0.4,(1. - abs(vSide))));\\n\\t\\tgl_FragColor = color;\\n\\t\\tgl_FragColor.w = smoothSideRatio;\\n\\t}\\n\\t"\n});\n;// CONCATENATED MODULE: ./src/Mesh/WidthLine.js\n\n\n\n\n\n\n\n\nfunction WidthLine_createSuper(Derived) { var hasNativeReflectConstruct = WidthLine_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction WidthLine_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\nvar WidthLine = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(WidthLine, _Base);\n\n  var _super = WidthLine_createSuper(WidthLine);\n\n  // "TRIANGLE_STRIP";\n  function WidthLine(config) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, WidthLine);\n\n    _this = _super.call(this);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", \'TRIANGLES\');\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "shaders", {\n      vertex: widthLine.vertexShader,\n      fragment: widthLine.fragmentShader\n    });\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    config = Object.assign({\n      width: 20,\n      z: 1,\n      offset: 0\n    }, config);\n    _this.uniformData = {\n      z: {\n        value: config.z || 1,\n        type: \'uniform1f\'\n      }\n    };\n\n    _this.init(config);\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(WidthLine, [{\n    key: "setData",\n    value: function setData(data) {\n      var viewport = this.miniGL.viewport;\n      if (!data.length && data.length < 2) return console.warn(\'need input data.length >= 2\');\n      this.uniformData.color = {\n        value: this.config.color || [1, 0, 1, 1],\n        type: \'uniform4fv\'\n      };\n      this.uniformData.width = {\n        value: 2 * this.config.width / this.miniGL.viewport.height,\n        type: \'uniform1f\'\n      };\n      this.uniformData.offset = {\n        value: 2 * this.config.offset / this.miniGL.viewport.height,\n        type: \'uniform1f\'\n      };\n      this.data = data;\n      var points = [];\n      data.forEach(function (item) {\n        points.push(item.position.x, item.position.y);\n      }); // 生产双倍点for两个边\n\n      var res = this.calcSidePoints(points);\n      this.setBufferData(res.nowData, \'now\', 2);\n      this.setBufferData(res.preData, \'pre\', 2);\n      this.setBufferData(res.nextData, \'next\', 2);\n      this.setBufferData(res.side, \'side\', 1); // 生成顶点\n\n      var indices = [];\n      var indicesLength = res.nowData.length / 2; // TRIANGLES情况\n\n      for (var i = 0; i < indicesLength - 2; i += 2) {\n        indices.push(i);\n        indices.push(i + 1);\n        indices.push(i + 2);\n        indices.push(i + 2);\n        indices.push(i + 1);\n        indices.push(i + 3);\n      } // Strip退化方案太反人类，不hack 了\n      // for (let i = 0; i < indicesLength; i++) {\n      // \t//012 213 233 336 366 667 678\n      // \t// 4 =>3 5=>6 //退化过程\n      // \t// data[length - 1],\n      // \tindices.push(i);\n      // }\n\n\n      this.setIndices(indices);\n      this.res = res;\n    }\n  }, {\n    key: "addData",\n    value: function addData(data) {}\n  }, {\n    key: "calcSidePoints",\n    value: function calcSidePoints() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var length = data.length;\n      var side = [];\n      var nextData = [];\n      var preData = [];\n      var nowData = []; // 生产双倍点for两个边\n\n      for (var i = 0; i < length; i += 2) {\n        side.push(1, -1);\n        nowData.push(data[i], data[i + 1], data[i], data[i + 1]);\n      }\n\n      var next = [2 * data[length - 2] - data[length - 4], 2 * data[length - 1] - data[length - 3]];\n      nextData = [].concat(nowData, next, next);\n      nextData.splice(0, 4);\n      var pre = [2 * data[0] - data[2], 2 * data[1] - data[3]];\n      preData = [].concat(pre, pre, nowData);\n      return {\n        nowData: nowData,\n        preData: preData,\n        side: side,\n        nextData: nextData\n      };\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      // 2D 只需要两个坐标轴标识位置\n      var offset = 0; // 从数据第几位开始偏移\n\n      var normalize = false;\n\n      for (var key in this.buffers) {\n        var bufferData = this.buffers[key];\n        var bufferPosition = this.getAttribLocation(key); // 分别绑定数据到shader程序中\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData);\n        this.gl.vertexAttribPointer(bufferPosition, this.buffersSize[key], this.gl.FLOAT, normalize, 0, offset); // todo:webgl2.0 实例数组能减少同样形状但渲染不同的高性能方案\n\n        this.gl.enableVertexAttribArray(bufferPosition);\n      } // 使用顶点数据\n\n\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indicesPointer); // 加载shader程序\n\n      this.gl.useProgram(this.shaderProgram);\n      this.setUniformData(); // 渲染\n\n      if (this.indices.length) {\n        this.gl.drawElements(this.gl[this.drawType], this.indices.length, this.gl.UNSIGNED_SHORT, this.offset);\n      }\n    }\n  }]);\n\n  return WidthLine;\n}(Mesh_Base/* default */.Z);\n\n/* harmony default export */ const Mesh_WidthLine = (WidthLine);\n;// CONCATENATED MODULE: ./src/View/Canvas.js\n\n\n\n\n\n\n\n\n/**\n * @class\n */\n\nvar Canvas = /*#__PURE__*/function () {\n  function Canvas(config) {\n    var _this = this;\n\n    (0,classCallCheck/* default */.Z)(this, Canvas);\n\n    (0,defineProperty/* default */.Z)(this, "status", \'update\');\n\n    (0,defineProperty/* default */.Z)(this, "update", function () {\n      var time = new Date().getTime();\n      var delta = time - _this.beforeTime;\n      _this.beforeTime = time;\n\n      _this.render(delta);\n\n      if (_this.status === \'update\') requestAnimationFrame(_this.update);\n    });\n\n    this.index = 0;\n    this.meshes = [];\n    this.miniGL = config.miniGL;\n    this.gl = this.miniGL.gl; // 基础渲染以下类，其他形状让让用户自己new\n    // 牺牲一些性能，渲染多次drawElements来避免通过退化三角形合并形状，导致的事件处理困难（需要分层处理合并的图层，然后按照像素去检测，比较恶心）\n\n    this.mesh = new Mesh_Mesh(config.meshConfig);\n    this.point = new Mesh_Point(config.pointConfig);\n    this.line = new Line/* default */.Z(config.lineConfig);\n    this.widthLine = new Mesh_WidthLine(config.widthLineConfig);\n    this.add(this.mesh);\n    this.add(this.line);\n    this.add(this.point);\n    this.add(this.widthLine);\n  }\n\n  (0,createClass/* default */.Z)(Canvas, [{\n    key: "dispose",\n    value: function dispose() {\n      var _this2 = this;\n\n      this.meshes.forEach(function (item) {\n        _this2.remove(item);\n\n        item.destroy && item.destroy();\n      });\n      this.meshes = [];\n    }\n  }, {\n    key: "toDataUrl",\n    value: function toDataUrl() {\n      return this.gl.canvas.toDataUrl();\n    }\n  }, {\n    key: "add",\n    value:\n    /**\n     * @param  {} mesh\n     * @param  {} [key]\n     * @returns {String} key\n     */\n    function add(mesh) {\n      this.meshes.push(mesh);\n      mesh.onAdd && mesh.onAdd(this.miniGL);\n      mesh.parent = this;\n      return mesh;\n    }\n  }, {\n    key: "remove",\n    value: function remove(child) {\n      var index = this.meshes.indexOf(child);\n      this.meshes.splice(index, 1);\n    }\n  }, {\n    key: "addChild",\n    value: function addChild() {\n      var _this$add;\n\n      (_this$add = this.add).call.apply(_this$add, [this].concat(Array.prototype.slice.call(arguments)));\n    }\n  }, {\n    key: "removeChild",\n    value: function removeChild() {\n      var _this$remove;\n\n      (_this$remove = this.remove).call.apply(_this$remove, [this].concat(Array.prototype.slice.call(arguments)));\n    }\n  }, {\n    key: "render",\n    value: function render(delta) {\n      var _this3 = this;\n\n      var gl = this.gl;\n      this.miniGL.fire(\'beforerender\', delta); // 清空\n\n      gl.clearDepth(1.0); // gl.enable(gl.DEPTH_TEST);\n\n      gl.disable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n      gl.disable(gl.CULL_FACE);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      this.meshes.forEach(function (mesh) {\n        _this3.renderMesh(mesh, delta);\n      });\n    }\n    /**\n     * @param  {} mesh\n     * @param  {} delta\n     * @param  {} parentMatrix 一级级传下来的矩阵\n     */\n\n  }, {\n    key: "renderMesh",\n    value: function renderMesh(mesh, delta, parentMatrix) {\n      var _this4 = this;\n\n      var gl = this.gl;\n      var blendMode = (mesh.texture || {}).premultiplyAlpha ? \'ONE\' : \'SRC_ALPHA\';\n      gl.enable(gl.BLEND);\n      gl.blendFunc(gl[blendMode], mesh.blendMode || gl.ONE_MINUS_SRC_ALPHA); // 写入深度缓冲\n\n      if (mesh.visible) {\n        this.makeTransform(mesh, parentMatrix);\n        this.makeNeedUniform(mesh);\n        mesh.render(delta); // 更新子元素\n\n        if (mesh.children) {\n          mesh.children.forEach(function (item) {\n            _this4.renderMesh(item, delta, mesh.uniformData.modelView.value);\n          });\n        }\n      }\n    }\n  }, {\n    key: "makeNeedUniform",\n    value: function makeNeedUniform(item) {\n      item.uniformData.aspect = {\n        value: this.miniGL.viewport.ratio,\n        type: \'uniform1f\'\n      };\n      item.uniformData.pixelRatio = {\n        value: this.miniGL.viewport.pixelRatio,\n        type: \'uniform1f\'\n      };\n      item.uniformData.scale = {\n        value: this.miniGL.viewport.scale,\n        type: \'uniform1f\'\n      };\n    }\n  }, {\n    key: "makeTransform",\n    value: function makeTransform(item, parentMatrix) {\n      if (parentMatrix) {\n        var modelView = mat3/* mul */.dC(mat3/* create */.Ue(), parentMatrix, item.matrix);\n        item.uniformData.modelView = {\n          value: modelView,\n          type: \'uniformMatrix3fv\'\n        };\n      } else {\n        item.uniformData.modelView = {\n          value: item.matrix,\n          type: \'uniformMatrix3fv\'\n        };\n      }\n\n      item.uniformData.transform = {\n        value: this.miniGL.viewport.transform,\n        type: \'uniformMatrix3fv\'\n      };\n    }\n  }]);\n\n  return Canvas;\n}();\n\n/* harmony default export */ const View_Canvas = (Canvas);\n;// CONCATENATED MODULE: ./src/Control/Controller.js\n\n\n\n\n\nvar Controller = /*#__PURE__*/function () {\n  function Controller(config) {\n    var _this = this;\n\n    (0,classCallCheck/* default */.Z)(this, Controller);\n\n    (0,defineProperty/* default */.Z)(this, "onMouseMove", function (e) {\n      var x = e.offsetX - _this.startXY.x + _this.startXY.startX;\n      var y = e.offsetY - _this.startXY.y + _this.startXY.startY;\n\n      _this.moveTo(x, y);\n    });\n\n    (0,defineProperty/* default */.Z)(this, "onMouseUp", function () {\n      var container = _this.miniGL.container;\n      container.removeEventListener(\'mousemove\', _this.onMouseMove);\n      container.removeEventListener(\'mouseup\', _this.onMouseUp);\n    });\n\n    this.miniGL = config.miniGL;\n    this.viewport = this.miniGL.viewport;\n    this.gl = this.miniGL.gl;\n    this.config = Object.assign({// 默认参数\n    }, config.config);\n\n    if (!config.disableController) {\n      this.addEvents();\n    }\n\n    this.matrix = mat3/* create */.Ue();\n  }\n\n  (0,createClass/* default */.Z)(Controller, [{\n    key: "addEvents",\n    value: function addEvents() {\n      var _this2 = this;\n\n      var container = this.miniGL.container;\n      container.addEventListener(\'mousedown\', function (e) {\n        if (e.ctrlKey) {\n          e.preventDefault();\n          return;\n        }\n\n        _this2.startXY = {\n          x: e.offsetX,\n          y: e.offsetY,\n          startX: _this2.viewport.translate[0],\n          startY: _this2.viewport.translate[1]\n        };\n\n        _this2.addMoveEvents();\n      });\n      container.addEventListener(\'wheel\', function (e) {\n        e.preventDefault();\n\n        _this2.zoom(e.deltaY > 0 ? 0.99 : 1.01, e.pageX, e.pageY);\n      });\n    }\n  }, {\n    key: "addMoveEvents",\n    value: function addMoveEvents() {\n      var container = this.miniGL.container;\n      container.addEventListener(\'mousemove\', this.onMouseMove);\n      container.addEventListener(\'mouseup\', this.onMouseUp);\n    }\n  }, {\n    key: "zoomTo",\n    value:\n    /**\n     * @param  {} scale\n     * @param  {} cx\n     * @param  {} cy\n     */\n    function zoomTo(scale, cx, cy) {\n      var changeScale = scale / this.viewport.scale;\n      this.zoom(changeScale, cx, cy);\n    }\n    /**\n     * @param  {} scale\n     * @param  {} cx\n     * @param  {} cy\n     */\n\n  }, {\n    key: "zoom",\n    value: function zoom(scale, cx, cy) {\n      // 求变换前的屏幕坐标\n      var canvasPos = [(cx - this.viewport.translate[0]) / this.viewport.scale, (cy - this.viewport.translate[1]) / this.viewport.scale];\n      var nextScale = scale * this.viewport.scale; // 求出变换后的偏移坐标\n\n      var x = cx - canvasPos[0] * nextScale;\n      var y = cy - canvasPos[1] * nextScale;\n      this.transform(nextScale, x, y);\n    } // 这个x,y是当前屏幕的x,y,变换后的\n\n    /**\n     * @param  {} x\n     * @param  {} y\n     */\n\n  }, {\n    key: "moveTo",\n    value: function moveTo(x, y) {\n      var scale = this.viewport.scale;\n      this.transform(scale, x, y);\n    }\n  }, {\n    key: "move",\n    value: function move(x, y) {\n      var scale = this.viewport.scale;\n      x = x + this.viewport.translate[0];\n      y = y + this.viewport.translate[1];\n      this.transform(scale, x, y);\n    }\n    /** 转换到指定情形，先放大后平移，然后注入到viewport.transform\n     * @param  {} scale\n     * @param  {} x\n     * @param  {} y\n     */\n\n  }, {\n    key: "transform",\n    value: function transform(scale, x, y) {\n      this.viewport.translate = [x, y];\n      this.viewport.scale = scale;\n      this.matrix = mat3/* create */.Ue();\n      mat3/* translate */.Iu(this.matrix, this.matrix, this.viewport.translate);\n      mat3/* scale */.bA(this.matrix, this.matrix, [scale, scale]);\n      mat3/* mul */.dC(this.viewport.transform, this.viewport.matrix, this.matrix);\n    }\n    /**\n     * @param  {} rad\n     * @param  {} cx=this.viewport.width/2\n     * @param  {} cy=this.viewport.height/2\n     */\n\n  }, {\n    key: "rotateTo",\n    value: function rotateTo(rad) {\n      var cx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.viewport.width / 2;\n      var cy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.viewport.height / 2;\n      var changeRad = rad - this.viewport.rotation || 0;\n      this.rotate(changeRad, cx, cy);\n    }\n  }, {\n    key: "rotate",\n    value: function rotate(rad) {\n      var cx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.viewport.width / 2;\n      var cy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.viewport.height / 2;\n      var transform = this.viewport.transform;\n      this.viewport.rotation += rad;\n      mat3/* translate */.Iu(transform, transform, [cx, cy]); // 再平移回去\n\n      mat3/* rotate */.U1(transform, transform, rad); // 再平移回去\n\n      mat3/* translate */.Iu(transform, transform, [-cx, -cy]); // 先平移到原点\n    }\n  }]);\n\n  return Controller;\n}();\n\n/* harmony default export */ const Control_Controller = (Controller);\n;// CONCATENATED MODULE: ./src/Shaders/flyline.js\n/* harmony default export */ const flyline = ({\n  // shader中进行坐标转换会不会快？CPU只会调用一次，GPU每帧都要重复去运算，2d情况下没有相机，\n  // 没有坐标因相机而变化的情况，所以不用再shader中运算，可以减少cpu的调用率\n  vertexShader: "\\n\\tprecision mediump float;\\n\\tattribute vec4 position;\\n\\tattribute float number;\\n\\tuniform vec4 startColor;\\n\\tuniform vec4 endColor;\\n\\tuniform float length;\\n\\tuniform float t;\\n\\tuniform float z;\\n\\tvarying vec4 vColor;\\n\\tvoid main()\\n\\t{\\n\\t\\tgl_Position = vec4(position.xy,z,1.);\\n\\t\\tvColor = endColor - (length + t - number)/length*(endColor - startColor);\\n\\t}\\n\\t",\n  fragmentShader: "\\n\\tprecision mediump float;\\n\\tvarying vec4 vColor;\\n\\tvoid main()\\n\\t{\\n\\t\\tif(vColor.w<=0.02){\\n\\t\\t\\tdiscard;\\n\\t\\t}\\n\\t\\tgl_FragColor = vColor;\\n\\t}\\n\\t"\n});\n;// CONCATENATED MODULE: ./src/Utils/vector.js\nfunction normalize(v) {\n  var length = Math.sqrt(v.x * v.x + v.y * v.y);\n  return {\n    x: v.x / length,\n    y: v.y / length\n  };\n}\n\nfunction addVector(v0, v1) {\n  return {\n    x: v0.x + v1.x,\n    y: v0.y + v1.y\n  };\n}\n\nfunction getVectorLength(v) {\n  var length = Math.sqrt(v.x * v.x + v.y * v.y);\n  return length;\n}\n\nfunction subVector(v0, v1) {\n  return {\n    x: v1.x - v0.x,\n    y: v1.y - v0.y\n  };\n}\n\nfunction multiple(v, t) {\n  return {\n    x: v.x * t,\n    y: v.y * t\n  };\n}\n\n\n;// CONCATENATED MODULE: ./src/Utils/BezierLine.js\n\n\n\n\nvar BezierLine = /*#__PURE__*/function () {\n  function BezierLine() {\n    (0,classCallCheck/* default */.Z)(this, BezierLine);\n  }\n\n  (0,createClass/* default */.Z)(BezierLine, [{\n    key: "setControl",\n    value: function setControl(v0, v1, v2, v3) {\n      this.v0 = v0;\n      this.v1 = v1;\n      this.v2 = v2;\n      this.v3 = v3;\n    }\n  }, {\n    key: "setData",\n    value: function setData(data) {\n      this.data = data;\n    }\n  }, {\n    key: "getPoint",\n    value: function getPoint(t) {\n      var v0 = this.v0,\n          v1 = this.v1,\n          v2 = this.v2,\n          v3 = this.v3;\n      return {\n        x: this.cubicBezier(t, v0.x, v1.x, v2.x, v3.x),\n        y: this.cubicBezier(t, v0.y, v1.y, v2.y, v3.y)\n      };\n    }\n  }, {\n    key: "cubicBezier",\n    value: function cubicBezier(t, p0, p1, p2, p3) {\n      return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n    }\n  }, {\n    key: "getSpacedPoints",\n    value: function getSpacedPoints(n) {\n      var points = [];\n      this.lengths = this.getLengths(n); // 缓存起来\n\n      for (var i = 0; i <= n; i++) {\n        var t = this.getUtoTmapping(i / n);\n        points.push(this.getPoint(t));\n      }\n\n      return points;\n    }\n  }, {\n    key: "getLengths",\n    value: function getLengths() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      var length = 0;\n      var lengths = [0];\n\n      for (var i = 1; i <= n; i++) {\n        var current = this.getPoint(i / n);\n        var last = this.getPoint((i - 1) / n);\n        length += getVectorLength(subVector(last, current));\n        lengths.push(length);\n      }\n\n      return lengths;\n    }\n  }, {\n    key: "getLength",\n    value: function getLength(n) {\n      var lengths = this.getLengths(n);\n      return lengths[lengths.length - 1];\n    } // 根据总长度算出一定比例的长度所对应的t值，\n    // 这个等距划分的算法不知道为何在贝塞尔中间的部分间距过大不再等距，有空再看下吧\n\n  }, {\n    key: "getUtoTmapping",\n    value: function getUtoTmapping(u) {\n      var lengths = this.lengths;\n      var length = lengths[lengths.length - 1];\n      var targetLength = u * length;\n      var nextIndex;\n      var nowIndex = 0;\n      lengths.find(function (item, index) {\n        if (item >= targetLength) {\n          nextIndex = index;\n          return true;\n        } else {\n          nowIndex = index;\n          return false;\n        }\n      });\n      var restRatio = u === 0 ? 0 : (targetLength - lengths[nowIndex]) / (lengths[nextIndex] - lengths[nowIndex]);\n      var t = (nowIndex + Math.max(restRatio, 0)) / (this.lengths.length - 1);\n      return t;\n    }\n  }]);\n\n  return BezierLine;\n}();\n\nfunction CubicBezierP0(t, p) {\n  var k = 1 - t;\n  return k * k * k * p;\n}\n\nfunction CubicBezierP1(t, p) {\n  var k = 1 - t;\n  return 3 * k * k * t * p;\n}\n\nfunction CubicBezierP2(t, p) {\n  return 3 * (1 - t) * t * t * p;\n}\n\nfunction CubicBezierP3(t, p) {\n  return t * t * t * p;\n}\n\n/* harmony default export */ const Utils_BezierLine = (BezierLine);\n;// CONCATENATED MODULE: ./src/Mesh/FlyLine.js\n\n\n\n\n\n\n\n\nfunction FlyLine_createSuper(Derived) { var hasNativeReflectConstruct = FlyLine_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction FlyLine_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\nvar FlyLine_Line = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(Line, _Base);\n\n  var _super = FlyLine_createSuper(Line);\n\n  function Line(config) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, Line);\n\n    config = Object.assign({\n      z: 0.1,\n      length: 50,\n      lineHeight: 0.2,\n      speed: 1,\n      smoothNumber: 1\n    }, config);\n    _this = _super.call(this, config);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", \'LINE_STRIP\');\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "shaders", {\n      vertex: flyline.vertexShader,\n      fragment: flyline.fragmentShader\n    });\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "depthMask", false);\n\n    _this.init(config);\n\n    _this.bezierLine = new Utils_BezierLine();\n    _this.uniformData = {\n      t: {\n        value: 0,\n        type: \'uniform1f\'\n      },\n      length: {\n        value: config.length,\n        type: \'uniform1f\'\n      },\n      startColor: {\n        value: config.startColor || [1, 0, 0, 0],\n        type: \'uniform4fv\'\n      },\n      endColor: {\n        value: config.endColor || [1, 0, 0, 1],\n        type: \'uniform4fv\'\n      },\n      z: {\n        value: _this.config.z,\n        type: \'uniform1f\'\n      }\n    };\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(Line, [{\n    key: "setData",\n    value: function setData(data) {\n      var viewport = this.miniGL.viewport;\n      this.data = data;\n      this.data.startXY = viewport.convertScreenToClip(data.start.x, data.start.y);\n      this.data.endXY = viewport.convertScreenToClip(data.end.x, data.end.y);\n      var midPoint = {\n        x: this.data.start.x / 2 + this.data.end.x / 2,\n        y: this.data.start.y / 2 + this.data.end.y / 2\n      };\n      var end_start = {\n        x: this.data.end.x - this.data.start.x,\n        y: this.data.end.y - this.data.start.y\n      };\n      var normal = {\n        x: end_start.y,\n        y: -end_start.x\n      };\n\n      if (end_start.x < 0) {\n        normal = {\n          x: -end_start.y,\n          y: end_start.x\n        };\n      }\n\n      var length = getVectorLength(subVector(data.end, data.start));\n      var lineHeight = this.config.lineHeight * length;\n      var controlPoint = addVector(multiple(normalize(normal), lineHeight), midPoint);\n      this.bezierLine.setControl(this.data.start, this.data.start, controlPoint, this.data.end);\n      var allPoints = this.bezierLine.getSpacedPoints(length * this.config.smoothNumber);\n      var points = [];\n      var numbers = [];\n      allPoints.forEach(function (item, index) {\n        // 最后再近些坐标转换，避免因为画布缩放导致长度计算失准\n        var point = viewport.convertScreenToClip(item.x, item.y);\n        points.push(point.x, point.y);\n        numbers.push(index);\n      });\n      this.vertex = points; // this.pointsBufferLength = points.length*Float32Array.BYTES_PER_ELEMENT;\n\n      this.setBufferData(points, \'position\', 2);\n      this.setBufferData(numbers, \'number\', 1);\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      this.startFlag = true;\n    }\n  }, {\n    key: "pause",\n    value: function pause() {\n      this.startFlag = false;\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      // 2D 只需要两个坐标轴标识位置\n      var normalize = false;\n      var length = this.vertex.length / 2;\n      var _this$uniformData = this.uniformData,\n          uniformData = _this$uniformData === void 0 ? {} : _this$uniformData,\n          config = this.config;\n      if (!this.startFlag) return;\n      uniformData.t.value += this.config.speed;\n\n      if (uniformData.t.value >= length) {\n        uniformData.t.value = -this.config.length;\n      } // 分别绑定数据到shader程序中\n\n\n      for (var key in this.buffers) {\n        var bufferData = this.buffers[key];\n        var bufferPosition = this.getAttribLocation(key); // 分别绑定数据到shader程序中\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData);\n        this.gl.vertexAttribPointer(bufferPosition, this.buffersSize[key], this.gl.FLOAT, normalize, 0, 0);\n        this.gl.enableVertexAttribArray(bufferPosition);\n      } // 加载shader程序\n\n\n      this.gl.useProgram(this.shaderProgram);\n      this.setUniformData(); // 渲染\n\n      if (this.vertex.length) {\n        // specifying the starting index in the array of vector points.\n        // specifying the number of indices to be rendered.\n        var offset = Math.max(uniformData.t.value, 0); // 起步时要算出真实的减掉负数的size，到达时，不能超过整个数组长度\n\n        var size = Math.min(uniformData.t.value + config.length - offset, length - offset);\n        if (size === 0) return;\n        this.gl.drawArrays(this.gl[this.drawType], offset, size);\n      }\n    }\n  }]);\n\n  return Line;\n}(Mesh_Base/* default */.Z);\n\n/* harmony default export */ const FlyLine = (FlyLine_Line);\n;// CONCATENATED MODULE: ./src/Shaders/image.js\n/* harmony default export */ const Shaders_image = ({\n  vertexShader: "\\n\\tprecision highp float;\\n\\tattribute vec2 position;\\n\\tattribute vec2 uv;\\n\\tvarying vec4 vColor;\\n\\tvarying vec2 vUv;\\n    uniform mat3 transform;\\n    uniform mat3 modelView;\\n    uniform float z;\\n\\tvoid main()\\n\\t{\\n        vUv = uv;\\n\\t\\tvec3 mPosition = transform * modelView * vec3(position,1.0);\\n\\t\\tgl_Position = vec4(mPosition.xy,z,1.0);\\n\\t}\\n\\t",\n  fragmentShader: "\\n\\tprecision highp float;\\n    varying vec2 vUv;\\n    uniform vec4 alphaColor;\\n\\tuniform sampler2D u_Sampler;\\n\\tvoid main()\\n\\t{\\n        gl_FragColor = texture2D(u_Sampler,vUv)*alphaColor;\\n\\t}\\n\\t"\n});\n// EXTERNAL MODULE: ./src/Utils/LoadTexture.js\nvar LoadTexture = __webpack_require__(816);\n;// CONCATENATED MODULE: ./src/Mesh/Image.js\n\n\n\n\n\n\n\n\nfunction Image_createSuper(Derived) { var hasNativeReflectConstruct = Image_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction Image_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\nvar Image = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(Image, _Base);\n\n  var _super = Image_createSuper(Image);\n\n  // array.BYTES_PER_ELEMENT * indicesEachLength\n  function Image() {\n    var _this;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    (0,classCallCheck/* default */.Z)(this, Image);\n\n    _this = _super.call(this, config);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", \'TRIANGLES\');\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    _this.shaders = {\n      vertex: Shaders_image.vertexShader,\n      fragment: Shaders_image.fragmentShader\n    };\n    _this.uniformData = {\n      z: {\n        value: config.z || 1,\n        type: \'uniform1f\'\n      },\n      alphaColor: {\n        value: config.alphaColor || [1, 1, 1, 1],\n        type: \'uniform4fv\'\n      }\n    };\n\n    _this.init(config);\n\n    _this.vSize = 2;\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(Image, [{\n    key: "setMap",\n    value: function setMap(imagePath) {\n      var _this2 = this;\n\n      (0,LoadTexture/* default */.Z)(this.gl, imagePath).then(function (texture) {\n        _this2.setTexture(texture);\n      });\n    }\n  }, {\n    key: "setData",\n    value: function setData(data) {\n      if (!this.miniGL) {\n        throw new Error(\'请先将组件通过miniGL.canvas.add()加入实例中\');\n      } // 释放内存空间\n\n\n      this.dispose();\n      this.data = data;\n      var width = data.width,\n          height = data.height,\n          src = data.src,\n          texture = data.texture,\n          _data$x = data.x,\n          x = _data$x === void 0 ? 0 : _data$x,\n          _data$y = data.y,\n          y = _data$y === void 0 ? 0 : _data$y; // 设置纹理\n\n      if (src) {\n        this.setMap(src);\n      }\n\n      if (texture) {\n        this.setTexture(texture);\n      } // 计算uv\n\n\n      var points = [x, y, x, y + height, x + width, y, x + width, y + height];\n      var indices = [0, 1, 2, 2, 1, 3];\n      var uv = [0, 0, 0, 1, 1, 0, 1, 1];\n      this.vertex = points;\n      this.setBufferData(points, \'position\', 2);\n      this.setBufferData(uv, \'uv\', 2);\n      this.setIndices(indices);\n      this.uniformsNeedUpdate = true;\n    } // 设置纹理数据\n\n  }, {\n    key: "setTexture",\n    value: function setTexture(texture) {\n      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'u_Sampler\';\n      this.uniformData[key] = {\n        type: \'uniform1i\',\n        // image\n        value: 0,\n        // 0号纹理传递\n        texture: texture.webglTexture ? texture.webglTexture : texture\n      };\n      this.texture = texture;\n      this.uniformsNeedUpdate = true;\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      // 2D 只需要两个坐标轴标识位置\n      var offset = 0; // 从数据第几位开始偏移\n\n      var normalize = false;\n      var gl = this.gl; // 图片加载完了再说\n\n      if (!this.uniformData || !this.uniformData[\'u_Sampler\']) {\n        return;\n      } // 分别绑定数据到shader程序中\n\n\n      for (var key in this.buffers) {\n        var bufferData = this.buffers[key];\n        var bufferPosition = this.getAttribLocation(key); // 分别绑定数据到shader程序中\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufferData);\n        gl.vertexAttribPointer(bufferPosition, this.buffersSize[key], gl.FLOAT, normalize, 0, offset);\n        gl.enableVertexAttribArray(bufferPosition);\n      } // 使用顶点数据\n\n\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesPointer); // 加载shader程序\n\n      gl.useProgram(this.shaderProgram);\n      this.setUniformData(); // offset必须乘以类型数组的长度，意味着要从内存中数据的对应字节数开始算 根据类型乘对应的BYTES_PER_ELEMENT\n      // 渲染\n\n      if (this.indices.length) {\n        gl.drawElements(gl[this.drawType], this.indices.length, gl.UNSIGNED_SHORT, this.offset);\n      }\n    }\n  }]);\n\n  return Image;\n}(Mesh_Base/* default */.Z);\n\n/* harmony default export */ const Mesh_Image = (Image);\n;// CONCATENATED MODULE: ./src/Shaders/roundLine.js\n/* harmony default export */ const roundLine = ({\n  // 先求连接线然后再求垂线\n  // 求出等比放大的值\n  vertexShader: "\\n\\tprecision lowp float;\\n\\tattribute vec2 now;\\n\\tattribute vec2 pre;\\n\\tattribute vec2 next;\\n\\tattribute float side;\\n\\tattribute float status;\\n\\tuniform float width;\\n\\tuniform float aspect;\\n\\tuniform mat3 transform;\\n\\tuniform float offset;\\n\\tvarying float vSide;\\n\\tvoid main()\\n\\t{\\n\\t\\tvSide = side;\\n\\t\\t\\n\\t\\t// \\u5148\\u8F6C\\u6362\\u5750\\u6807\\u7CFB\\n\\t\\tvec2 mNow = (transform*vec3(now,1.)).xy;\\n\\t\\tvec2 mNext = (transform*vec3(next,1.)).xy;\\n\\t\\tvec2 mPre = (transform*vec3(pre,1.)).xy;\\n\\t\\tvec2 _now = vec2(mNow);\\n\\t\\tvec2 _next = vec2(mNext);\\n\\t\\tvec2 _pre =  vec2(mPre);\\n\\t\\n\\t\\t// \\u5148\\u628A\\u672C\\u5750\\u6807\\u7CFB\\u7684\\u5750\\u6807\\u653E\\u5927\\uFF0C\\u548C\\u771F\\u5B9E\\u7684\\u5916\\u754C\\u5750\\u6807\\u4E00\\u6837,\\u8FD9\\u6837\\u6C42\\u51FA\\u6765\\u7684\\u76F8\\u5BF9\\u5411\\u91CF\\u662F\\u51C6\\u786E\\u7684\\uFF0C\\u5982\\u679C\\u5728\\u540E\\u9762\\u4E4B\\u95F4\\u5BF9normal\\u8FDB\\u884C\\u53D8\\u5316\\uFF0C\\u5C31\\u4F1A\\u5F97\\u51FA\\u9519\\u8BEF\\u7684\\u7ED3\\u679C\\n\\t\\t_now.x *= aspect;\\n\\t\\t_next.x *= aspect;\\n\\t\\t_pre.x *= aspect;\\n\\t\\t\\n\\t\\tvec2 _dir = normalize(status*_now - status*_pre + (1.0-status)*_next - (1.0-status)*_now);\\n\\n\\t\\tvec2 normal = vec2( -_dir.y , _dir.x );\\n\\t\\tvec2 dir = normal * width * .5 * side;\\n\\n\\t\\t// \\u504F\\u79FB\\u91CF\\n\\t\\tif(offset!=0.){\\n\\t\\t\\tvec2 point21 = normalize(_next - _now);\\n\\t\\t\\tvec2 point10 = normalize(_now - _pre);\\n\\t\\t\\tvec2 offsetDir = normalize( point21 + point10);\\n\\t\\t\\tvec2 offsetNormal = vec2( -offsetDir.y, offsetDir.x);\\n\\t\\t\\tfloat ratio = sqrt(1.0 - pow(dot(offsetNormal,point10),2.0));\\n\\t\\t\\tvec2 offsets =  offsetNormal * offset/ratio  ;\\n\\t\\t\\tdir += offsets;\\n\\t\\t}\\n\\n\\t\\t// \\u5F97\\u51FA\\u7684x\\u5750\\u6807\\u4F1A\\u88AB\\u653E\\u5927\\uFF0C\\u8FD9\\u91CC\\u8981\\u9664\\u6389,\\u8BB0\\u5F97\\u8981\\u7528\\u8F6C\\u6362\\u540E\\u5750\\u6807\\u8FDB\\u884C\\u52A0\\u51CF\\n\\t\\tgl_Position = vec4(mNow.x + dir.x/aspect,mNow.y+dir.y , 1., 1.);\\n\\t}\\n\\t",\n  fragmentShader: "\\n\\tprecision lowp float;\\n\\tuniform vec4 color;\\n\\tvarying float vSide;\\n\\tvoid main()\\n\\t{\\n\\t\\tfloat smoothSideRatio = max(0.1,smoothstep(0.,0.3,(1. - abs(vSide))));\\n\\t\\tgl_FragColor = color;\\n\\t\\tgl_FragColor.w *= smoothSideRatio;\\n\\t}\\n\\t"\n});\n;// CONCATENATED MODULE: ./src/Mesh/RoundLine/Line.js\n\n\n\n\n\n\n\n\nfunction Line_createSuper(Derived) { var hasNativeReflectConstruct = Line_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction Line_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\nvar RoundLine = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(RoundLine, _Base);\n\n  var _super = Line_createSuper(RoundLine);\n\n  //"TRIANGLE_STRIP";\n  function RoundLine(config) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, RoundLine);\n\n    _this = _super.call(this);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", "TRIANGLES");\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "shaders", {\n      vertex: roundLine.vertexShader,\n      fragment: roundLine.fragmentShader\n    });\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    config = Object.assign({\n      width: 20,\n      z: 1,\n      offset: 0\n    }, config);\n    _this.uniformData = {\n      z: {\n        value: config.z || 1,\n        type: "uniform1f"\n      }\n    };\n\n    _this.init(config);\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(RoundLine, [{\n    key: "setData",\n    value: function setData(data) {\n      var viewport = this.miniGL.viewport;\n      if (!data.length && data.length < 2) return console.warn("need input data.length >= 2");\n      this.uniformData.transform = {\n        value: viewport.transform,\n        type: "uniformMatrix3fv"\n      };\n      this.uniformData.aspect = {\n        value: viewport.ratio,\n        type: "uniform1f"\n      };\n      this.uniformData.color = {\n        value: this.config.color || [1, 0, 1, 1],\n        type: "uniform4fv"\n      };\n      this.uniformData.width = {\n        value: 2 * this.config.width / this.miniGL.viewport.height,\n        type: "uniform1f"\n      };\n      this.uniformData.offset = {\n        value: 2 * this.config.offset / this.miniGL.viewport.height,\n        type: "uniform1f"\n      };\n      this.data = data;\n      var points = [];\n      data.forEach(function (item) {\n        points.push(item.position.x, item.position.y);\n      }); // 生产双倍点for两个边\n\n      var res = this.calcSidePoints(data);\n      this.setBufferData(res.nowData, "now", 2);\n      this.setBufferData(res.preData, "pre", 2);\n      this.setBufferData(res.nextData, "next", 2);\n      this.setBufferData(res.side, "side", 1);\n      this.setBufferData(res.status, "status", 1); // 生成顶点\n\n      var indices = [];\n\n      for (var j = 0; j < data.length - 1; j++) {\n        var n = j * 4;\n        indices.push(n, n + 1, n + 2, n + 2, n + 1, n + 3);\n      }\n\n      this.setIndices(indices);\n      this.res = res;\n    }\n  }, {\n    key: "calcSidePoints",\n    value: function calcSidePoints() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var length = data.length;\n      var side = [];\n      var nextData = [];\n      var preData = [];\n      var nowData = [];\n      var status = []; // 生产双倍点for两个边\n\n      for (var i = 0; i < length - 1; i++) {\n        var point1 = data[i].position;\n        var point0 = data[i - 1] ? data[i - 1].position : {\n          x: 2 * data[i].position.x - data[i + 1].position.x,\n          y: 2 * data[i].position.y - data[i + 1].position.y\n        };\n        var point2 = data[i + 1] ? data[i + 1].position : {\n          x: 2 * data[i].position.x - data[i - 1].position.x,\n          y: 2 * data[i].position.y - data[i - 1].position.y\n        };\n        side.push(1, -1);\n        preData.push(point0.x, point0.y, point0.x, point0.y);\n        nowData.push(point1.x, point1.y, point1.x, point1.y);\n        nextData.push(point2.x, point2.y, point2.x, point2.y);\n        var j = i + 1;\n        point1 = data[j].position;\n        point0 = data[j - 1] ? data[j - 1].position : {\n          x: 2 * data[j].position.x - data[j + 1].position.x,\n          y: 2 * data[j].position.y - data[j + 1].position.y\n        };\n        point2 = data[j + 1] ? data[j + 1].position : {\n          x: 2 * data[j].position.x - data[j - 1].position.x,\n          y: 2 * data[j].position.y - data[j - 1].position.y\n        };\n        side.push(1, -1);\n        preData.push(point0.x, point0.y, point0.x, point0.y);\n        nowData.push(point1.x, point1.y, point1.x, point1.y);\n        nextData.push(point2.x, point2.y, point2.x, point2.y);\n        status.push(0, 0, 1, 1);\n      }\n\n      return {\n        preData: preData,\n        nowData: nowData,\n        nextData: nextData,\n        side: side,\n        status: status\n      };\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      // 2D 只需要两个坐标轴标识位置\n      var offset = 0; // 从数据第几位开始偏移\n\n      var normalize = false;\n\n      for (var key in this.buffers) {\n        var bufferData = this.buffers[key];\n        var bufferPosition = this.getAttribLocation(key); // 分别绑定数据到shader程序中\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData);\n        this.gl.vertexAttribPointer(bufferPosition, this.buffersSize[key], this.gl.FLOAT, normalize, 0, offset); //todo:webgl2.0 实例数组能减少同样形状但渲染不同的高性能方案\n\n        this.gl.enableVertexAttribArray(bufferPosition);\n      } // 使用顶点数据\n\n\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indicesPointer); // 加载shader程序\n\n      this.gl.useProgram(this.shaderProgram);\n      this.setUniformData(); // 渲染\n\n      if (this.indices.length) {\n        this.gl.drawElements(this.gl[this.drawType], this.indices.length, this.gl.UNSIGNED_SHORT, this.offset);\n      }\n    }\n  }]);\n\n  return RoundLine;\n}(Mesh_Base/* default */.Z);\n\n/* harmony default export */ const RoundLine_Line = (RoundLine);\n;// CONCATENATED MODULE: ./src/Shaders/roundLinePoint.js\n/* harmony default export */ const roundLinePoint = ({\n  // 先求连接线然后再求垂线\n  // 求出等比放大的值\n  vertexShader: "\\n\\tprecision highp float;\\n\\tattribute vec2 now;\\n\\tattribute vec2 pre;\\n\\tattribute vec2 next;\\n\\tuniform float width;\\n\\tuniform float aspect;\\n\\tuniform float z;\\n\\tuniform mat3 transform;\\n\\tuniform float offset;\\n\\tvoid main()\\n\\t{\\n\\t\\t// \\u5148\\u8F6C\\u6362\\u5750\\u6807\\u7CFB\\n\\t\\tvec2 mNow = (transform*vec3(now,1.)).xy;\\n\\t\\tvec2 mNext = (transform*vec3(next,1.)).xy;\\n\\t\\tvec2 mPre = (transform*vec3(pre,1.)).xy;\\n\\t\\tvec2 _now = vec2(mNow);\\n\\t\\tvec2 _next = vec2(mNext);\\n\\t\\tvec2 _pre =  vec2(mPre);\\n\\t\\n\\t\\t// \\u5148\\u628A\\u672C\\u5750\\u6807\\u7CFB\\u7684\\u5750\\u6807\\u653E\\u5927\\uFF0C\\u548C\\u771F\\u5B9E\\u7684\\u5916\\u754C\\u5750\\u6807\\u4E00\\u6837,\\u8FD9\\u6837\\u6C42\\u51FA\\u6765\\u7684\\u76F8\\u5BF9\\u5411\\u91CF\\u662F\\u51C6\\u786E\\u7684\\uFF0C\\u5982\\u679C\\u5728\\u540E\\u9762\\u4E4B\\u95F4\\u5BF9normal\\u8FDB\\u884C\\u53D8\\u5316\\uFF0C\\u5C31\\u4F1A\\u5F97\\u51FA\\u9519\\u8BEF\\u7684\\u7ED3\\u679C\\n\\t\\t_now.x *= aspect;\\n\\t\\t_next.x *= aspect;\\n\\t\\t_pre.x *= aspect;\\n\\t\\t\\n\\t\\t// \\u504F\\u79FB\\n\\t\\tif(offset!=0.){\\n\\t\\t\\tvec2 point21 = normalize(_next - _now);\\n\\t\\t\\tvec2 point10 = normalize(_now - _pre);\\n\\t\\t\\tvec2 offsetDir = normalize( point21 + point10);\\n\\t\\t\\tvec2 offsetNormal = vec2( -offsetDir.y, offsetDir.x);\\n\\t\\t\\tfloat ratio = sqrt(1.0 - pow(dot(offsetNormal,point10),2.0));\\n\\t\\t\\tvec2 offsets =  offsetNormal * offset/ratio ;\\n\\t\\t\\toffsets.x /= aspect;\\n\\t\\t\\tmNow += offsets;\\n\\t\\t}\\n\\n\\t\\t// \\u5F97\\u51FA\\u7684x\\u5750\\u6807\\u4F1A\\u88AB\\u653E\\u5927\\uFF0C\\u8FD9\\u91CC\\u8981\\u9664\\u6389,\\u8BB0\\u5F97\\u8981\\u7528\\u8F6C\\u6362\\u540E\\u5750\\u6807\\u8FDB\\u884C\\u52A0\\u51CF\\n\\t\\tgl_PointSize = width;\\n\\n\\t\\tgl_Position = vec4(mNow.x,mNow.y , z, 1.);\\n\\t}\\n\\t",\n  fragmentShader: "\\n\\tprecision highp float;\\n\\tuniform vec4 color;\\n\\tvoid main()\\n\\t{\\n\\t\\tfloat l = length(gl_PointCoord - vec2(0.5,0.5));\\n\\t\\t\\n\\t\\tfloat smoothSideRatio = smoothstep(0.,0.3,(0.5-l));\\n\\t\\tgl_FragColor = color;\\n\\t\\tgl_FragColor.w *= smoothSideRatio;\\n\\t}\\n\\t"\n});\n;// CONCATENATED MODULE: ./src/Mesh/RoundLine/LinePoint.js\n\n\n\n\n\n\n\n\nfunction LinePoint_createSuper(Derived) { var hasNativeReflectConstruct = LinePoint_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction LinePoint_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\nvar LinePoint = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(LinePoint, _Base);\n\n  var _super = LinePoint_createSuper(LinePoint);\n\n  //"TRIANGLE_STRIP";\n  function LinePoint(config) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, LinePoint);\n\n    _this = _super.call(this);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", "POINTS");\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "shaders", {\n      vertex: roundLinePoint.vertexShader,\n      fragment: roundLinePoint.fragmentShader\n    });\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    config = Object.assign({\n      width: 20,\n      z: 1,\n      offset: 0\n    }, config);\n    _this.uniformData = {\n      z: {\n        value: config.z || 1,\n        type: "uniform1f"\n      }\n    };\n\n    _this.init(config);\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(LinePoint, [{\n    key: "setData",\n    value: function setData(res) {\n      var viewport = this.miniGL.viewport;\n      this.uniformData.transform = {\n        value: viewport.transform,\n        type: "uniformMatrix3fv"\n      };\n      this.uniformData.aspect = {\n        value: viewport.ratio,\n        type: "uniform1f"\n      };\n      this.uniformData.color = {\n        value: this.config.color || [1, 0, 1, 1],\n        type: "uniform4fv"\n      };\n      this.uniformData.width = {\n        value: this.config.width,\n        type: "uniform1f"\n      };\n      this.uniformData.offset = {\n        value: 2 * this.config.offset / this.miniGL.viewport.height,\n        type: "uniform1f"\n      }; // 生产双倍点for两个边\n\n      this.vertex = res.nowData;\n      this.setBufferData(res.nowData, "now", 2);\n      this.setBufferData(res.preData, "pre", 2);\n      this.setBufferData(res.nextData, "next", 2);\n    }\n  }]);\n\n  return LinePoint;\n}(Mesh_Base/* default */.Z);\n\n/* harmony default export */ const RoundLine_LinePoint = (LinePoint);\n;// CONCATENATED MODULE: ./src/Mesh/RoundLine/index.js\n\n\n\n\n\n\nvar RoundLine_RoundLine = /*#__PURE__*/function () {\n  function RoundLine(config) {\n    (0,classCallCheck/* default */.Z)(this, RoundLine);\n\n    (0,defineProperty/* default */.Z)(this, "depthMask", true);\n\n    (0,defineProperty/* default */.Z)(this, "depthTest", true);\n\n    (0,defineProperty/* default */.Z)(this, "transparent", true);\n\n    this.line = new RoundLine_Line(config);\n    this.linePoint = new RoundLine_LinePoint(config);\n  }\n\n  (0,createClass/* default */.Z)(RoundLine, [{\n    key: "onAdd",\n    value: function onAdd() {\n      var _this$line, _this$linePoint;\n\n      (_this$line = this.line).onAdd.apply(_this$line, arguments);\n\n      (_this$linePoint = this.linePoint).onAdd.apply(_this$linePoint, arguments);\n    }\n  }, {\n    key: "setData",\n    value: function setData() {\n      var _this$line2;\n\n      (_this$line2 = this.line).setData.apply(_this$line2, arguments);\n\n      this.linePoint.setData(this.line.res);\n    }\n  }, {\n    key: "dispose",\n    value: function dispose() {\n      var _this$line3, _this$linePoint2;\n\n      (_this$line3 = this.line).dispose.apply(_this$line3, arguments);\n\n      (_this$linePoint2 = this.linePoint).dispose.apply(_this$linePoint2, arguments);\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      var _this$line4, _this$linePoint3;\n\n      (_this$line4 = this.line).destroy.apply(_this$line4, arguments);\n\n      (_this$linePoint3 = this.linePoint).destroy.apply(_this$linePoint3, arguments);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _this$linePoint4, _this$line5;\n\n      (_this$linePoint4 = this.linePoint).render.apply(_this$linePoint4, arguments);\n\n      (_this$line5 = this.line).render.apply(_this$line5, arguments);\n    }\n  }]);\n\n  return RoundLine;\n}();\n\n/* harmony default export */ const Mesh_RoundLine = (RoundLine_RoundLine);\n;// CONCATENATED MODULE: ./src/Group/Group.js\n\n\n\n\n\n\n\n\nfunction Group_createSuper(Derived) { var hasNativeReflectConstruct = Group_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction Group_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n/**\n * 进行批量渲染\n * @class\n */\n\nvar Group = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(Group, _Base);\n\n  var _super = Group_createSuper(Group);\n\n  function Group(config) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, Group);\n\n    _this = _super.call(this);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "depthMask", true);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "depthTest", true);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "transparent", true);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "children", []);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "childId", -1);\n\n    _this.children = [];\n\n    _this.init(config);\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(Group, [{\n    key: "dispose",\n    value: function dispose() {\n      Mesh_Base/* default.dispose.call */.Z.dispose.call(this);\n      this.children.forEach(function (item, index) {\n        item.destroy && item.destroy();\n      });\n    }\n  }, {\n    key: "onAdd",\n    value: function onAdd(miniGL) {\n      this.miniGL = miniGL; // 获取顶点数据内存里的指针\n\n      this.gl = miniGL.gl;\n      this.indicesPointer = this.gl.createBuffer();\n      this.children.forEach(function (each) {\n        if (!each.miniGL) {\n          each.onAdd(miniGL);\n        }\n      });\n    }\n  }, {\n    key: "addChild",\n    value: function addChild(child) {\n      this.childId++;\n      child.childId = this.childId;\n      child.parent = this;\n      this.children.push(child);\n      child.zOrder = this.children.length - 1;\n\n      if (this.miniGL) {\n        child.onAdd(this.miniGL);\n      }\n    }\n  }, {\n    key: "addChildAt",\n    value: function addChildAt(child, index) {\n      child.childId = this.childId++;\n      child.parent = this;\n\n      if (this.miniGL) {\n        child.onAdd(this.miniGL);\n      }\n\n      this.children.splice(index, 0, child);\n      child.zOrder = index + 1;\n    }\n  }, {\n    key: "removeChild",\n    value: function removeChild(child) {\n      var pos = this.children.indexOf(child);\n\n      if (!pos <= -1) {\n        return;\n      }\n\n      this.children[pos].parent = undefined;\n      this.children.splice(pos, 1);\n    }\n  }, {\n    key: "swapChildren",\n    value: function swapChildren(a, b) {\n      var _this2 = this;\n\n      this.children.forEach(function (item, index) {\n        if (item === a) {\n          _this2.children[index] = b;\n          _this2.children[index].zOrder = index;\n        }\n\n        if (item === b) {\n          _this2.children[index] = a;\n          _this2.children[index].zOrder = index;\n        }\n      });\n    }\n  }]);\n\n  return Group;\n}(Mesh_Base/* default */.Z);\n\n/* harmony default export */ const Group_Group = (Group);\n;// CONCATENATED MODULE: ./src/dragonBones/Enum.js\nvar BlendMode = {\n  Normal: 0,\n  Add: 1,\n  Alpha: 2,\n  Darken: 3,\n  Difference: 4,\n  Erase: 5,\n  HardLight: 6,\n  Invert: 7,\n  Layer: 8,\n  Lighten: 9,\n  Multiply: 10,\n  Overlay: 11,\n  Screen: 12,\n  Subtract: 13\n};\nvar BoneType = {\n  Bone: 0,\n  Surface: 1\n};\nvar BinaryOffset = {\n  WeigthBoneCount: 0,\n  WeigthFloatOffset: 1,\n  WeigthBoneIndices: 2,\n  GeometryVertexCount: 0,\n  GeometryTriangleCount: 1,\n  GeometryFloatOffset: 2,\n  GeometryWeightOffset: 3,\n  GeometryVertexIndices: 4,\n  TimelineScale: 0,\n  TimelineOffset: 1,\n  TimelineKeyFrameCount: 2,\n  TimelineFrameValueCount: 3,\n  TimelineFrameValueOffset: 4,\n  TimelineFrameOffset: 5,\n  FramePosition: 0,\n  FrameTweenType: 1,\n  FrameTweenEasingOrCurveSampleCount: 2,\n  FrameCurveSamples: 3,\n  DeformVertexOffset: 0,\n  DeformCount: 1,\n  DeformValueCount: 2,\n  DeformValueOffset: 3,\n  DeformFloatOffset: 4\n};\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/superPropBase.js\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = (0,getPrototypeOf/* default */.Z)(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/get.js\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== "undefined" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n// EXTERNAL MODULE: ./src/Texture/Texture.js\nvar Texture = __webpack_require__(776);\n;// CONCATENATED MODULE: ./src/dragonBones/MiniGLTextureAtlasData.js\n\n\n\n\n\n\n\n\n\nfunction MiniGLTextureAtlasData_createSuper(Derived) { var hasNativeReflectConstruct = MiniGLTextureAtlasData_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction MiniGLTextureAtlasData_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar _ref = window.dragonBones || {},\n    _ref$TextureData = _ref.TextureData,\n    TextureData = _ref$TextureData === void 0 ? null : _ref$TextureData,\n    _ref$BaseObject = _ref.BaseObject,\n    BaseObject = _ref$BaseObject === void 0 ? null : _ref$BaseObject,\n    _ref$TextureAtlasData = _ref.TextureAtlasData,\n    TextureAtlasData = _ref$TextureAtlasData === void 0 ? null : _ref$TextureAtlasData;\n\n\n\nvar MiniGLTextureAtlasData = /*#__PURE__*/function (_TextureAtlasData) {\n  (0,inherits/* default */.Z)(MiniGLTextureAtlasData, _TextureAtlasData);\n\n  var _super = MiniGLTextureAtlasData_createSuper(MiniGLTextureAtlasData);\n\n  function MiniGLTextureAtlasData() {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, MiniGLTextureAtlasData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "scale", 1);\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(MiniGLTextureAtlasData, [{\n    key: "_onClear",\n    value: function _onClear() {\n      _get((0,getPrototypeOf/* default */.Z)(MiniGLTextureAtlasData.prototype), "_onClear", this).call(this);\n\n      if (this.disposeEnabled && this._renderTexture !== null) {\n        this._renderTexture.dispose();\n      }\n\n      this.disposeEnabled = false;\n      this._renderTexture = null;\n    }\n  }, {\n    key: "createTexture",\n    value: function createTexture() {\n      var texture = BaseObject.borrowObject(MiniTextureData);\n      return texture;\n    }\n  }, {\n    key: "setRenderTexture",\n    value: function setRenderTexture(texture, miniGL) {\n      this._renderTexture = texture;\n\n      if (this._renderTexture !== null) {\n        for (var k in this.textures) {\n          var textureData = this.textures[k];\n\n          if (textureData.region.rotated) {}\n\n          var renderTexture = new Texture/* default */.Z(miniGL);\n          renderTexture.create({\n            image: texture,\n            rect: textureData.region,\n            reverseY: false,\n            name: textureData.name\n          });\n          textureData.renderTexture = renderTexture;\n        }\n      } else {\n        for (var _k in this.textures) {\n          var _textureData = this.textures[_k];\n          _textureData.renderTexture = null;\n        }\n      }\n\n      return texture;\n    }\n  }]);\n\n  return MiniGLTextureAtlasData;\n}(TextureAtlasData);\n/**\n * @internal\n */\n\n\nvar MiniTextureData = /*#__PURE__*/function (_TextureData) {\n  (0,inherits/* default */.Z)(MiniTextureData, _TextureData);\n\n  var _super2 = MiniGLTextureAtlasData_createSuper(MiniTextureData);\n\n  function MiniTextureData() {\n    var _this2;\n\n    (0,classCallCheck/* default */.Z)(this, MiniTextureData);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this2 = _super2.call.apply(_super2, [this].concat(args));\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this2), "renderTexture", null);\n\n    return _this2;\n  }\n\n  (0,createClass/* default */.Z)(MiniTextureData, [{\n    key: "_onClear",\n    value: // Initial value.\n    function _onClear() {\n      TextureData.prototype._onClear.call(this);\n\n      if (this.renderTexture !== null) {\n        this.renderTexture.destroy(false);\n      }\n\n      this.renderTexture = null;\n    }\n  }]);\n\n  return MiniTextureData;\n}(TextureData);\n\nMiniTextureData.toString = function () {\n  return \'[class dragonBones.MiniTextureData]\';\n};\n\nMiniGLTextureAtlasData.toString = function () {\n  return \'[class dragonBones.MiniAtlasData]\';\n};\n\n/* harmony default export */ const dragonBones_MiniGLTextureAtlasData = (MiniGLTextureAtlasData);\n;// CONCATENATED MODULE: ./src/dragonBones/MiniGLSlot.js\n\n\n\n\n\n\nfunction MiniGLSlot_createSuper(Derived) { var hasNativeReflectConstruct = MiniGLSlot_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction MiniGLSlot_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar MiniGLSlot_ref = window.dragonBones || {},\n    _ref$Slot = MiniGLSlot_ref.Slot,\n    Slot = _ref$Slot === void 0 ? function () {} : _ref$Slot;\n\n\n\n\n/**\n * 骨骼插槽\n * @class\n */\n\nvar MiniGLSlot = /*#__PURE__*/function (_Slot) {\n  (0,inherits/* default */.Z)(MiniGLSlot, _Slot);\n\n  var _super = MiniGLSlot_createSuper(MiniGLSlot);\n\n  function MiniGLSlot() {\n    (0,classCallCheck/* default */.Z)(this, MiniGLSlot);\n\n    return _super.apply(this, arguments);\n  }\n\n  (0,createClass/* default */.Z)(MiniGLSlot, [{\n    key: "_onClear",\n    value: function _onClear() {\n      Slot.prototype._onClear.call(this);\n\n      this._armatureDisplay = null; //\n\n      this._renderDisplay = null; //\n\n      this._colorFilter = null;\n    }\n  }, {\n    key: "_initDisplay",\n    value: function _initDisplay(value, isRetain) {}\n  }, {\n    key: "_disposeDisplay",\n    value: function _disposeDisplay(value, isRelease) {\n      // value.destroy();\n      value.parent.remove(value);\n      value.destroy();\n    } // 更新前函数\n\n  }, {\n    key: "_onUpdateDisplay",\n    value: function _onUpdateDisplay() {\n      this._armatureDisplay = this._armature.display;\n      this._renderDisplay = this._display ? this._display : this._rawDisplay;\n    } // 添加到骨架容器中\n\n  }, {\n    key: "_addDisplay",\n    value: function _addDisplay() {\n      if (this._renderDisplay.parent) {\n        this._renderDisplay.parent.removeChild(this._renderDisplay);\n      }\n\n      this._armature.display.addChild(this._renderDisplay);\n    }\n  }, {\n    key: "_replaceDisplay",\n    value: function _replaceDisplay(value) {\n      this._renderDisplay.parent && this._renderDisplay.parent.removeChild(this._renderDisplay);\n\n      this._armatureDisplay.addChild(this._renderDisplay);\n\n      this._armatureDisplay.swapChildren(this._renderDisplay, value);\n\n      this._armatureDisplay.removeChild(value);\n\n      value.destroy();\n    }\n  }, {\n    key: "_removeDisplay",\n    value: function _removeDisplay() {\n      this._armatureDisplay.removeChild(this._renderDisplay);\n    }\n  }, {\n    key: "_updateZOrder",\n    value: function _updateZOrder() {\n      var index = this._renderDisplay.zOrder;\n\n      if (index === this._zOrder) {\n        return;\n      }\n\n      this._armatureDisplay.removeChild(this._renderDisplay);\n\n      this._armatureDisplay.addChildAt(this._renderDisplay, this._zOrder);\n    }\n  }, {\n    key: "_updateVisible",\n    value: function _updateVisible() {\n      var visible = this._parent.visible && this._visible;\n      this._renderDisplay.visible = visible;\n    }\n  }, {\n    key: "_updateBlendMode",\n    value: function _updateBlendMode() {\n      var gl = this._armatureDisplay.miniGL.gl;\n\n      switch (this._blendMode) {\n        case BlendMode.Normal:\n          this._renderDisplay.blendMode = gl.ONE_MINUS_SRC_ALPHA;\n          break;\n\n        case BlendMode.Add:\n          this._renderDisplay.blendMode = gl.ONE_MINUS_DST_ALPHA;\n          break;\n\n        case BlendMode.Erase:\n          this._renderDisplay.blendMode = gl.DST_ALPHA;\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: "_updateColor",\n    value: function _updateColor() {\n      var alpha = this._colorTransform.alphaMultiplier * this._globalAlpha;\n\n      try {\n        this._renderDisplay.uniformData.alpha.value = alpha;\n      } catch (e) {}\n    }\n  }, {\n    key: "_updateFrame",\n    value: function _updateFrame() {\n      var currentTextureData = this._textureData;\n      this._renderDisplay.textureData = this._textureData;\n\n      if (this._displayFrame !== null && this._display !== null && currentTextureData !== null) {\n        var currentTextureAtlasData = currentTextureData.parent;\n\n        if (this._armature.replacedTexture !== null) {\n          // Update replaced texture atlas.\n          if (this._armature._replaceTextureAtlasData === null) {\n            currentTextureAtlasData = new dragonBones_MiniGLTextureAtlasData();\n            currentTextureAtlasData.copyFrom(currentTextureData.parent);\n            currentTextureAtlasData.texture = this._armature.replacedTexture;\n            this._armature._replaceTextureAtlasData = currentTextureAtlasData;\n          } else {\n            currentTextureAtlasData = this._armature._replaceTextureAtlasData;\n          }\n\n          currentTextureData = currentTextureAtlasData.getTexture(currentTextureData.name);\n        }\n\n        if (currentTextureData.renderTexture !== null) {\n          if (this._geometryData !== null) {\n            // Mesh.\n            var data = this._geometryData.data;\n            var intArray = data.intArray;\n            var floatArray = data.floatArray;\n            var vertexCount = intArray[this._geometryData.offset + BinaryOffset.GeometryVertexCount];\n            var triangleCount = intArray[this._geometryData.offset + BinaryOffset.GeometryTriangleCount];\n            var vertexOffset = intArray[this._geometryData.offset + BinaryOffset.GeometryFloatOffset];\n\n            if (vertexOffset < 0) {\n              vertexOffset += 65536; // Fixed out of bounds bug.\n            }\n\n            var uvOffset = vertexOffset + vertexCount * 2;\n            var scale = this._armature._armatureData.scale;\n            var meshDisplay = this._renderDisplay; // 这一步生成所需要的点和uv和索引\n\n            var uvs = [];\n            var vertices = [];\n            var indices = [];\n\n            for (var i = 0, l = vertexCount * 2; i < l; ++i) {\n              vertices[i] = floatArray[vertexOffset + i] * scale;\n              uvs[i] = floatArray[uvOffset + i];\n            }\n\n            for (var _i = 0; _i < triangleCount * 3; ++_i) {\n              indices[_i] = intArray[this._geometryData.offset + BinaryOffset.GeometryVertexIndices + _i];\n            }\n\n            meshDisplay.dispose();\n            meshDisplay.setTexture(currentTextureData.renderTexture);\n            meshDisplay.setBufferData(vertices, \'position\', 2);\n            meshDisplay.setBufferData(uvs, \'uv\', 2);\n            meshDisplay.setIndices(indices);\n            meshDisplay.vertex = vertices;\n            var isSkinned = this._geometryData.weight !== null;\n            var isSurface = this._parent._boneData.type !== BoneType.Bone;\n\n            if (isSkinned || isSurface) {\n              this._identityTransform();\n            }\n          } else {\n            // Normal texture.\n            var _scale = currentTextureData.parent.scale * this._armature._armatureData.scale;\n\n            var textureWidth = currentTextureData.region.width * _scale;\n            var textureHeight = currentTextureData.region.height * _scale;\n            var normalDisplay = this._renderDisplay;\n            var texture = currentTextureData.renderTexture;\n            normalDisplay.setData({\n              texture: texture,\n              width: textureWidth,\n              height: textureHeight\n            });\n          }\n\n          this._visibleDirty = true;\n          return;\n        }\n      }\n\n      this._renderDisplay.visible = false;\n    }\n  }, {\n    key: "_updateMesh",\n    value: function _updateMesh() {\n      var scale = this._armature._armatureData.scale;\n      var deformVertices = this._displayFrame.deformVertices;\n      var bones = this._geometryBones;\n      var geometryData = this._geometryData;\n      var weightData = geometryData.weight;\n      var hasDeform = deformVertices.length > 0 && geometryData.inheritDeform;\n      var meshDisplay = this._renderDisplay;\n\n      if (weightData !== null) {\n        var data = geometryData.data;\n        var intArray = data.intArray;\n        var floatArray = data.floatArray;\n        var vertexCount = intArray[geometryData.offset + BinaryOffset.GeometryVertexCount];\n        var weightFloatOffset = intArray[weightData.offset + BinaryOffset.WeigthFloatOffset];\n\n        if (weightFloatOffset < 0) {\n          weightFloatOffset += 65536; // Fixed out of bounds bug.\n        }\n\n        for (var i = 0, iD = 0, iB = weightData.offset + BinaryOffset.WeigthBoneIndices + bones.length, iV = weightFloatOffset, iF = 0; i < vertexCount; ++i) {\n          var boneCount = intArray[iB++];\n          var xG = 0.0;\n          var yG = 0.0;\n\n          for (var j = 0; j < boneCount; ++j) {\n            var boneIndex = intArray[iB++];\n            var bone = bones[boneIndex];\n\n            if (bone !== null) {\n              var matrix = bone.globalTransformMatrix;\n              var weight = floatArray[iV++];\n              var xL = floatArray[iV++] * scale;\n              var yL = floatArray[iV++] * scale;\n\n              if (hasDeform) {\n                xL += deformVertices[iF++];\n                yL += deformVertices[iF++];\n              }\n\n              xG += (matrix.a * xL + matrix.c * yL + matrix.tx) * weight;\n              yG += (matrix.b * xL + matrix.d * yL + matrix.ty) * weight;\n            }\n          }\n\n          meshDisplay.vertex[iD++] = xG;\n          meshDisplay.vertex[iD++] = yG;\n        }\n\n        meshDisplay.setBufferData(meshDisplay.vertex, \'position\', 2);\n      } else {\n        var isSurface = this._parent._boneData.type !== BoneType.Bone;\n        var _data = geometryData.data;\n        var _intArray = _data.intArray;\n        var _floatArray = _data.floatArray;\n        var _vertexCount = _intArray[geometryData.offset + BinaryOffset.GeometryVertexCount];\n        var vertexOffset = _intArray[geometryData.offset + BinaryOffset.GeometryFloatOffset];\n\n        if (vertexOffset < 0) {\n          vertexOffset += 65536; // Fixed out of bounds bug.\n        }\n\n        for (var _i2 = 0, l = _vertexCount * 2; _i2 < l; _i2 += 2) {\n          var x = _floatArray[vertexOffset + _i2] * scale;\n          var y = _floatArray[vertexOffset + _i2 + 1] * scale;\n\n          if (hasDeform) {\n            x += deformVertices[_i2];\n            y += deformVertices[_i2 + 1];\n          }\n\n          if (isSurface) {\n            var _matrix = this._parent._getGlobalTransformMatrix(x, y);\n\n            meshDisplay.vertex[_i2] = _matrix.a * x + _matrix.c * y + _matrix.tx;\n            meshDisplay.vertex[_i2 + 1] = _matrix.b * x + _matrix.d * y + _matrix.ty;\n          } else {\n            meshDisplay.vertex[_i2] = x;\n            meshDisplay.vertex[_i2 + 1] = y;\n          }\n        }\n\n        meshDisplay.setBufferData(meshDisplay.vertex, \'position\', 2);\n      }\n    }\n  }, {\n    key: "_identityTransform",\n    value: function _identityTransform() {\n      this._renderDisplay.setMatrix(mat3/* create */.Ue());\n    }\n  }, {\n    key: "_updateTransform",\n    value: function _updateTransform() {\n      var matrix = this.globalTransformMatrix;\n      var newMatrix = mat3/* fromValues */.al(matrix.a, matrix.b, 0, matrix.c, matrix.d, 0, matrix.tx, matrix.ty, 1);\n      mat3/* translate */.Iu(newMatrix, newMatrix, [-this._pivotX, -this._pivotY]);\n\n      this._renderDisplay.setMatrix(newMatrix);\n    }\n  }]);\n\n  return MiniGLSlot;\n}(Slot);\n\nMiniGLSlot.toString = function () {\n  return \'[class dragonBones.MiniSlot]\';\n};\n\n/* harmony default export */ const dragonBones_MiniGLSlot = (MiniGLSlot);\n;// CONCATENATED MODULE: ./src/dragonBones/MiniGLArmatureDisplay.js\n\n\n\n\n\n\n\n\nfunction MiniGLArmatureDisplay_createSuper(Derived) { var hasNativeReflectConstruct = MiniGLArmatureDisplay_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction MiniGLArmatureDisplay_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n/**\n * 骨架显示\n * @class\n */\n\nvar MiniGLArmatureDisplay = /*#__PURE__*/function (_Group) {\n  (0,inherits/* default */.Z)(MiniGLArmatureDisplay, _Group);\n\n  var _super = MiniGLArmatureDisplay_createSuper(MiniGLArmatureDisplay);\n\n  function MiniGLArmatureDisplay() {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, MiniGLArmatureDisplay);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "_armature", null);\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(MiniGLArmatureDisplay, [{\n    key: "dispatchDBEvent",\n    value: function dispatchDBEvent(type, eventObject) {\n      this.listener.fire(type, eventObject);\n    }\n  }, {\n    key: "hasDBEventListener",\n    value: function hasDBEventListener(type) {\n      return this.listener._listeners[type]; // .d.ts bug\n    }\n  }, {\n    key: "addDBEventListener",\n    value: function addDBEventListener(type, func) {\n      this.listener.on(type, func);\n    }\n  }, {\n    key: "removeDBEventListener",\n    value: function removeDBEventListener(type, func) {\n      this.listener.off(type, func);\n    }\n  }, {\n    key: "dbInit",\n    value: function dbInit(armature) {\n      this._armature = armature;\n      this.listener = new src_Base();\n      var mesh = new Line/* default */.Z({\n        color: [0, 0.1, 0.2, 1]\n      });\n      mesh.drawType = \'LINES\';\n      this.drawer = mesh;\n      this.addChild(mesh);\n    }\n  }, {\n    key: "dbClear",\n    value: function dbClear() {\n      this.destroy();\n    }\n  }, {\n    key: "dbUpdate",\n    value: function dbUpdate() {\n      if (!this.mesh) return;\n\n      var bones = this._armature.getBones();\n\n      var data = [];\n\n      for (var i = 0, l = bones.length; i < l; ++i) {\n        var bone = bones[i];\n        var boneLength = bone.boneData.length;\n        var startX = bone.globalTransformMatrix.tx;\n        var startY = bone.globalTransformMatrix.ty;\n        var endX = startX + bone.globalTransformMatrix.a * boneLength;\n        var endY = startY + bone.globalTransformMatrix.b * boneLength;\n        data.push({\n          position: {\n            x: startX,\n            y: startY\n          }\n        }, {\n          position: {\n            x: endX,\n            y: endY\n          }\n        });\n      }\n\n      this.drawer.setData(data);\n    }\n  }, {\n    key: "dispose",\n    value: function dispose() {\n      if (this._armature !== null) {\n        this._armature.dispose();\n\n        this._armature = null;\n      }\n\n      this.drawer.destroy();\n      Group_Group.dispose.call(this);\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      this.dispose();\n    }\n  }, {\n    key: "getArmature",\n    value: function getArmature() {\n      return this._armature;\n    }\n  }, {\n    key: "getAnimation",\n    value: function getAnimation() {\n      return this._armature.animation;\n    }\n  }]);\n\n  return MiniGLArmatureDisplay;\n}(Group_Group);\n\n/* harmony default export */ const dragonBones_MiniGLArmatureDisplay = (MiniGLArmatureDisplay);\n;// CONCATENATED MODULE: ./src/dragonBones/index.js\n\n\n\n\n\n\nfunction dragonBones_createSuper(Derived) { var hasNativeReflectConstruct = dragonBones_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction dragonBones_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar dragonBones_ref = window.dragonBones || {},\n    DragonBones = dragonBones_ref.DragonBones,\n    _ref$BaseFactory = dragonBones_ref.BaseFactory,\n    BaseFactory = _ref$BaseFactory === void 0 ? null : _ref$BaseFactory,\n    BuildArmaturePackage = dragonBones_ref.BuildArmaturePackage,\n    dragonBones_BaseObject = dragonBones_ref.BaseObject,\n    Armature = dragonBones_ref.Armature;\n\n\n\n\n\n\nvar DragonBoneObject = /*#__PURE__*/function (_BaseFactory) {\n  (0,inherits/* default */.Z)(DragonBoneObject, _BaseFactory);\n\n  var _super = dragonBones_createSuper(DragonBoneObject);\n\n  function DragonBoneObject(miniGL) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, DragonBoneObject);\n\n    _this = _super.call(this);\n\n    if (!BaseFactory) {\n      throw new Error(\'请先加载DragonBones基础JS库！\');\n    }\n\n    _this.miniGL = miniGL;\n\n    _this.getDragonBonesInstance();\n\n    _this.display = new dragonBones_MiniGLArmatureDisplay();\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(DragonBoneObject, [{\n    key: "addFrameEvent",\n    value: function addFrameEvent() {\n      this.miniGL.on(\'beforerender\', DragonBoneObject.update);\n    }\n  }, {\n    key: "getDragonBonesInstance",\n    value: function getDragonBonesInstance() {\n      var _this2 = this;\n\n      if (!DragonBoneObject._dragonBonesInstance) {\n        DragonBoneObject._dragonBonesInstance = new DragonBones({\n          hasDBEventListener: function hasDBEventListener(event) {\n            return _this2.miniGL._listeners[event];\n          },\n          // 转发事件\n          dispatchDBEvent: function dispatchDBEvent(event, data) {\n            _this2.miniGL.fire(event, data);\n          }\n        });\n        this.addFrameEvent();\n      }\n\n      this._dragonBonesInstance = DragonBoneObject._dragonBonesInstance;\n    } // 构建对象\n\n  }, {\n    key: "buildArmatureDisplay",\n    value: function buildArmatureDisplay(armatureName) {\n      var dragonBonesName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'\';\n      var skinName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \'\';\n      var textureAtlasName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \'\';\n      var armature = this.buildArmature(armatureName, dragonBonesName, skinName, textureAtlasName);\n\n      this._dragonBonesInstance.clock.add(armature);\n\n      return armature.display;\n    }\n    /**\n     * @override 复现方法\n     * @param {*} dataPackage\n     */\n\n  }, {\n    key: "_buildArmature",\n    value: function _buildArmature(dataPackage) {\n      var armature = dragonBones_BaseObject.borrowObject(Armature);\n      var armatureDisplay = new dragonBones_MiniGLArmatureDisplay({\n        miniGL: this.miniGL\n      });\n      armature.init(dataPackage.armature, armatureDisplay, armatureDisplay, this._dragonBones);\n      return armature;\n    }\n  }, {\n    key: "_buildSlot",\n    value: function _buildSlot(_dataPackage, slotData, armature) {\n      var slot = dragonBones_BaseObject.borrowObject(dragonBones_MiniGLSlot);\n      var sprite = new src.Image();\n      slot.init(slotData, armature, sprite, sprite);\n      return slot;\n    }\n  }, {\n    key: "_buildTextureAtlasData",\n    value: function _buildTextureAtlasData(textureAtlasData, textureAtlas) {\n      if (textureAtlasData) {\n        textureAtlasData.setRenderTexture(textureAtlas, this.miniGL);\n      } else {\n        textureAtlasData = dragonBones_BaseObject.borrowObject(dragonBones_MiniGLTextureAtlasData);\n      }\n\n      return textureAtlasData;\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {}\n  }]);\n\n  return DragonBoneObject;\n}(BaseFactory);\n\nDragonBoneObject.update = function (delta) {\n  DragonBoneObject._dragonBonesInstance.advanceTime(delta * 0.001);\n};\n\nDragonBoneObject.MiniGLArmatureDisplay = dragonBones_MiniGLArmatureDisplay;\n/* harmony default export */ const dragonBones = (DragonBoneObject);\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction src_createSuper(Derived) { var hasNativeReflectConstruct = src_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction src_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar MiniGL = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(MiniGL, _Base);\n\n  var _super = src_createSuper(MiniGL);\n\n  /**\n   * \n   * @param {object} config \n   * @param {HTMLDivElement} config.container\n   */\n  function MiniGL(config) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, MiniGL);\n\n    _this = _super.call(this, config);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "autoUpdate", false);\n\n    _this.container = config.container;\n    _this.config = Object.assign({\n      contextOption: {\n        alpha: true,\n        antialias: true,\n        antialiasSamples: 16,\n        stencil: true,\n        powerPreference: \'high-performance\',\n        preserveDrawingBuffer: true\n      }\n    }, config);\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(MiniGL, [{\n    key: "init",\n    value: function init() {\n      var _this$config$contextO = this.config.contextOption,\n          contextOption = _this$config$contextO === void 0 ? {} : _this$config$contextO;\n      this.canvasDOM = document.createElement(\'canvas\');\n      this.container.appendChild(this.canvasDOM);\n      this.gl = this.canvasDOM.getContext(\'webgl2\', contextOption);\n\n      if (this.gl == null) {\n        return console.error(\'你的浏览器不支持webgl2,请更新使用chrome浏览器\');\n      }\n\n      this.viewport = new Viewport(_objectSpread({\n        miniGL: this\n      }, this.config));\n      this.viewport.resize();\n      this.canvas = new View_Canvas(_objectSpread({\n        miniGL: this\n      }, this.config));\n      this.controller = new Control_Controller(_objectSpread({\n        miniGL: this\n      }, this.config));\n      this.canvas.update();\n    }\n  }]);\n\n  return MiniGL;\n}(src_Base);\n\nMiniGL.FlyLine = FlyLine;\nMiniGL.Image = Mesh_Image;\nMiniGL.Mesh = Mesh_Mesh;\nMiniGL.Point = Mesh_Point;\nMiniGL.Line = (__webpack_require__(70)/* ["default"] */ .Z);\n;\nMiniGL.MeshBase = Mesh_Base/* default */.Z;\nMiniGL.WidthLine = Mesh_WidthLine;\nMiniGL.RoundLine = Mesh_RoundLine; // 暂时做形状没有意义，本来是要专心做2d特效库的,另外去做形状，做重了和canvas性能没差了，还是专心利用gpu多进程运算\n// MiniGL.Shape = require(\'./Shapes\').default;\n\nMiniGL.InstanceMesh = (__webpack_require__(947)/* ["default"] */ .Z);\nMiniGL.Group = Group_Group;\nMiniGL.Util = (__webpack_require__(88)/* ["default"] */ .Z);\nMiniGL.Texture = (__webpack_require__(776)/* ["default"] */ .Z);\nMiniGL.DragonBones = dragonBones;\n/* harmony default export */ const src = (MiniGL);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///772\n')},628:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "JG": () => (/* binding */ copy),\n  "Ue": () => (/* binding */ create),\n  "al": () => (/* binding */ fromValues),\n  "dC": () => (/* binding */ mul),\n  "U1": () => (/* binding */ rotate),\n  "bA": () => (/* binding */ scale),\n  "Iu": () => (/* binding */ translate)\n});\n\n// UNUSED EXPORTS: add, adjoint, clone, determinant, equals, exactEquals, frob, fromMat2d, fromMat4, fromQuat, fromRotation, fromScaling, fromTranslation, identity, invert, multiply, multiplyScalar, multiplyScalarAndAdd, normalFromMat4, projection, set, str, sub, subtract, transpose\n\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/common.js\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = typeof Float32Array !== \'undefined\' ? Float32Array : Array;\nvar RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nfunction setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nfunction toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat3.js\n\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nfunction create() {\n  var out = new ARRAY_TYPE(9);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nfunction fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nfunction fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nfunction set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nfunction invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nfunction adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nfunction determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3\'s\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nfunction multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nfunction translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nfunction rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nfunction scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nfunction fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nfunction normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nfunction projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nfunction str(a) {\n  return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nfunction frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3\'s\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix\'s elements by\r\n * @returns {mat3} out\r\n */\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3\'s after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b\'s elements by before adding\r\n * @returns {mat3} out\r\n */\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction mat3_equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nvar sub = (/* unused pure expression or super */ null && (subtract));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///628\n')},326:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ _assertThisInitialized)\n/* harmony export */ });\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return self;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI2LmpzIiwibWFwcGluZ3MiOiI7OztBQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaW5pR0wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzP2UxZjUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///326\n')},671:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ _classCallCheck)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjcxLmpzIiwibWFwcGluZ3MiOiI7OztBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaW5pR0wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanM/OTcwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///671\n')},144:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ _createClass)\n/* harmony export */ });\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ0LmpzIiwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZTtBQUNmO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vTWluaUdMLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzP2M2MDciXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///144\n')},942:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ _defineProperty)\n/* harmony export */ });\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQyLmpzIiwibWFwcGluZ3MiOiI7OztBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaW5pR0wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanM/OTdlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///942\n')},120:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ _getPrototypeOf)\n/* harmony export */ });\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIwLmpzIiwibWFwcGluZ3MiOiI7OztBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL01pbmlHTC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZi5qcz80YTQzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///120\n')},340:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": () => (/* binding */ _inherits)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQzs7QUNQaUQ7QUFDbEM7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILGtCQUFrQixlQUFjO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vTWluaUdMLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzPzc2Y2IiLCJ3ZWJwYWNrOi8vTWluaUdMLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzLmpzPzZkNmIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///340\n')},963:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ _possibleConstructorReturn)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n/* harmony import */ var _assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(326);\n\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(call) === "object" || typeof call === "function")) {\n    return call;\n  }\n\n  return (0,_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(self);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9EO0FBQ1c7QUFDaEQ7QUFDZixlQUFlLGtGQUFPO0FBQ3RCO0FBQ0E7O0FBRUEsU0FBUyw4RUFBcUI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaW5pR0wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcz9iNGM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiO1xuaW1wb3J0IGFzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///963\n')},785:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": () => (/* binding */ _toConsumableArray)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js\nfunction _nonIterableSpread() {\n  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\n\n\n\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzg1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZTtBQUNmOztBQUVBLHlDQUF5QyxTQUFTO0FBQ2xEO0FBQ0E7O0FBRUE7QUFDQSxDOztBQ1JxRDtBQUN0QztBQUNmLGlDQUFpQyxpQkFBZ0I7QUFDakQsQzs7QUNIZTtBQUNmO0FBQ0EsQzs7QUNGcUQ7QUFDdEM7QUFDZjtBQUNBLG9DQUFvQyxpQkFBZ0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0Esc0ZBQXNGLGlCQUFnQjtBQUN0RyxDOztBQ1JlO0FBQ2Y7QUFDQSxDOztBQ0Z1RDtBQUNKO0FBQ3NCO0FBQ2xCO0FBQ3hDO0FBQ2YsU0FBUyxrQkFBaUIsU0FBUyxnQkFBZSxTQUFTLDJCQUEwQixTQUFTLGtCQUFpQjtBQUMvRyIsInNvdXJjZXMiOlsid2VicGFjazovL01pbmlHTC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzPzc5NzgiLCJ3ZWJwYWNrOi8vTWluaUdMLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzLmpzPzZlYzUiLCJ3ZWJwYWNrOi8vTWluaUdMLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcz9jYjM0Iiwid2VicGFjazovL01pbmlHTC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcz83YTg2Iiwid2VicGFjazovL01pbmlHTC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVNwcmVhZC5qcz9iYmQ5Iiwid2VicGFjazovL01pbmlHTC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcz82ODQ0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJpbXBvcnQgYXJyYXlXaXRob3V0SG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRob3V0SG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVNwcmVhZCBmcm9tIFwiLi9ub25JdGVyYWJsZVNwcmVhZC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///785\n')},2:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ _typeof)\n/* harmony export */ });\nfunction _typeof(obj) {\n  "@babel/helpers - typeof";\n\n  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBZTtBQUNmOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaW5pR0wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzPzk1MmMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}__webpack_require__.d=(Q,F)=>{for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(772);return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));