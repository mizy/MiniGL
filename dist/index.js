!function(B,Q){"object"==typeof exports&&"object"==typeof module?module.exports=Q():"function"==typeof define&&define.amd?define([],Q):"object"==typeof exports?exports.MiniGL=Q():B.MiniGL=Q()}(self,(function(){return(()=>{"use strict";var __webpack_modules__={247:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(785);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(671);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(144);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(340);\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(963);\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(120);\n/* harmony import */ var _InstanceMesh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(947);\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n/**\n * @class\n */\n\nvar Arrow = /*#__PURE__*/function (_InstanceMesh) {\n  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(Arrow, _InstanceMesh);\n\n  var _super = _createSuper(Arrow);\n\n  function Arrow() {\n    var _this;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      // 一个值对应几个对象\n      instanceDivisor: 1\n    };\n\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(this, Arrow);\n\n    _this = _super.call(this, config);\n    _this.shaders = {\n      vertex: "\\n            precision highp float;\\n            attribute vec2 position;\\n            attribute mat3 instanceOffset;\\n            attribute vec4 instanceColor;\\n\\t        varying vec4 vColor;\\n            uniform mat3 transform;\\n            uniform float z;\\n            void main()\\n            {\\n                vColor = instanceColor;\\n                vec3 mPosition = transform * vec3(position,z);\\n                gl_Position = vec4(mPosition.xy,z,1.0);\\n            }",\n      fragment: "\\n            precision highp float;\\n            varying vec4 vColor;\\n            void main()\\n            {\\n                gl_FragColor = vColor;\\n            }\\n            "\n    };\n    _this.uniformData = {\n      z: {\n        value: config.z || 1,\n        type: \'uniform1f\'\n      }\n    };\n\n    _this.init(config);\n\n    _this.vSize = 2;\n    return _this;\n  }\n\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(Arrow, [{\n    key: "afterAdd",\n    value: function afterAdd() {\n      this.setData([{\n        position: {\n          x: -10,\n          y: 20\n        }\n      }, {\n        position: {\n          x: 0,\n          y: 0\n        }\n      }, {\n        position: {\n          x: 10,\n          y: 20\n        }\n      }], [0, 1, 2]);\n    }\n  }, {\n    key: "setData",\n    value: function setData(data, indices) {\n      this.dispose();\n      var points = [];\n      var colors = [];\n      this.data = data;\n      data.forEach(function (item) {\n        var coord = [item.position.x, item.position.y];\n        points.push.apply(points, coord);\n      });\n      this.vertex = points;\n      this.setBufferData(points, \'position\', 2);\n      this.setIndices(indices);\n    } // 设置实例数组\n\n  }, {\n    key: "setInstanceData",\n    value: function setInstanceData(instanceData) {\n      this.disposeInstanceData();\n      this.instanceData = instanceData;\n      var instanceOffset = [];\n      var instanceColor = [];\n      this.instanceData.forEach(function (item) {\n        instanceOffset.push.apply(instanceOffset, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(item.instanceOffset));\n        instanceColor.push.apply(instanceColor, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)(item.instanceColor));\n      });\n      this.setInstanceBufferData(instanceOffset, \'instanceOffset\', 9, 3);\n      this.setInstanceBufferData(instanceColor, \'instanceColor\', 4, 3);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      // 2D 只需要两个坐标轴标识位置\n      var offset = 0; // 从数据第几位开始偏移\n\n      var normalize = false; // 分别绑定数据到shader程序中\n\n      for (var key in this.buffers) {\n        if (this.instanceDataBuffers[key]) {\n          continue;\n        }\n\n        var bufferData = this.buffers[key];\n        var bufferPosition = this.getAttribLocation(key); // 分别绑定数据到shader程序中\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData); // 绑定数据\n        // 挂载到对应的指针上\n\n        this.gl.vertexAttribPointer(bufferPosition, this.buffersSize[key], this.gl.FLOAT, normalize, 0, offset);\n        this.gl.enableVertexAttribArray(bufferPosition);\n      } // 加载实例偏移数组，这里写死instanceOffset的数据指针名，注意不要导致命名冲突了\n\n\n      for (var _key in this.instanceDataBuffers) {\n        this.gl.vertexAttribDivisor(this.getAttribLocation(_key), this.instanceDataBuffers[_key]);\n      } // 使用顶点数据\n\n\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indicesPointer); // 加载shader程序\n\n      this.gl.useProgram(this.shaderProgram); // 配置uniform\n\n      this.setUniformData(); // 渲染\n\n      if (this.indices.length) {\n        var drawType = this.config.wireFrame ? \'LINES\' : this.gl[this.drawType]; // offset必须乘以类型数组的长度，意味着要从内存中数据的对应字节数开始算 根据类型乘对应的TypeArray.BYTES_PER_ELEMENT\n\n        this.gl.drawElementsInstanced(drawType, this.count, this.gl.UNSIGNED_SHORT, this.offset, this.instanceData.length);\n      }\n    }\n  }]);\n\n  return Arrow;\n}(_InstanceMesh__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Arrow);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ3LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBOztJQUNNQzs7Ozs7QUFFRixtQkFHRztBQUFBOztBQUFBLFFBSFNDLE1BR1QsdUVBSGtCO0FBQ2pCO0FBQ0FDLE1BQUFBLGVBQWUsRUFBRTtBQUZBLEtBR2xCOztBQUFBOztBQUNDLDhCQUFNRCxNQUFOO0FBQ0EsVUFBS0UsT0FBTCxHQUFlO0FBQ1hDLE1BQUFBLE1BQU0saWVBREs7QUFlWEMsTUFBQUEsUUFBUTtBQWZHLEtBQWY7QUF3QkEsVUFBS0MsV0FBTCxHQUFtQjtBQUNmQyxNQUFBQSxDQUFDLEVBQUU7QUFDQ0MsUUFBQUEsS0FBSyxFQUFFUCxNQUFNLENBQUNNLENBQVAsSUFBWSxDQURwQjtBQUVDRSxRQUFBQSxJQUFJLEVBQUU7QUFGUDtBQURZLEtBQW5COztBQU1BLFVBQUtDLElBQUwsQ0FBVVQsTUFBVjs7QUFDQSxVQUFLVSxLQUFMLEdBQWEsQ0FBYjtBQWpDRDtBQWtDRjs7OztXQUVELG9CQUFXO0FBQ1AsV0FBS0MsT0FBTCxDQUFhLENBQ1Q7QUFBRUMsUUFBQUEsUUFBUSxFQUFFO0FBQUVDLFVBQUFBLENBQUMsRUFBRSxDQUFDLEVBQU47QUFBVUMsVUFBQUEsQ0FBQyxFQUFFO0FBQWI7QUFBWixPQURTLEVBRVQ7QUFBRUYsUUFBQUEsUUFBUSxFQUFFO0FBQUVDLFVBQUFBLENBQUMsRUFBRSxDQUFMO0FBQVFDLFVBQUFBLENBQUMsRUFBRTtBQUFYO0FBQVosT0FGUyxFQUdUO0FBQUVGLFFBQUFBLFFBQVEsRUFBRTtBQUFFQyxVQUFBQSxDQUFDLEVBQUUsRUFBTDtBQUFTQyxVQUFBQSxDQUFDLEVBQUU7QUFBWjtBQUFaLE9BSFMsQ0FBYixFQUlHLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBSkg7QUFLSDs7O1dBRUQsaUJBQVFDLElBQVIsRUFBY0MsT0FBZCxFQUF1QjtBQUVuQixXQUFLQyxPQUFMO0FBRUEsVUFBTUMsTUFBTSxHQUFHLEVBQWY7QUFDQSxVQUFNQyxNQUFNLEdBQUcsRUFBZjtBQUNBLFdBQUtKLElBQUwsR0FBWUEsSUFBWjtBQUNBQSxNQUFBQSxJQUFJLENBQUNLLE9BQUwsQ0FBYSxVQUFBQyxJQUFJLEVBQUk7QUFDakIsWUFBTUMsS0FBSyxHQUFHLENBQUNELElBQUksQ0FBQ1QsUUFBTCxDQUFjQyxDQUFmLEVBQWtCUSxJQUFJLENBQUNULFFBQUwsQ0FBY0UsQ0FBaEMsQ0FBZDtBQUNBSSxRQUFBQSxNQUFNLENBQUNLLElBQVAsT0FBQUwsTUFBTSxFQUFTSSxLQUFULENBQU47QUFDSCxPQUhEO0FBSUEsV0FBS25CLE1BQUwsR0FBY2UsTUFBZDtBQUNBLFdBQUtNLGFBQUwsQ0FBbUJOLE1BQW5CLEVBQTJCLFVBQTNCLEVBQXVDLENBQXZDO0FBQ0EsV0FBS08sVUFBTCxDQUFnQlQsT0FBaEI7QUFDSCxNQUVEOzs7O1dBQ0EseUJBQWdCVSxZQUFoQixFQUE4QjtBQUMxQixXQUFLQyxtQkFBTDtBQUNBLFdBQUtELFlBQUwsR0FBb0JBLFlBQXBCO0FBQ0EsVUFBTUUsY0FBYyxHQUFHLEVBQXZCO0FBQ0EsVUFBTUMsYUFBYSxHQUFHLEVBQXRCO0FBQ0EsV0FBS0gsWUFBTCxDQUFrQk4sT0FBbEIsQ0FBMEIsVUFBQUMsSUFBSSxFQUFJO0FBQzlCTyxRQUFBQSxjQUFjLENBQUNMLElBQWYsT0FBQUssY0FBYyxnR0FBU1AsSUFBSSxDQUFDTyxjQUFkLEVBQWQ7QUFDQUMsUUFBQUEsYUFBYSxDQUFDTixJQUFkLE9BQUFNLGFBQWEsZ0dBQVNSLElBQUksQ0FBQ1EsYUFBZCxFQUFiO0FBQ0gsT0FIRDtBQUlBLFdBQUtDLHFCQUFMLENBQTJCRixjQUEzQixFQUEyQyxnQkFBM0MsRUFBNkQsQ0FBN0QsRUFBZ0UsQ0FBaEU7QUFDQSxXQUFLRSxxQkFBTCxDQUEyQkQsYUFBM0IsRUFBMEMsZUFBMUMsRUFBMkQsQ0FBM0QsRUFBOEQsQ0FBOUQ7QUFDSDs7O1dBRUQsa0JBQVM7QUFDTDtBQUNBLFVBQU1FLE1BQU0sR0FBRyxDQUFmLENBRkssQ0FFWTs7QUFDakIsVUFBTUMsU0FBUyxHQUFHLEtBQWxCLENBSEssQ0FLTDs7QUFDQSxXQUFLLElBQUlDLEdBQVQsSUFBZ0IsS0FBS0MsT0FBckIsRUFBOEI7QUFDMUIsWUFBSSxLQUFLQyxtQkFBTCxDQUF5QkYsR0FBekIsQ0FBSixFQUFtQztBQUMvQjtBQUNIOztBQUNELFlBQU1HLFVBQVUsR0FBRyxLQUFLRixPQUFMLENBQWFELEdBQWIsQ0FBbkI7QUFDQSxZQUFNSSxjQUFjLEdBQUcsS0FBS0MsaUJBQUwsQ0FBdUJMLEdBQXZCLENBQXZCLENBTDBCLENBTTFCOztBQUNBLGFBQUtNLEVBQUwsQ0FBUUMsVUFBUixDQUFtQixLQUFLRCxFQUFMLENBQVFFLFlBQTNCLEVBQXlDTCxVQUF6QyxFQVAwQixDQU8yQjtBQUNyRDs7QUFDQSxhQUFLRyxFQUFMLENBQVFHLG1CQUFSLENBQTRCTCxjQUE1QixFQUE0QyxLQUFLTSxXQUFMLENBQWlCVixHQUFqQixDQUE1QyxFQUFtRSxLQUFLTSxFQUFMLENBQVFLLEtBQTNFLEVBQWtGWixTQUFsRixFQUE2RixDQUE3RixFQUFnR0QsTUFBaEc7QUFDQSxhQUFLUSxFQUFMLENBQVFNLHVCQUFSLENBQWdDUixjQUFoQztBQUNILE9BakJJLENBa0JMOzs7QUFDQSxXQUFLLElBQUlKLElBQVQsSUFBZ0IsS0FBS0UsbUJBQXJCLEVBQTBDO0FBQ3RDLGFBQUtJLEVBQUwsQ0FBUU8sbUJBQVIsQ0FBNEIsS0FBS1IsaUJBQUwsQ0FBdUJMLElBQXZCLENBQTVCLEVBQXlELEtBQUtFLG1CQUFMLENBQXlCRixJQUF6QixDQUF6RDtBQUNILE9BckJJLENBdUJMOzs7QUFDQSxXQUFLTSxFQUFMLENBQVFDLFVBQVIsQ0FBbUIsS0FBS0QsRUFBTCxDQUFRUSxvQkFBM0IsRUFBaUQsS0FBS0MsY0FBdEQsRUF4QkssQ0EwQkw7O0FBQ0EsV0FBS1QsRUFBTCxDQUFRVSxVQUFSLENBQW1CLEtBQUtDLGFBQXhCLEVBM0JLLENBNEJMOztBQUNBLFdBQUtDLGNBQUwsR0E3QkssQ0ErQkw7O0FBQ0EsVUFBSSxLQUFLbkMsT0FBTCxDQUFhb0MsTUFBakIsRUFBeUI7QUFDckIsWUFBTUMsUUFBUSxHQUFHLEtBQUtyRCxNQUFMLENBQVlzRCxTQUFaLEdBQXdCLE9BQXhCLEdBQWtDLEtBQUtmLEVBQUwsQ0FBUSxLQUFLYyxRQUFiLENBQW5ELENBRHFCLENBRXJCOztBQUNBLGFBQUtkLEVBQUwsQ0FBUWdCLHFCQUFSLENBQThCRixRQUE5QixFQUF3QyxLQUFLRyxLQUE3QyxFQUFvRCxLQUFLakIsRUFBTCxDQUFRa0IsY0FBNUQsRUFBNEUsS0FBSzFCLE1BQWpGLEVBQXlGLEtBQUtMLFlBQUwsQ0FBa0IwQixNQUEzRztBQUNIO0FBQ0o7Ozs7RUFwSGV0RDs7QUFzSHBCLGlFQUFlQyxLQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vTWluaUdMLy4vc3JjL01lc2gvQXJyb3cvaW5kZXguanM/ODEzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSW5zdGFuY2VNZXNoIGZyb20gJy4uL0luc3RhbmNlTWVzaCc7XG4vKipcbiAqIEBjbGFzc1xuICovXG5jbGFzcyBBcnJvdyBleHRlbmRzIEluc3RhbmNlTWVzaCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7XG4gICAgICAgIC8vIOS4gOS4quWAvOWvueW6lOWHoOS4quWvueixoVxuICAgICAgICBpbnN0YW5jZURpdmlzb3I6IDFcbiAgICB9KSB7XG4gICAgICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgICAgIHRoaXMuc2hhZGVycyA9IHtcbiAgICAgICAgICAgIHZlcnRleDogYFxuICAgICAgICAgICAgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuICAgICAgICAgICAgYXR0cmlidXRlIHZlYzIgcG9zaXRpb247XG4gICAgICAgICAgICBhdHRyaWJ1dGUgbWF0MyBpbnN0YW5jZU9mZnNldDtcbiAgICAgICAgICAgIGF0dHJpYnV0ZSB2ZWM0IGluc3RhbmNlQ29sb3I7XG5cdCAgICAgICAgdmFyeWluZyB2ZWM0IHZDb2xvcjtcbiAgICAgICAgICAgIHVuaWZvcm0gbWF0MyB0cmFuc2Zvcm07XG4gICAgICAgICAgICB1bmlmb3JtIGZsb2F0IHo7XG4gICAgICAgICAgICB2b2lkIG1haW4oKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZDb2xvciA9IGluc3RhbmNlQ29sb3I7XG4gICAgICAgICAgICAgICAgdmVjMyBtUG9zaXRpb24gPSB0cmFuc2Zvcm0gKiB2ZWMzKHBvc2l0aW9uLHopO1xuICAgICAgICAgICAgICAgIGdsX1Bvc2l0aW9uID0gdmVjNChtUG9zaXRpb24ueHkseiwxLjApO1xuICAgICAgICAgICAgfWAsXG4gICAgICAgICAgICBmcmFnbWVudDogYFxuICAgICAgICAgICAgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuICAgICAgICAgICAgdmFyeWluZyB2ZWM0IHZDb2xvcjtcbiAgICAgICAgICAgIHZvaWQgbWFpbigpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdkNvbG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVuaWZvcm1EYXRhID0ge1xuICAgICAgICAgICAgejoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBjb25maWcueiB8fCAxLFxuICAgICAgICAgICAgICAgIHR5cGU6ICd1bmlmb3JtMWYnXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaW5pdChjb25maWcpO1xuICAgICAgICB0aGlzLnZTaXplID0gMjtcbiAgICB9XG5cbiAgICBhZnRlckFkZCgpIHtcbiAgICAgICAgdGhpcy5zZXREYXRhKFtcbiAgICAgICAgICAgIHsgcG9zaXRpb246IHsgeDogLTEwLCB5OiAyMCB9IH0sXG4gICAgICAgICAgICB7IHBvc2l0aW9uOiB7IHg6IDAsIHk6IDAgfSB9LFxuICAgICAgICAgICAgeyBwb3NpdGlvbjogeyB4OiAxMCwgeTogMjAgfSB9LFxuICAgICAgICBdLCBbMCwgMSwgMl0pXG4gICAgfVxuXG4gICAgc2V0RGF0YShkYXRhLCBpbmRpY2VzKSB7XG5cbiAgICAgICAgdGhpcy5kaXNwb3NlKCk7XG5cbiAgICAgICAgY29uc3QgcG9pbnRzID0gW107XG4gICAgICAgIGNvbnN0IGNvbG9ycyA9IFtdO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICBkYXRhLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb29yZCA9IFtpdGVtLnBvc2l0aW9uLngsIGl0ZW0ucG9zaXRpb24ueV07XG4gICAgICAgICAgICBwb2ludHMucHVzaCguLi5jb29yZCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnZlcnRleCA9IHBvaW50cztcbiAgICAgICAgdGhpcy5zZXRCdWZmZXJEYXRhKHBvaW50cywgJ3Bvc2l0aW9uJywgMik7XG4gICAgICAgIHRoaXMuc2V0SW5kaWNlcyhpbmRpY2VzKTtcbiAgICB9XG5cbiAgICAvLyDorr7nva7lrp7kvovmlbDnu4RcbiAgICBzZXRJbnN0YW5jZURhdGEoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zZUluc3RhbmNlRGF0YSgpO1xuICAgICAgICB0aGlzLmluc3RhbmNlRGF0YSA9IGluc3RhbmNlRGF0YTtcbiAgICAgICAgY29uc3QgaW5zdGFuY2VPZmZzZXQgPSBbXTtcbiAgICAgICAgY29uc3QgaW5zdGFuY2VDb2xvciA9IFtdO1xuICAgICAgICB0aGlzLmluc3RhbmNlRGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgaW5zdGFuY2VPZmZzZXQucHVzaCguLi5pdGVtLmluc3RhbmNlT2Zmc2V0KTtcbiAgICAgICAgICAgIGluc3RhbmNlQ29sb3IucHVzaCguLi5pdGVtLmluc3RhbmNlQ29sb3IpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZXRJbnN0YW5jZUJ1ZmZlckRhdGEoaW5zdGFuY2VPZmZzZXQsICdpbnN0YW5jZU9mZnNldCcsIDksIDMpO1xuICAgICAgICB0aGlzLnNldEluc3RhbmNlQnVmZmVyRGF0YShpbnN0YW5jZUNvbG9yLCAnaW5zdGFuY2VDb2xvcicsIDQsIDMpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgLy8gMkQg5Y+q6ZyA6KaB5Lik5Liq5Z2Q5qCH6L205qCH6K+G5L2N572uXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IDA7Ly8g5LuO5pWw5o2u56ys5Yeg5L2N5byA5aeL5YGP56e7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIOWIhuWIq+e7keWumuaVsOaNruWIsHNoYWRlcueoi+W6j+S4rVxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5idWZmZXJzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pbnN0YW5jZURhdGFCdWZmZXJzW2tleV0pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYnVmZmVyRGF0YSA9IHRoaXMuYnVmZmVyc1trZXldO1xuICAgICAgICAgICAgY29uc3QgYnVmZmVyUG9zaXRpb24gPSB0aGlzLmdldEF0dHJpYkxvY2F0aW9uKGtleSk7XG4gICAgICAgICAgICAvLyDliIbliKvnu5HlrprmlbDmja7liLBzaGFkZXLnqIvluo/kuK1cbiAgICAgICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YSk7Ly8g57uR5a6a5pWw5o2uXG4gICAgICAgICAgICAvLyDmjILovb3liLDlr7nlupTnmoTmjIfpkojkuIpcbiAgICAgICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihidWZmZXJQb3NpdGlvbiwgdGhpcy5idWZmZXJzU2l6ZVtrZXldLCB0aGlzLmdsLkZMT0FULCBub3JtYWxpemUsIDAsIG9mZnNldCk7XG4gICAgICAgICAgICB0aGlzLmdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGJ1ZmZlclBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDliqDovb3lrp7kvovlgY/np7vmlbDnu4TvvIzov5nph4zlhpnmrbtpbnN0YW5jZU9mZnNldOeahOaVsOaNruaMh+mSiOWQje+8jOazqOaEj+S4jeimgeWvvOiHtOWRveWQjeWGsueqgeS6hlxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5pbnN0YW5jZURhdGFCdWZmZXJzKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYkRpdmlzb3IodGhpcy5nZXRBdHRyaWJMb2NhdGlvbihrZXkpLCB0aGlzLmluc3RhbmNlRGF0YUJ1ZmZlcnNba2V5XSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDkvb/nlKjpobbngrnmlbDmja5cbiAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuaW5kaWNlc1BvaW50ZXIpO1xuXG4gICAgICAgIC8vIOWKoOi9vXNoYWRlcueoi+W6j1xuICAgICAgICB0aGlzLmdsLnVzZVByb2dyYW0odGhpcy5zaGFkZXJQcm9ncmFtKTtcbiAgICAgICAgLy8g6YWN572udW5pZm9ybVxuICAgICAgICB0aGlzLnNldFVuaWZvcm1EYXRhKCk7XG5cbiAgICAgICAgLy8g5riy5p+TXG4gICAgICAgIGlmICh0aGlzLmluZGljZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBkcmF3VHlwZSA9IHRoaXMuY29uZmlnLndpcmVGcmFtZSA/ICdMSU5FUycgOiB0aGlzLmdsW3RoaXMuZHJhd1R5cGVdO1xuICAgICAgICAgICAgLy8gb2Zmc2V05b+F6aG75LmY5Lul57G75Z6L5pWw57uE55qE6ZW/5bqm77yM5oSP5ZGz552A6KaB5LuO5YaF5a2Y5Lit5pWw5o2u55qE5a+55bqU5a2X6IqC5pWw5byA5aeL566XIOagueaNruexu+Wei+S5mOWvueW6lOeahFR5cGVBcnJheS5CWVRFU19QRVJfRUxFTUVOVFxuICAgICAgICAgICAgdGhpcy5nbC5kcmF3RWxlbWVudHNJbnN0YW5jZWQoZHJhd1R5cGUsIHRoaXMuY291bnQsIHRoaXMuZ2wuVU5TSUdORURfU0hPUlQsIHRoaXMub2Zmc2V0LCB0aGlzLmluc3RhbmNlRGF0YS5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQXJyb3c7XG4iXSwibmFtZXMiOlsiSW5zdGFuY2VNZXNoIiwiQXJyb3ciLCJjb25maWciLCJpbnN0YW5jZURpdmlzb3IiLCJzaGFkZXJzIiwidmVydGV4IiwiZnJhZ21lbnQiLCJ1bmlmb3JtRGF0YSIsInoiLCJ2YWx1ZSIsInR5cGUiLCJpbml0IiwidlNpemUiLCJzZXREYXRhIiwicG9zaXRpb24iLCJ4IiwieSIsImRhdGEiLCJpbmRpY2VzIiwiZGlzcG9zZSIsInBvaW50cyIsImNvbG9ycyIsImZvckVhY2giLCJpdGVtIiwiY29vcmQiLCJwdXNoIiwic2V0QnVmZmVyRGF0YSIsInNldEluZGljZXMiLCJpbnN0YW5jZURhdGEiLCJkaXNwb3NlSW5zdGFuY2VEYXRhIiwiaW5zdGFuY2VPZmZzZXQiLCJpbnN0YW5jZUNvbG9yIiwic2V0SW5zdGFuY2VCdWZmZXJEYXRhIiwib2Zmc2V0Iiwibm9ybWFsaXplIiwia2V5IiwiYnVmZmVycyIsImluc3RhbmNlRGF0YUJ1ZmZlcnMiLCJidWZmZXJEYXRhIiwiYnVmZmVyUG9zaXRpb24iLCJnZXRBdHRyaWJMb2NhdGlvbiIsImdsIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJidWZmZXJzU2l6ZSIsIkZMT0FUIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ2ZXJ0ZXhBdHRyaWJEaXZpc29yIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJpbmRpY2VzUG9pbnRlciIsInVzZVByb2dyYW0iLCJzaGFkZXJQcm9ncmFtIiwic2V0VW5pZm9ybURhdGEiLCJsZW5ndGgiLCJkcmF3VHlwZSIsIndpcmVGcmFtZSIsImRyYXdFbGVtZW50c0luc3RhbmNlZCIsImNvdW50IiwiVU5TSUdORURfU0hPUlQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///247\n')},33:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(671);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(144);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(942);\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(600);\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n/**\n * Base 基类方便继承以实现其他类型的情况\n */\n\nvar Base = /*#__PURE__*/function () {\n  // 是否需要重绘\n\n  /**\n   * \n   * @param {any} config \n   */\n  function Base(config) {\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this, Base);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "vSize", 2);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "offset", 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "depthMask", true);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "depthTest", true);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "transparent", true);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "uniformsNeedUpdate", true);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "uniformLocations", {});\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "visible", true);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "uniformData", {\n      z: {\n        value: 1,\n        type: \'uniform1f\'\n      }\n    });\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, "vertex", []);\n\n    this.init(config);\n  }\n\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(Base, [{\n    key: "init",\n    value: function init() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.config = Object.assign({\n        type: \'ok\'\n      }, config);\n      this.buffers = [];\n      this.buffersSize = []; // 初始化数据数组\n\n      this.indices = []; // 初始化模型转换矩阵，这个矩阵按需引用\n\n      this.matrix = gl_matrix__WEBPACK_IMPORTED_MODULE_3__.create();\n\n      if (config.shaders) {\n        this.shaders = _objectSpread(_objectSpread({}, this.shaders), config.shaders);\n      }\n\n      if (config.miniGL) {\n        config.miniGL.canvas.add(this);\n      }\n    }\n  }, {\n    key: "setMatrix",\n    value: function setMatrix(matrix) {\n      gl_matrix__WEBPACK_IMPORTED_MODULE_3__.copy(this.matrix, matrix);\n    }\n  }, {\n    key: "setData",\n    value: function setData(data) {\n      this.setBufferData(data, \'position\', 2);\n    }\n  }, {\n    key: "setUniformData",\n    value: function setUniformData() {\n      if (!this.uniformData || !this.uniformsNeedUpdate) return;\n\n      for (var key in this.uniformData) {\n        var item = this.uniformData[key];\n        this.setUniform(key, item);\n      } // this.uniformsNeedUpdate = false;\n\n    }\n    /**\n     * @param  {} texture\n     * @param  {} key=\'u_Sampler\'\n     */\n\n  }, {\n    key: "setTexture",\n    value: function setTexture(texture) {\n      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'u_Sampler\';\n      this.uniformData[key] = {\n        type: \'uniform1i\',\n        // image\n        value: 0,\n        // 0号纹理传递\n        texture: texture.webglTexture ? texture.webglTexture : texture\n      };\n      this.texture = texture;\n      this.uniformsNeedUpdate = true;\n    }\n  }, {\n    key: "setUniform",\n    value: function setUniform(key, item) {\n      var gl = this.gl;\n      var value = item.value,\n          type = item.type,\n          texture = item.texture,\n          _item$textureUnit = item.textureUnit,\n          textureUnit = _item$textureUnit === void 0 ? 0 : _item$textureUnit; // 矩阵\n\n      if (type.indexOf(\'uniformMatrix\') > -1) {\n        gl[type](this.getUniformLocation(key), false, value); // 图形数据\n      } else if (texture) {\n        // 激活纹理单元0，这里可以配置激活多个纹理单元，用来完成一个shader里多个纹理叠加处理的后期效果\n        gl.activeTexture(gl["TEXTURE".concat(textureUnit)]); // 绑定纹理到单元0上\n\n        gl.bindTexture(gl.TEXTURE_2D, item.texture); // 传值\n\n        gl[type](this.getUniformLocation(key), value); // 行列数据\n      } else if (type.slice(-1) === \'v\' || (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(value) !== \'object\') {\n        gl[type](this.getUniformLocation(key), value);\n      } else {\n        gl[type](this.getUniformLocation(key), value[0] || value, value[1], value[2], value[3]);\n      }\n\n      this.uniformData[key] = item;\n    }\n    /**\n     * 新的缓存数据\n     * @param  {} data\n     * @param  {} name\n     */\n\n  }, {\n    key: "setBufferData",\n    value: function setBufferData(data, name, size) {\n      var bufferType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.bufferType;\n\n      // 没有的话初始化复用一个\n      if (!this.buffers[name]) {\n        this.buffers[name] = this.gl.createBuffer();\n      }\n\n      this.buffersSize[name] = size; // 顶点buffer\n\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[name]);\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(data), this.gl[bufferType || \'STATIC_DRAW\']);\n    }\n    /**\n     * 更新缓冲区数据\n     * @param {Array} data \n     * @param {string} name \n     * @param {number} offset \n     */\n\n  }, {\n    key: "updateBufferData",\n    value: function updateBufferData(data, name) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      // 顶点buffer\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffers[name]);\n      this.gl.bufferSubData(this.gl.ARRAY_BUFFER, offset, new Float32Array(data));\n    }\n  }, {\n    key: "setIndices",\n    value: function setIndices(indices) {\n      this.indices = indices;\n      this.count = !this.count ? indices.length : this.count; // 顶点buffer\n\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indicesPointer);\n      this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), this.gl.STATIC_DRAW);\n    } // 生成shader程序\n\n  }, {\n    key: "initShader",\n    value: function initShader() {\n      var gl = this.gl; // 加载shader\n\n      var vertexShaderObject = this.loadShader(this.shaders.vertex, this.gl.VERTEX_SHADER);\n      var fragmentShaderObject = this.loadShader(this.shaders.fragment, this.gl.FRAGMENT_SHADER); // 创建程序\n\n      var shaderProgram = this.gl.createProgram();\n      this.gl.attachShader(shaderProgram, vertexShaderObject);\n      this.gl.attachShader(shaderProgram, fragmentShaderObject);\n      this.gl.linkProgram(shaderProgram);\n\n      if (!this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS)) {\n        console.error(\'shaderProgram Error: \', gl.getError(), gl.getProgramParameter(shaderProgram, 35715), gl.getProgramInfoLog(shaderProgram).trim());\n        console.error(\'fragmentLog:\', gl.getShaderInfoLog(vertexShaderObject).trim(), this.addLineNumbers(gl.getShaderSource(vertexShaderObject)));\n        console.error(\'vertexLog:\', gl.getShaderInfoLog(fragmentShaderObject).trim(), this.addLineNumbers(gl.getShaderSource(fragmentShaderObject)));\n        return;\n      }\n\n      this.shaderProgram = shaderProgram;\n    }\n  }, {\n    key: "addLineNumbers",\n    value: function addLineNumbers(string) {\n      var lines = string.split(\'\\n\');\n\n      for (var i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + \': \' + lines[i];\n      }\n\n      return lines.join(\'\\n\');\n    } // 获取顶点变量地址\n\n  }, {\n    key: "getAttribLocation",\n    value: function getAttribLocation(name) {\n      return this.gl.getAttribLocation(this.shaderProgram, name);\n    } // 获取uniform变量地址\n\n  }, {\n    key: "getUniformLocation",\n    value: function getUniformLocation(name) {\n      // 缓存会每秒快20ms左右，节省一帧的时机\n      if (this.uniformLocations[name]) return this.uniformLocations[name];\n      this.uniformLocations[name] = this.gl.getUniformLocation(this.shaderProgram, name);\n      return this.uniformLocations[name];\n    } // 加载shader\n\n  }, {\n    key: "loadShader",\n    value: function loadShader(shaderStr, type) {\n      var shader = this.gl.createShader(type);\n      this.gl.shaderSource(shader, shaderStr);\n      this.gl.compileShader(shader);\n      return shader;\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      if (!this.shaders) return; // 2D 只需要两个坐标轴标识位置\n\n      var vLen = Math.ceil(this.vertex.length / this.vSize); // 几个点\n\n      var offset = 0; // 从数据第几位开始偏移\n\n      var normalize = false;\n\n      for (var key in this.buffers) {\n        var bufferData = this.buffers[key];\n        var bufferPosition = this.getAttribLocation(key); // 分别绑定数据到shader程序中\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData);\n        this.gl.vertexAttribPointer(bufferPosition, this.buffersSize[key], this.gl.FLOAT, normalize, 0, offset);\n        this.gl.enableVertexAttribArray(bufferPosition);\n      } // 加载shader程序\n\n\n      this.gl.useProgram(this.shaderProgram);\n      this.setUniformData(); // 渲染\n\n      if (this.vertex.length) {\n        this.gl.drawArrays(this.gl[this.drawType], this.offset, vLen);\n      }\n    }\n  }, {\n    key: "afterRender",\n    value: function afterRender() {}\n  }, {\n    key: "onAdd",\n    value: function onAdd(miniGL) {\n      this.miniGL = miniGL; // 获取顶点数据内存里的指针\n\n      this.gl = miniGL.gl; // 没有初始化的情况\n\n      if (!this.indicesPointer) {\n        this.indicesPointer = this.gl.createBuffer();\n      }\n\n      if (this.shaders && !this.shaderProgram) {\n        this.initShader();\n      }\n\n      this.afterAdd();\n    }\n  }, {\n    key: "afterAdd",\n    value: function afterAdd() {}\n  }, {\n    key: "translate",\n    value: function translate(x, y) {\n      gl_matrix__WEBPACK_IMPORTED_MODULE_3__.translate(this.matrix, this.matrix, [x, y]);\n    }\n  }, {\n    key: "scale",\n    value: function scale(x, y) {\n      y = y || x;\n      gl_matrix__WEBPACK_IMPORTED_MODULE_3__.scale(this.matrix, this.matrix, [x, y]);\n    } // 销毁shader\n\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      var _this = this;\n\n      var shaders = this.gl.getAttachedShaders(this.shaderProgram);\n      shaders.forEach(function (item) {\n        _this.gl.deleteShader(item);\n      });\n      this.gl.deleteBuffer(this.indicesPointer);\n      this.gl.deleteProgram(this.shaderProgram);\n      this.parent = undefined;\n      this.dispose();\n    } // 释放buffer空间\n\n  }, {\n    key: "dispose",\n    value: function dispose() {\n      for (var key in this.buffers) {\n        this.gl.disableVertexAttribArray(this.buffers[key]);\n        this.gl.deleteBuffer(this.buffers[key]);\n      }\n\n      for (var _key in this.uniformData) {\n        if (this.uniformData[_key].texture) {\n          this.gl.deleteTexture(this.uniformData[_key].texture);\n        }\n      }\n\n      this.buffers = {};\n    }\n  }]);\n\n  return Base;\n}();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Base);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33\n')},947:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": () => (/* binding */ Mesh_InstanceMesh)\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 5 modules\nvar toConsumableArray = __webpack_require__(785);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(671);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(144);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__(326);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js + 1 modules\nvar inherits = __webpack_require__(340);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\nvar possibleConstructorReturn = __webpack_require__(963);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(120);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(942);\n;// CONCATENATED MODULE: ./src/Shaders/instanceMeshShader.js\n/* harmony default export */ const instanceMeshShader = ({\n  vertexShader: "\\n\\tprecision lowp float;\\n\\tattribute vec2 position;\\n    attribute vec4 color;\\n    attribute vec3 instanceOffset;\\n\\tvarying vec4 vColor;\\n\\tuniform mat3 transform;\\n    uniform float z;\\n\\tvoid main()\\n\\t{\\n\\t\\tvColor = color;\\n        vColor.a = instanceOffset.z;\\n\\n\\t\\tvec3 mPosition = transform * vec3(vec2(position.x+instanceOffset.x,position.y+instanceOffset.y),z);\\n\\t\\tgl_Position = vec4(mPosition.xy,z,1.0);\\n\\t}\\n\\t",\n  fragmentShader: "\\n\\tprecision lowp float;\\n\\tvarying vec4 vColor;\\n\\tvoid main()\\n\\t{\\n\\t\\tgl_FragColor = vColor;\\n\\t}\\n\\t"\n});\n// EXTERNAL MODULE: ./src/Utils/LoadTexture.js\nvar LoadTexture = __webpack_require__(816);\n// EXTERNAL MODULE: ./src/Mesh/Base.js\nvar Base = __webpack_require__(33);\n;// CONCATENATED MODULE: ./src/Mesh/InstanceMesh.js\n\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\nvar InstanceMesh = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(InstanceMesh, _Base);\n\n  var _super = _createSuper(InstanceMesh);\n\n  // array.BYTES_PER_ELEMENT * indicesEachLength\n  function InstanceMesh() {\n    var _this;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      // 一个值对应几个对象\n      instanceDivisor: 1\n    };\n\n    (0,classCallCheck/* default */.Z)(this, InstanceMesh);\n\n    _this = _super.call(this, config);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", \'TRIANGLES\');\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "instanceDataBuffers", {});\n\n    _this.shaders = {\n      vertex: instanceMeshShader.vertexShader,\n      fragment: instanceMeshShader.fragmentShader\n    };\n    _this.uniformData = {\n      z: {\n        value: config.z || 1,\n        type: \'uniform1f\'\n      }\n    };\n\n    _this.init(config);\n\n    _this.vSize = 2;\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(InstanceMesh, [{\n    key: "setMap",\n    value: function setMap(src) {\n      var _this2 = this;\n\n      return (0,LoadTexture/* default */.Z)(this.gl, src).then(function (texture) {\n        _this2.uniformData[\'map\'] = {\n          type: \'uniform1i\',\n          // image\n          value: 0,\n          // 0号纹理传递\n          texture: texture\n        };\n        _this2.uniformsNeedUpdate = true;\n      });\n    }\n  }, {\n    key: "setData",\n    value: function setData(data, indices) {\n      this.dispose();\n      var points = [];\n      var colors = [];\n      this.data = data;\n      data.forEach(function (item) {\n        var coord = [item.position.x, item.position.y];\n        var color = item.color || [0, 0.1, 0.2, 1];\n        colors.push.apply(colors, (0,toConsumableArray/* default */.Z)(color));\n        points.push.apply(points, coord);\n      });\n      this.vertex = points;\n      this.setBufferData(points, \'position\', 2);\n      this.setBufferData(colors, \'color\', 4);\n      this.setIndices(indices);\n    }\n  }, {\n    key: "setBufferDatas",\n    value: function setBufferDatas(_ref) {\n      var position = _ref.position,\n          color = _ref.color,\n          indices = _ref.indices,\n          uvs = _ref.uvs;\n      var viewport = this.miniGL.viewport;\n      this.dispose();\n      this.vertex = position;\n      this.setBufferData(position, \'position\', 2);\n      this.setBufferData(color, \'color\', 4);\n      this.setBufferData(uvs, \'uv\', 2);\n      this.setIndices(indices);\n    } // 设置实例数组\n\n  }, {\n    key: "setInstanceData",\n    value: function setInstanceData(instanceData) {\n      this.disposeInstanceData();\n      this.instanceData = instanceData;\n      var eachLength = instanceData[0].length;\n      var arr = [];\n      this.instanceData.forEach(function (item) {\n        arr.push.apply(arr, (0,toConsumableArray/* default */.Z)(item));\n      });\n      this.setInstanceBufferData(arr, \'instanceOffset\', eachLength);\n    }\n  }, {\n    key: "setInstanceBufferData",\n    value: function setInstanceBufferData(data, name, length) {\n      var instanceDivisor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      this.setBufferData(data, name, length);\n      this.instanceDataBuffers[name] = instanceDivisor;\n    }\n  }, {\n    key: "disposeInstanceData",\n    value: function disposeInstanceData() {\n      for (var key in this.instanceDataBuffers) {\n        this.gl.disableVertexAttribArray(this.buffers[key]);\n        this.gl.deleteBuffer(this.buffers[key]);\n      }\n\n      this.instanceDataBuffers = {};\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      // 2D 只需要两个坐标轴标识位置\n      var offset = 0; // 从数据第几位开始偏移\n\n      var normalize = false; // 分别绑定数据到shader程序中\n\n      for (var key in this.buffers) {\n        var bufferData = this.buffers[key];\n        var bufferPosition = this.getAttribLocation(key); // 分别绑定数据到shader程序中\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData); // 绑定数据\n        // 挂载到对应的指针上\n\n        this.gl.vertexAttribPointer(bufferPosition, this.buffersSize[key], this.gl.FLOAT, normalize, 0, offset);\n        this.gl.enableVertexAttribArray(bufferPosition);\n      } // 加载实例偏移数组，这里写死instanceOffset的数据指针名，注意不要导致命名冲突了\n\n\n      for (var _key in this.instanceDataBuffers) {\n        this.gl.vertexAttribDivisor(this.getAttribLocation(_key), this.instanceDataBuffers[_key]);\n      } // 使用顶点数据\n\n\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indicesPointer); // 加载shader程序\n\n      this.gl.useProgram(this.shaderProgram); // 配置uniform\n\n      this.setUniformData(); // 渲染\n\n      if (this.indices.length) {\n        var drawType = this.config.wireFrame ? \'LINES\' : this.gl[this.drawType]; // offset必须乘以类型数组的长度，意味着要从内存中数据的对应字节数开始算 根据类型乘对应的TypeArray.BYTES_PER_ELEMENT\n\n        this.gl.drawElementsInstanced(drawType, this.count, this.gl.UNSIGNED_SHORT, this.offset, this.instanceData.length);\n      }\n    }\n  }]);\n\n  return InstanceMesh;\n}(Base/* default */.Z);\n\n/* harmony default export */ const Mesh_InstanceMesh = (InstanceMesh);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///947\n')},70:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": () => (/* binding */ Mesh_Line)\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 5 modules\nvar toConsumableArray = __webpack_require__(785);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(671);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(144);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__(326);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js + 1 modules\nvar inherits = __webpack_require__(340);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\nvar possibleConstructorReturn = __webpack_require__(963);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(120);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(942);\n;// CONCATENATED MODULE: ./src/Shaders/line.js\n/* harmony default export */ const line = ({\n  // shader中进行坐标转换会不会快？CPU只会调用一次，GPU每帧都要重复去运算，2d情况下没有相机，\n  // 没有坐标因相机而变化的情况，所以不用再shader中运算，可以减少cpu的调用率\n  // 发现还是会大规模常常对坐标进行替换，那还是放进shader中运算吧\n  vertexShader: "\\n\\tprecision highp float;\\n\\tattribute vec2 position;\\n\\tattribute vec4 color;\\n    uniform mat3 transform;\\n    uniform mat3 modelView;\\n\\tuniform float z;\\n\\tvarying vec4 vColor;\\n\\tvoid main()\\n\\t{\\n\\t\\tvColor = color;\\n\\t\\tvec3 mPosition = transform * modelView * vec3(position,1.);\\n\\t\\tgl_Position = vec4(mPosition.xy,z,1.);\\n\\t}\\n\\t",\n  fragmentShader: "\\n\\tprecision highp float;\\n\\tvarying vec4 vColor;\\n\\tvoid main()\\n\\t{\\n\\t\\tgl_FragColor = vColor;\\n\\t}\\n\\t"\n});\n// EXTERNAL MODULE: ./src/Mesh/Base.js\nvar Base = __webpack_require__(33);\n;// CONCATENATED MODULE: ./src/Mesh/Line.js\n\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\nvar Line = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(Line, _Base);\n\n  var _super = _createSuper(Line);\n\n  function Line(config) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, Line);\n\n    config = Object.assign({\n      z: 1\n    }, config);\n    _this = _super.call(this, config);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", \'LINE_STRIP\');\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "shaders", {\n      vertex: line.vertexShader,\n      fragment: line.fragmentShader\n    });\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    _this.uniformData = {\n      z: {\n        value: Math.min(config.z, 1),\n        type: \'uniform1f\'\n      }\n    };\n\n    _this.init(config);\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(Line, [{\n    key: "setData",\n    value: function setData(data) {\n      var _this2 = this;\n\n      this.dispose();\n      var points = [];\n      this.data = data;\n      var colors = [];\n      data.forEach(function (item) {\n        points.push(item.position.x, item.position.y);\n        colors.push.apply(colors, (0,toConsumableArray/* default */.Z)(item.color || _this2.config.color || [1, 0, 1, 1]));\n      });\n      this.vertex = points;\n      this.setBufferData(points, \'position\', 2);\n      this.setBufferData(colors, \'color\', 4);\n    }\n    /**\n     * \n     * @param {any} param 入参\n     */\n\n  }, {\n    key: "setBufferDatas",\n    value: function setBufferDatas(_ref) {\n      var position = _ref.position,\n          color = _ref.color;\n      this.dispose();\n      this.vertex = position;\n      position && this.setBufferData(position, \'position\', 2);\n      color && this.setBufferData(color, \'color\', 4);\n    }\n  }]);\n\n  return Line;\n}(Base/* default */.Z);\n\n/* harmony default export */ const Mesh_Line = (Line);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBZTtBQUNkO0FBQ0E7QUFDQTtBQUNBQSxFQUFBQSxZQUFZLHdWQUpFO0FBb0JkQyxFQUFBQSxjQUFjO0FBcEJBLENBQWYsRTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBQTtBQUNBOztJQUVNRzs7Ozs7QUFRTCxnQkFBWUMsTUFBWixFQUFvQjtBQUFBOztBQUFBOztBQUNuQkEsSUFBQUEsTUFBTSxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBYztBQUN0QkMsTUFBQUEsQ0FBQyxFQUFFO0FBRG1CLEtBQWQsRUFFTkgsTUFGTSxDQUFUO0FBR0EsOEJBQU1BLE1BQU47O0FBSm1CLG1HQVBULFlBT1M7O0FBQUEsa0dBTlY7QUFDVEksTUFBQUEsTUFBTSxFQUFFUCxpQkFEQztBQUVUUSxNQUFBQSxRQUFRLEVBQUVSLG1CQUF5QkQ7QUFGMUIsS0FNVTs7QUFBQSxpR0FGWCxDQUVXOztBQUtuQixVQUFLVSxXQUFMLEdBQW1CO0FBQ2xCSCxNQUFBQSxDQUFDLEVBQUU7QUFDRkksUUFBQUEsS0FBSyxFQUFFQyxJQUFJLENBQUNDLEdBQUwsQ0FBU1QsTUFBTSxDQUFDRyxDQUFoQixFQUFtQixDQUFuQixDQURMO0FBRUZPLFFBQUFBLElBQUksRUFBRTtBQUZKO0FBRGUsS0FBbkI7O0FBTUEsVUFBS0MsSUFBTCxDQUFVWCxNQUFWOztBQVhtQjtBQVluQjs7OztXQUVELGlCQUFRWSxJQUFSLEVBQWM7QUFBQTs7QUFDYixXQUFLQyxPQUFMO0FBQ0EsVUFBTUMsTUFBTSxHQUFHLEVBQWY7QUFDQSxXQUFLRixJQUFMLEdBQVlBLElBQVo7QUFDQSxVQUFNRyxNQUFNLEdBQUcsRUFBZjtBQUNBSCxNQUFBQSxJQUFJLENBQUNJLE9BQUwsQ0FBYSxVQUFBQyxJQUFJLEVBQUk7QUFDcEJILFFBQUFBLE1BQU0sQ0FBQ0ksSUFBUCxDQUFZRCxJQUFJLENBQUNFLFFBQUwsQ0FBY0MsQ0FBMUIsRUFBNkJILElBQUksQ0FBQ0UsUUFBTCxDQUFjRSxDQUEzQztBQUNBTixRQUFBQSxNQUFNLENBQUNHLElBQVAsT0FBQUgsTUFBTSx1Q0FBVUUsSUFBSSxDQUFDSyxLQUFMLElBQWMsTUFBSSxDQUFDdEIsTUFBTCxDQUFZc0IsS0FBMUIsSUFBbUMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLENBQTdDLEVBQU47QUFDQSxPQUhEO0FBSUEsV0FBS2xCLE1BQUwsR0FBY1UsTUFBZDtBQUNBLFdBQUtTLGFBQUwsQ0FBbUJULE1BQW5CLEVBQTJCLFVBQTNCLEVBQXVDLENBQXZDO0FBQ0EsV0FBS1MsYUFBTCxDQUFtQlIsTUFBbkIsRUFBMkIsT0FBM0IsRUFBb0MsQ0FBcEM7QUFDQTtBQUVEO0FBQ0Q7QUFDQTtBQUNBOzs7O1dBQ0MsOEJBRUc7QUFBQSxVQURGSSxRQUNFLFFBREZBLFFBQ0U7QUFBQSxVQURRRyxLQUNSLFFBRFFBLEtBQ1I7QUFDRixXQUFLVCxPQUFMO0FBQ0EsV0FBS1QsTUFBTCxHQUFjZSxRQUFkO0FBQ0FBLE1BQUFBLFFBQVEsSUFBSSxLQUFLSSxhQUFMLENBQW1CSixRQUFuQixFQUE2QixVQUE3QixFQUF5QyxDQUF6QyxDQUFaO0FBRUFHLE1BQUFBLEtBQUssSUFBSSxLQUFLQyxhQUFMLENBQW1CRCxLQUFuQixFQUEwQixPQUExQixFQUFtQyxDQUFuQyxDQUFUO0FBRUE7Ozs7RUFqRGlCeEI7O0FBb0RuQixnREFBZUMsSUFBZiIsInNvdXJjZXMiOlsid2VicGFjazovL01pbmlHTC8uL3NyYy9TaGFkZXJzL2xpbmUuanM/ZDZmYSIsIndlYnBhY2s6Ly9NaW5pR0wvLi9zcmMvTWVzaC9MaW5lLmpzPzljMGQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuXHQvLyBzaGFkZXLkuK3ov5vooYzlnZDmoIfovazmjaLkvJrkuI3kvJrlv6vvvJ9DUFXlj6rkvJrosIPnlKjkuIDmrKHvvIxHUFXmr4/luKfpg73opoHph43lpI3ljrvov5DnrpfvvIwyZOaDheWGteS4i+ayoeacieebuOacuu+8jFxuXHQvLyDmsqHmnInlnZDmoIflm6Dnm7jmnLrogIzlj5jljJbnmoTmg4XlhrXvvIzmiYDku6XkuI3nlKjlho1zaGFkZXLkuK3ov5DnrpfvvIzlj6/ku6Xlh4/lsJFjcHXnmoTosIPnlKjnjodcblx0Ly8g5Y+R546w6L+Y5piv5Lya5aSn6KeE5qih5bi45bi45a+55Z2Q5qCH6L+b6KGM5pu/5o2i77yM6YKj6L+Y5piv5pS+6L+bc2hhZGVy5Lit6L+Q566X5ZCnXG5cdHZlcnRleFNoYWRlcjogYFxuXHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdGF0dHJpYnV0ZSB2ZWMyIHBvc2l0aW9uO1xuXHRhdHRyaWJ1dGUgdmVjNCBjb2xvcjtcbiAgICB1bmlmb3JtIG1hdDMgdHJhbnNmb3JtO1xuICAgIHVuaWZvcm0gbWF0MyBtb2RlbFZpZXc7XG5cdHVuaWZvcm0gZmxvYXQgejtcblx0dmFyeWluZyB2ZWM0IHZDb2xvcjtcblx0dm9pZCBtYWluKClcblx0e1xuXHRcdHZDb2xvciA9IGNvbG9yO1xuXHRcdHZlYzMgbVBvc2l0aW9uID0gdHJhbnNmb3JtICogbW9kZWxWaWV3ICogdmVjMyhwb3NpdGlvbiwxLik7XG5cdFx0Z2xfUG9zaXRpb24gPSB2ZWM0KG1Qb3NpdGlvbi54eSx6LDEuKTtcblx0fVxuXHRgLFxuXG5cdGZyYWdtZW50U2hhZGVyOiBgXG5cdHByZWNpc2lvbiBoaWdocCBmbG9hdDtcblx0dmFyeWluZyB2ZWM0IHZDb2xvcjtcblx0dm9pZCBtYWluKClcblx0e1xuXHRcdGdsX0ZyYWdDb2xvciA9IHZDb2xvcjtcblx0fVxuXHRgXG59O1xuIiwiaW1wb3J0IGxpbmVTaGFkZXIgZnJvbSAnLi4vU2hhZGVycy9saW5lJztcbmltcG9ydCBCYXNlIGZyb20gJy4vQmFzZSc7XG5cbmNsYXNzIExpbmUgZXh0ZW5kcyBCYXNlIHtcblx0ZHJhd1R5cGUgPSAnTElORV9TVFJJUCc7XG5cdHNoYWRlcnMgPSB7XG5cdFx0dmVydGV4OiBsaW5lU2hhZGVyLnZlcnRleFNoYWRlcixcblx0XHRmcmFnbWVudDogbGluZVNoYWRlci5mcmFnbWVudFNoYWRlclxuXHR9XG5cdG9mZnNldCA9IDA7XG5cblx0Y29uc3RydWN0b3IoY29uZmlnKSB7XG5cdFx0Y29uZmlnID0gT2JqZWN0LmFzc2lnbih7XG5cdFx0XHR6OiAxXG5cdFx0fSwgY29uZmlnKTtcblx0XHRzdXBlcihjb25maWcpO1xuXHRcdHRoaXMudW5pZm9ybURhdGEgPSB7XG5cdFx0XHR6OiB7XG5cdFx0XHRcdHZhbHVlOiBNYXRoLm1pbihjb25maWcueiwgMSksXG5cdFx0XHRcdHR5cGU6ICd1bmlmb3JtMWYnXG5cdFx0XHR9XG5cdFx0fTtcblx0XHR0aGlzLmluaXQoY29uZmlnKTtcblx0fVxuXG5cdHNldERhdGEoZGF0YSkge1xuXHRcdHRoaXMuZGlzcG9zZSgpO1xuXHRcdGNvbnN0IHBvaW50cyA9IFtdO1xuXHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cdFx0Y29uc3QgY29sb3JzID0gW107XG5cdFx0ZGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xuXHRcdFx0cG9pbnRzLnB1c2goaXRlbS5wb3NpdGlvbi54LCBpdGVtLnBvc2l0aW9uLnkpO1xuXHRcdFx0Y29sb3JzLnB1c2goLi4uKGl0ZW0uY29sb3IgfHwgdGhpcy5jb25maWcuY29sb3IgfHwgWzEsIDAsIDEsIDFdKSk7XG5cdFx0fSk7XG5cdFx0dGhpcy52ZXJ0ZXggPSBwb2ludHM7XG5cdFx0dGhpcy5zZXRCdWZmZXJEYXRhKHBvaW50cywgJ3Bvc2l0aW9uJywgMik7XG5cdFx0dGhpcy5zZXRCdWZmZXJEYXRhKGNvbG9ycywgJ2NvbG9yJywgNCk7XG5cdH1cblxuXHQvKipcblx0ICogXG5cdCAqIEBwYXJhbSB7YW55fSBwYXJhbSDlhaXlj4Jcblx0ICovXG5cdHNldEJ1ZmZlckRhdGFzKHtcblx0XHRwb3NpdGlvbiwgY29sb3Jcblx0fSkge1xuXHRcdHRoaXMuZGlzcG9zZSgpO1xuXHRcdHRoaXMudmVydGV4ID0gcG9zaXRpb247XG5cdFx0cG9zaXRpb24gJiYgdGhpcy5zZXRCdWZmZXJEYXRhKHBvc2l0aW9uLCAncG9zaXRpb24nLCAyKTtcblxuXHRcdGNvbG9yICYmIHRoaXMuc2V0QnVmZmVyRGF0YShjb2xvciwgJ2NvbG9yJywgNCk7XG5cblx0fVxuXG59XG5leHBvcnQgZGVmYXVsdCBMaW5lO1xuIl0sIm5hbWVzIjpbInZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwibGluZVNoYWRlciIsIkJhc2UiLCJMaW5lIiwiY29uZmlnIiwiT2JqZWN0IiwiYXNzaWduIiwieiIsInZlcnRleCIsImZyYWdtZW50IiwidW5pZm9ybURhdGEiLCJ2YWx1ZSIsIk1hdGgiLCJtaW4iLCJ0eXBlIiwiaW5pdCIsImRhdGEiLCJkaXNwb3NlIiwicG9pbnRzIiwiY29sb3JzIiwiZm9yRWFjaCIsIml0ZW0iLCJwdXNoIiwicG9zaXRpb24iLCJ4IiwieSIsImNvbG9yIiwic2V0QnVmZmVyRGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///70\n')},776:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(671);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(144);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(942);\n\n\n\n\nvar Texture = /*#__PURE__*/function () {\n  /**\n   * @param {Boolean} 是否支持预乘，默认为true，会提前乘好rgb*a，不需要再次乘alpha\n   */\n  function Texture(miniGL) {\n    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(this, Texture);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(this, "premultiplyAlpha", true);\n\n    this.miniGL = miniGL;\n    this.canvas = document.createElement(\'canvas\');\n    this.ctx = this.canvas.getContext(\'2d\');\n  }\n\n  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(Texture, [{\n    key: "lg2",\n    value: function lg2(n) {\n      return Math.log(n) / Math.log(2);\n    }\n  }, {\n    key: "create",\n    value: function create(_ref) {\n      var image = _ref.image,\n          rect = _ref.rect,\n          _ref$reverseY = _ref.reverseY,\n          reverseY = _ref$reverseY === void 0 ? true : _ref$reverseY,\n          name = _ref.name;\n\n      if (rect) {\n        this.canvas.width = rect.width;\n        this.canvas.height = rect.height;\n        this.canvas.setAttribute(\'data-name\', name);\n        this.ctx.drawImage(image, -rect.x, -rect.y);\n        image = this.canvas;\n      }\n\n      var gl = this.miniGL.gl;\n      var texture = gl.createTexture(); // 挂载当前的空材质开始操作\n\n      gl.bindTexture(gl.TEXTURE_2D, texture); // 这个在读取图片数据前使用\n\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha); // 灌入图形数据\n\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image); // 反转y轴\n\n      if (reverseY) {\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, reverseY);\n      } // 支持缩小纹理\n\n\n      gl.generateMipmap(gl.TEXTURE_2D); // 放大缩小的时候都使用线性插值，减少颗粒感\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); // 取消挂载\n\n      gl.bindTexture(gl.TEXTURE_2D, null);\n      this.webglTexture = texture;\n      return texture;\n    }\n    /**\n     * 更新材质数据\n     * @param {*} texture\n     * @param {*} image\n     */\n\n  }, {\n    key: "update",\n    value: function update(texture, image) {\n      var gl = this.miniGL.gl;\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n    }\n  }]);\n\n  return Texture;\n}();\n\n;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Texture);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzc2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBTUE7QUFDRjtBQUNKO0FBQ0E7QUFFSSxtQkFBWUMsTUFBWixFQUFvQjtBQUFBOztBQUFBLHlIQURELElBQ0M7O0FBQ2hCLFNBQUtBLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtDLE1BQUwsR0FBY0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLFFBQXZCLENBQWQ7QUFDQSxTQUFLQyxHQUFMLEdBQVcsS0FBS0gsTUFBTCxDQUFZSSxVQUFaLENBQXVCLElBQXZCLENBQVg7QUFDSDs7OztXQUNELGFBQUlDLENBQUosRUFBTztBQUNULGFBQU9DLElBQUksQ0FBQ0MsR0FBTCxDQUFTRixDQUFULElBQWNDLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsQ0FBckI7QUFDQTs7O1dBQ0Usc0JBQTZDO0FBQUEsVUFBckNDLEtBQXFDLFFBQXJDQSxLQUFxQztBQUFBLFVBQTlCQyxJQUE4QixRQUE5QkEsSUFBOEI7QUFBQSwrQkFBeEJDLFFBQXdCO0FBQUEsVUFBeEJBLFFBQXdCLDhCQUFiLElBQWE7QUFBQSxVQUFQQyxJQUFPLFFBQVBBLElBQU87O0FBQ3pDLFVBQUlGLElBQUosRUFBVTtBQUNOLGFBQUtULE1BQUwsQ0FBWVksS0FBWixHQUFvQkgsSUFBSSxDQUFDRyxLQUF6QjtBQUNBLGFBQUtaLE1BQUwsQ0FBWWEsTUFBWixHQUFxQkosSUFBSSxDQUFDSSxNQUExQjtBQUNBLGFBQUtiLE1BQUwsQ0FBWWMsWUFBWixDQUF5QixXQUF6QixFQUFzQ0gsSUFBdEM7QUFDQSxhQUFLUixHQUFMLENBQVNZLFNBQVQsQ0FBbUJQLEtBQW5CLEVBQTBCLENBQUNDLElBQUksQ0FBQ08sQ0FBaEMsRUFBbUMsQ0FBQ1AsSUFBSSxDQUFDUSxDQUF6QztBQUNBVCxRQUFBQSxLQUFLLEdBQUcsS0FBS1IsTUFBYjtBQUNIOztBQUNELFVBQU1rQixFQUFFLEdBQUcsS0FBS25CLE1BQUwsQ0FBWW1CLEVBQXZCO0FBQ0EsVUFBTUMsT0FBTyxHQUFHRCxFQUFFLENBQUNFLGFBQUgsRUFBaEIsQ0FUeUMsQ0FXekM7O0FBQ0FGLE1BQUFBLEVBQUUsQ0FBQ0csV0FBSCxDQUFlSCxFQUFFLENBQUNJLFVBQWxCLEVBQThCSCxPQUE5QixFQVp5QyxDQWF6Qzs7QUFDQUQsTUFBQUEsRUFBRSxDQUFDSyxXQUFILENBQWVMLEVBQUUsQ0FBQ00sOEJBQWxCLEVBQWtELEtBQUtDLGdCQUF2RCxFQWR5QyxDQWV6Qzs7QUFDQVAsTUFBQUEsRUFBRSxDQUFDUSxVQUFILENBQWNSLEVBQUUsQ0FBQ0ksVUFBakIsRUFBNkIsQ0FBN0IsRUFBZ0NKLEVBQUUsQ0FBQ1MsSUFBbkMsRUFBeUNULEVBQUUsQ0FBQ1MsSUFBNUMsRUFBa0RULEVBQUUsQ0FBQ1UsYUFBckQsRUFBb0VwQixLQUFwRSxFQWhCeUMsQ0FpQnpDOztBQUNBLFVBQUlFLFFBQUosRUFBYztBQUNWUSxRQUFBQSxFQUFFLENBQUNLLFdBQUgsQ0FBZUwsRUFBRSxDQUFDVyxtQkFBbEIsRUFBdUNuQixRQUF2QztBQUNILE9BcEJ3QyxDQXNCekM7OztBQUNBUSxNQUFBQSxFQUFFLENBQUNZLGNBQUgsQ0FBa0JaLEVBQUUsQ0FBQ0ksVUFBckIsRUF2QnlDLENBeUJ6Qzs7QUFDQUosTUFBQUEsRUFBRSxDQUFDYSxhQUFILENBQWlCYixFQUFFLENBQUNJLFVBQXBCLEVBQWdDSixFQUFFLENBQUNjLGtCQUFuQyxFQUF1RGQsRUFBRSxDQUFDZSxNQUExRDtBQUNBZixNQUFBQSxFQUFFLENBQUNhLGFBQUgsQ0FBaUJiLEVBQUUsQ0FBQ0ksVUFBcEIsRUFBZ0NKLEVBQUUsQ0FBQ2dCLGtCQUFuQyxFQUF1RGhCLEVBQUUsQ0FBQ2lCLG9CQUExRDtBQUNBakIsTUFBQUEsRUFBRSxDQUFDYSxhQUFILENBQWlCYixFQUFFLENBQUNJLFVBQXBCLEVBQWdDSixFQUFFLENBQUNrQixjQUFuQyxFQUFtRGxCLEVBQUUsQ0FBQ21CLGFBQXREO0FBQ0FuQixNQUFBQSxFQUFFLENBQUNhLGFBQUgsQ0FBaUJiLEVBQUUsQ0FBQ0ksVUFBcEIsRUFBZ0NKLEVBQUUsQ0FBQ29CLGNBQW5DLEVBQW1EcEIsRUFBRSxDQUFDbUIsYUFBdEQsRUE3QnlDLENBK0J6Qzs7QUFDQW5CLE1BQUFBLEVBQUUsQ0FBQ0csV0FBSCxDQUFlSCxFQUFFLENBQUNJLFVBQWxCLEVBQThCLElBQTlCO0FBQ0EsV0FBS2lCLFlBQUwsR0FBb0JwQixPQUFwQjtBQUNBLGFBQU9BLE9BQVA7QUFDSDtBQUVEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7Ozs7V0FDSSxnQkFBT0EsT0FBUCxFQUFnQlgsS0FBaEIsRUFBdUI7QUFDbkIsVUFBTVUsRUFBRSxHQUFHLEtBQUtuQixNQUFMLENBQVltQixFQUF2QjtBQUNBQSxNQUFBQSxFQUFFLENBQUNHLFdBQUgsQ0FBZUgsRUFBRSxDQUFDSSxVQUFsQixFQUE4QkgsT0FBOUI7QUFDQUQsTUFBQUEsRUFBRSxDQUFDUSxVQUFILENBQWNSLEVBQUUsQ0FBQ0ksVUFBakIsRUFBNkIsQ0FBN0IsRUFBZ0NKLEVBQUUsQ0FBQ1MsSUFBbkMsRUFBeUNULEVBQUUsQ0FBQ1MsSUFBNUMsRUFBa0RULEVBQUUsQ0FBQ1UsYUFBckQsRUFBb0VwQixLQUFwRTtBQUNIOzs7Ozs7QUFDSjtBQUNELGlFQUFlVixPQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vTWluaUdMLy4vc3JjL1RleHR1cmUvVGV4dHVyZS5qcz8xOGNkIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFRleHR1cmUge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0g5piv5ZCm5pSv5oyB6aKE5LmY77yM6buY6K6k5Li6dHJ1Ze+8jOS8muaPkOWJjeS5mOWlvXJnYiph77yM5LiN6ZyA6KaB5YaN5qyh5LmYYWxwaGFcbiAgICAgKi9cbiAgICBwcmVtdWx0aXBseUFscGhhID0gdHJ1ZTtcbiAgICBjb25zdHJ1Y3RvcihtaW5pR0wpIHtcbiAgICAgICAgdGhpcy5taW5pR0wgPSBtaW5pR0w7XG4gICAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB9XG4gICAgbGcyKG4pIHtcblx0XHRyZXR1cm4gTWF0aC5sb2cobikgLyBNYXRoLmxvZygyKTtcblx0fVxuICAgIGNyZWF0ZSh7aW1hZ2UsIHJlY3QsIHJldmVyc2VZID0gdHJ1ZSwgbmFtZX0pIHtcbiAgICAgICAgaWYgKHJlY3QpIHtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gcmVjdC53aWR0aDtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHJlY3QuaGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy5jYW52YXMuc2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnLCBuYW1lKTtcbiAgICAgICAgICAgIHRoaXMuY3R4LmRyYXdJbWFnZShpbWFnZSwgLXJlY3QueCwgLXJlY3QueSk7XG4gICAgICAgICAgICBpbWFnZSA9IHRoaXMuY2FudmFzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5taW5pR0wuZ2w7XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cbiAgICAgICAgLy8g5oyC6L295b2T5YmN55qE56m65p2Q6LSo5byA5aeL5pON5L2cXG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuICAgICAgICAvLyDov5nkuKrlnKjor7vlj5blm77niYfmlbDmja7liY3kvb/nlKhcbiAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCB0aGlzLnByZW11bHRpcGx5QWxwaGEpO1xuICAgICAgICAvLyDngYzlhaXlm77lvaLmlbDmja5cbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBpbWFnZSk7XG4gICAgICAgIC8vIOWPjei9rHnovbRcbiAgICAgICAgaWYgKHJldmVyc2VZKSB7XG4gICAgICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCByZXZlcnNlWSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDmlK/mjIHnvKnlsI/nurnnkIZcbiAgICAgICAgZ2wuZ2VuZXJhdGVNaXBtYXAoZ2wuVEVYVFVSRV8yRCk7XG5cbiAgICAgICAgLy8g5pS+5aSn57yp5bCP55qE5pe25YCZ6YO95L2/55So57q/5oCn5o+S5YC877yM5YeP5bCR6aKX57KS5oSfXG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSX01JUE1BUF9MSU5FQVIpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG5cbiAgICAgICAgLy8g5Y+W5raI5oyC6L29XG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuICAgICAgICB0aGlzLndlYmdsVGV4dHVyZSA9IHRleHR1cmU7XG4gICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOabtOaWsOadkOi0qOaVsOaNrlxuICAgICAqIEBwYXJhbSB7Kn0gdGV4dHVyZVxuICAgICAqIEBwYXJhbSB7Kn0gaW1hZ2VcbiAgICAgKi9cbiAgICB1cGRhdGUodGV4dHVyZSwgaW1hZ2UpIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLm1pbmlHTC5nbDtcbiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XG4gICAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgaW1hZ2UpO1xuICAgIH1cbn07XG5leHBvcnQgZGVmYXVsdCBUZXh0dXJlO1xuIl0sIm5hbWVzIjpbIlRleHR1cmUiLCJtaW5pR0wiLCJjYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjdHgiLCJnZXRDb250ZXh0IiwibiIsIk1hdGgiLCJsb2ciLCJpbWFnZSIsInJlY3QiLCJyZXZlcnNlWSIsIm5hbWUiLCJ3aWR0aCIsImhlaWdodCIsInNldEF0dHJpYnV0ZSIsImRyYXdJbWFnZSIsIngiLCJ5IiwiZ2wiLCJ0ZXh0dXJlIiwiY3JlYXRlVGV4dHVyZSIsImJpbmRUZXh0dXJlIiwiVEVYVFVSRV8yRCIsInBpeGVsU3RvcmVpIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwicHJlbXVsdGlwbHlBbHBoYSIsInRleEltYWdlMkQiLCJSR0JBIiwiVU5TSUdORURfQllURSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJnZW5lcmF0ZU1pcG1hcCIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX01BR19GSUxURVIiLCJMSU5FQVIiLCJURVhUVVJFX01JTl9GSUxURVIiLCJMSU5FQVJfTUlQTUFQX0xJTkVBUiIsIlRFWFRVUkVfV1JBUF9TIiwiQ0xBTVBfVE9fRURHRSIsIlRFWFRVUkVfV1JBUF9UIiwid2ViZ2xUZXh0dXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///776\n')},816:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ loadTexture)\n/* harmony export */ });\n/* harmony import */ var _Loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(905);\n\nfunction loadTexture(gl, imagePath) {\n  function lg2(n) {\n    return Math.log(n) / Math.log(2);\n  }\n\n  return (0,_Loader__WEBPACK_IMPORTED_MODULE_0__.loadImage)(imagePath).then(function (image) {\n    var texture = gl.createTexture(); // 挂载当前的空材质开始操作\n\n    gl.bindTexture(gl.TEXTURE_2D, texture); // 灌入图形数据\n\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image); // 反转y轴\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1); // 支持放大缩小渐进加载和插值算法，整数倍情况\n\n    if (lg2(image.width) === 0 && lg2(image.height) === 0) {\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\n      gl.generateMipmap(gl.TEXTURE_2D);\n    } else {\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    } // 取消挂载\n\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return texture;\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODE2LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNlLFNBQVNDLFdBQVQsQ0FBcUJDLEVBQXJCLEVBQXlCQyxTQUF6QixFQUFvQztBQUNsRCxXQUFTQyxHQUFULENBQWFDLENBQWIsRUFBZ0I7QUFDZixXQUFPQyxJQUFJLENBQUNDLEdBQUwsQ0FBU0YsQ0FBVCxJQUFjQyxJQUFJLENBQUNDLEdBQUwsQ0FBUyxDQUFULENBQXJCO0FBQ0E7O0FBQ0QsU0FBT1Asa0RBQVMsQ0FBQ0csU0FBRCxDQUFULENBQXFCSyxJQUFyQixDQUEwQixVQUFBQyxLQUFLLEVBQUU7QUFDakMsUUFBTUMsT0FBTyxHQUFHUixFQUFFLENBQUNTLGFBQUgsRUFBaEIsQ0FEaUMsQ0FHakM7O0FBQ0FULElBQUFBLEVBQUUsQ0FBQ1UsV0FBSCxDQUFlVixFQUFFLENBQUNXLFVBQWxCLEVBQThCSCxPQUE5QixFQUppQyxDQUtqQzs7QUFDQVIsSUFBQUEsRUFBRSxDQUFDWSxVQUFILENBQWNaLEVBQUUsQ0FBQ1csVUFBakIsRUFBNkIsQ0FBN0IsRUFBZ0NYLEVBQUUsQ0FBQ2EsSUFBbkMsRUFBeUNiLEVBQUUsQ0FBQ2EsSUFBNUMsRUFBa0RiLEVBQUUsQ0FBQ2MsYUFBckQsRUFBb0VQLEtBQXBFLEVBTmlDLENBT2pDOztBQUNBUCxJQUFBQSxFQUFFLENBQUNlLFdBQUgsQ0FBZWYsRUFBRSxDQUFDZ0IsbUJBQWxCLEVBQXVDLENBQXZDLEVBUmlDLENBVWpDOztBQUNBLFFBQUlkLEdBQUcsQ0FBQ0ssS0FBSyxDQUFDVSxLQUFQLENBQUgsS0FBcUIsQ0FBckIsSUFBMEJmLEdBQUcsQ0FBQ0ssS0FBSyxDQUFDVyxNQUFQLENBQUgsS0FBc0IsQ0FBcEQsRUFBdUQ7QUFDbkRsQixNQUFBQSxFQUFFLENBQUNtQixhQUFILENBQWlCbkIsRUFBRSxDQUFDVyxVQUFwQixFQUFnQ1gsRUFBRSxDQUFDb0Isa0JBQW5DLEVBQXVEcEIsRUFBRSxDQUFDcUIsTUFBMUQ7QUFDQXJCLE1BQUFBLEVBQUUsQ0FBQ21CLGFBQUgsQ0FBaUJuQixFQUFFLENBQUNXLFVBQXBCLEVBQWdDWCxFQUFFLENBQUNzQixrQkFBbkMsRUFBdUR0QixFQUFFLENBQUN1QixxQkFBMUQ7QUFDQXZCLE1BQUFBLEVBQUUsQ0FBQ3dCLGNBQUgsQ0FBa0J4QixFQUFFLENBQUNXLFVBQXJCO0FBQ0gsS0FKRCxNQUlPO0FBQ0hYLE1BQUFBLEVBQUUsQ0FBQ21CLGFBQUgsQ0FBaUJuQixFQUFFLENBQUNXLFVBQXBCLEVBQWdDWCxFQUFFLENBQUNvQixrQkFBbkMsRUFBdURwQixFQUFFLENBQUNxQixNQUExRDtBQUNBckIsTUFBQUEsRUFBRSxDQUFDbUIsYUFBSCxDQUFpQm5CLEVBQUUsQ0FBQ1csVUFBcEIsRUFBZ0NYLEVBQUUsQ0FBQ3NCLGtCQUFuQyxFQUF1RHRCLEVBQUUsQ0FBQ3FCLE1BQTFEO0FBQ0FyQixNQUFBQSxFQUFFLENBQUNtQixhQUFILENBQWlCbkIsRUFBRSxDQUFDVyxVQUFwQixFQUFnQ1gsRUFBRSxDQUFDeUIsY0FBbkMsRUFBbUR6QixFQUFFLENBQUMwQixhQUF0RDtBQUNBMUIsTUFBQUEsRUFBRSxDQUFDbUIsYUFBSCxDQUFpQm5CLEVBQUUsQ0FBQ1csVUFBcEIsRUFBZ0NYLEVBQUUsQ0FBQzJCLGNBQW5DLEVBQW1EM0IsRUFBRSxDQUFDMEIsYUFBdEQ7QUFDSCxLQXBCZ0MsQ0FzQmpDOzs7QUFDQTFCLElBQUFBLEVBQUUsQ0FBQ1UsV0FBSCxDQUFlVixFQUFFLENBQUNXLFVBQWxCLEVBQThCLElBQTlCO0FBQ0EsV0FBT0gsT0FBUDtBQUNILEdBekJHLENBQVA7QUEwQkEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaW5pR0wvLi9zcmMvVXRpbHMvTG9hZFRleHR1cmUuanM/YjkyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2xvYWRJbWFnZX0gZnJvbSAnLi9Mb2FkZXInO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9hZFRleHR1cmUoZ2wsIGltYWdlUGF0aCkge1xuXHRmdW5jdGlvbiBsZzIobikge1xuXHRcdHJldHVybiBNYXRoLmxvZyhuKSAvIE1hdGgubG9nKDIpO1xuXHR9XG5cdHJldHVybiBsb2FkSW1hZ2UoaW1hZ2VQYXRoKS50aGVuKGltYWdlPT57XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cbiAgICAgICAgLy8g5oyC6L295b2T5YmN55qE56m65p2Q6LSo5byA5aeL5pON5L2cXG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuICAgICAgICAvLyDngYzlhaXlm77lvaLmlbDmja5cbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBpbWFnZSk7XG4gICAgICAgIC8vIOWPjei9rHnovbRcbiAgICAgICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgMSk7XG5cbiAgICAgICAgLy8g5pSv5oyB5pS+5aSn57yp5bCP5riQ6L+b5Yqg6L295ZKM5o+S5YC8566X5rOV77yM5pW05pWw5YCN5oOF5Ya1XG4gICAgICAgIGlmIChsZzIoaW1hZ2Uud2lkdGgpID09PSAwICYmIGxnMihpbWFnZS5oZWlnaHQpID09PSAwKSB7XG4gICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVJfTUlQTUFQX05FQVJFU1QpO1xuICAgICAgICAgICAgZ2wuZ2VuZXJhdGVNaXBtYXAoZ2wuVEVYVFVSRV8yRCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOWPlua2iOaMgui9vVxuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcbiAgICAgICAgcmV0dXJuIHRleHR1cmU7XG4gICAgfSk7XG59XG4iXSwibmFtZXMiOlsibG9hZEltYWdlIiwibG9hZFRleHR1cmUiLCJnbCIsImltYWdlUGF0aCIsImxnMiIsIm4iLCJNYXRoIiwibG9nIiwidGhlbiIsImltYWdlIiwidGV4dHVyZSIsImNyZWF0ZVRleHR1cmUiLCJiaW5kVGV4dHVyZSIsIlRFWFRVUkVfMkQiLCJ0ZXhJbWFnZTJEIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJ3aWR0aCIsImhlaWdodCIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX01BR19GSUxURVIiLCJMSU5FQVIiLCJURVhUVVJFX01JTl9GSUxURVIiLCJMSU5FQVJfTUlQTUFQX05FQVJFU1QiLCJnZW5lcmF0ZU1pcG1hcCIsIlRFWFRVUkVfV1JBUF9TIiwiQ0xBTVBfVE9fRURHRSIsIlRFWFRVUkVfV1JBUF9UIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///816\n')},905:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "load": () => (/* binding */ load),\n/* harmony export */   "loadImage": () => (/* binding */ loadImage)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(942);\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * 加载资源\n * @param  {} url\n * @param  {} option={}\n */\nfunction load(url) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (option.type === \'image\') {\n    return loadImage(url);\n  }\n\n  option = Object.assign({\n    method: \'GET\',\n    headers: {}\n  }, option);\n  return fetch(url, _objectSpread({}, option)).then(function (res) {\n    if (option.responseType) {\n      return res[option.responseType]();\n    }\n\n    return res.json();\n  });\n}\n/**\n * 加载图片\n * @param  {} url\n */\n\n\nfunction loadImage(url) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n    image.src = url;\n\n    image.onload = function () {\n      resolve(image);\n    };\n\n    image.onerror = function (e) {\n      reject(e);\n    };\n  });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTA1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxJQUFULENBQWNDLEdBQWQsRUFBZ0M7QUFBQSxNQUFiQyxNQUFhLHVFQUFKLEVBQUk7O0FBQzVCLE1BQUlBLE1BQU0sQ0FBQ0MsSUFBUCxLQUFnQixPQUFwQixFQUE2QjtBQUN6QixXQUFPQyxTQUFTLENBQUNILEdBQUQsQ0FBaEI7QUFDSDs7QUFDREMsRUFBQUEsTUFBTSxHQUFHRyxNQUFNLENBQUNDLE1BQVAsQ0FBYztBQUNuQkMsSUFBQUEsTUFBTSxFQUFFLEtBRFc7QUFFbkJDLElBQUFBLE9BQU8sRUFBRTtBQUZVLEdBQWQsRUFHTk4sTUFITSxDQUFUO0FBSUEsU0FBT08sS0FBSyxDQUFDUixHQUFELG9CQUFVQyxNQUFWLEVBQUwsQ0FBd0JRLElBQXhCLENBQTZCLFVBQUFDLEdBQUcsRUFBRTtBQUNyQyxRQUFJVCxNQUFNLENBQUNVLFlBQVgsRUFBeUI7QUFDckIsYUFBT0QsR0FBRyxDQUFDVCxNQUFNLENBQUNVLFlBQVIsQ0FBSCxFQUFQO0FBQ0g7O0FBQ0QsV0FBT0QsR0FBRyxDQUFDRSxJQUFKLEVBQVA7QUFDSCxHQUxNLENBQVA7QUFNSDtBQUNEO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxTQUFTVCxTQUFULENBQW1CSCxHQUFuQixFQUF3QjtBQUNyQixTQUFPLElBQUlhLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBbUI7QUFDakMsUUFBSUMsS0FBSyxHQUFHLElBQUlDLEtBQUosRUFBWjtBQUNBRCxJQUFBQSxLQUFLLENBQUNFLEdBQU4sR0FBWWxCLEdBQVo7O0FBQ0FnQixJQUFBQSxLQUFLLENBQUNHLE1BQU4sR0FBZSxZQUFJO0FBQ2ZMLE1BQUFBLE9BQU8sQ0FBQ0UsS0FBRCxDQUFQO0FBQ0gsS0FGRDs7QUFHQUEsSUFBQUEsS0FBSyxDQUFDSSxPQUFOLEdBQWdCLFVBQUNDLENBQUQsRUFBSztBQUNqQk4sTUFBQUEsTUFBTSxDQUFDTSxDQUFELENBQU47QUFDSCxLQUZEO0FBR0osR0FUTSxDQUFQO0FBVUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaW5pR0wvLi9zcmMvVXRpbHMvTG9hZGVyLmpzPzhlZTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDliqDovb3otYTmupBcbiAqIEBwYXJhbSAge30gdXJsXG4gKiBAcGFyYW0gIHt9IG9wdGlvbj17fVxuICovXG5mdW5jdGlvbiBsb2FkKHVybCwgb3B0aW9uID0ge30pIHtcbiAgICBpZiAob3B0aW9uLnR5cGUgPT09ICdpbWFnZScpIHtcbiAgICAgICAgcmV0dXJuIGxvYWRJbWFnZSh1cmwpO1xuICAgIH1cbiAgICBvcHRpb24gPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgaGVhZGVyczoge31cbiAgICB9LCBvcHRpb24pO1xuICAgIHJldHVybiBmZXRjaCh1cmwsIHsuLi5vcHRpb259KS50aGVuKHJlcz0+e1xuICAgICAgICBpZiAob3B0aW9uLnJlc3BvbnNlVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc1tvcHRpb24ucmVzcG9uc2VUeXBlXSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgIH0pO1xufVxuLyoqXG4gKiDliqDovb3lm77niYdcbiAqIEBwYXJhbSAge30gdXJsXG4gKi9cbmZ1bmN0aW9uIGxvYWRJbWFnZSh1cmwpIHtcbiAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+e1xuICAgICAgICBsZXQgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaW1hZ2Uuc3JjID0gdXJsO1xuICAgICAgICBpbWFnZS5vbmxvYWQgPSAoKT0+e1xuICAgICAgICAgICAgcmVzb2x2ZShpbWFnZSk7XG4gICAgICAgIH07XG4gICAgICAgIGltYWdlLm9uZXJyb3IgPSAoZSk9PntcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfTtcbiAgIH0pO1xufVxuZXhwb3J0IHtcbiAgICBsb2FkLCBsb2FkSW1hZ2Vcbn07XG4iXSwibmFtZXMiOlsibG9hZCIsInVybCIsIm9wdGlvbiIsInR5cGUiLCJsb2FkSW1hZ2UiLCJPYmplY3QiLCJhc3NpZ24iLCJtZXRob2QiLCJoZWFkZXJzIiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwicmVzcG9uc2VUeXBlIiwianNvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiaW1hZ2UiLCJJbWFnZSIsInNyYyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///905\n')},88:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(905);\n\nvar Util = {\n  Loader: _Loader__WEBPACK_IMPORTED_MODULE_0__\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Util);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUNBO0FBQ0EsSUFBTUMsSUFBSSxHQUFHO0FBQ1RELEVBQUFBLE1BQU0sRUFBTkEsb0NBQU1BO0FBREcsQ0FBYjtBQUdBLGlFQUFlQyxJQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vTWluaUdMLy4vc3JjL1V0aWxzL2luZGV4LmpzP2M2NzMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgKiBhcyBMb2FkZXIgZnJvbSAnLi9Mb2FkZXInO1xuY29uc3QgVXRpbCA9IHtcbiAgICBMb2FkZXJcbn07XG5leHBvcnQgZGVmYXVsdCBVdGlsO1xuIl0sIm5hbWVzIjpbIkxvYWRlciIsIlV0aWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///88\n')},594:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ src)\n});\n\n// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/mat2.js\nvar mat2_namespaceObject = {};\n__webpack_require__.r(mat2_namespaceObject);\n__webpack_require__.d(mat2_namespaceObject, {\n  "LDU": () => (LDU),\n  "add": () => (add),\n  "adjoint": () => (adjoint),\n  "clone": () => (clone),\n  "copy": () => (copy),\n  "create": () => (create),\n  "determinant": () => (determinant),\n  "equals": () => (equals),\n  "exactEquals": () => (exactEquals),\n  "frob": () => (frob),\n  "fromRotation": () => (fromRotation),\n  "fromScaling": () => (fromScaling),\n  "fromValues": () => (fromValues),\n  "identity": () => (identity),\n  "invert": () => (invert),\n  "mul": () => (mul),\n  "multiply": () => (multiply),\n  "multiplyScalar": () => (multiplyScalar),\n  "multiplyScalarAndAdd": () => (multiplyScalarAndAdd),\n  "rotate": () => (rotate),\n  "scale": () => (scale),\n  "set": () => (set),\n  "str": () => (str),\n  "sub": () => (sub),\n  "subtract": () => (subtract),\n  "transpose": () => (transpose)\n});\n\n// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/mat2d.js\nvar mat2d_namespaceObject = {};\n__webpack_require__.r(mat2d_namespaceObject);\n__webpack_require__.d(mat2d_namespaceObject, {\n  "add": () => (mat2d_add),\n  "clone": () => (mat2d_clone),\n  "copy": () => (mat2d_copy),\n  "create": () => (mat2d_create),\n  "determinant": () => (mat2d_determinant),\n  "equals": () => (mat2d_equals),\n  "exactEquals": () => (mat2d_exactEquals),\n  "frob": () => (mat2d_frob),\n  "fromRotation": () => (mat2d_fromRotation),\n  "fromScaling": () => (mat2d_fromScaling),\n  "fromTranslation": () => (fromTranslation),\n  "fromValues": () => (mat2d_fromValues),\n  "identity": () => (mat2d_identity),\n  "invert": () => (mat2d_invert),\n  "mul": () => (mat2d_mul),\n  "multiply": () => (mat2d_multiply),\n  "multiplyScalar": () => (mat2d_multiplyScalar),\n  "multiplyScalarAndAdd": () => (mat2d_multiplyScalarAndAdd),\n  "rotate": () => (mat2d_rotate),\n  "scale": () => (mat2d_scale),\n  "set": () => (mat2d_set),\n  "str": () => (mat2d_str),\n  "sub": () => (mat2d_sub),\n  "subtract": () => (mat2d_subtract),\n  "translate": () => (translate)\n});\n\n// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/mat4.js\nvar mat4_namespaceObject = {};\n__webpack_require__.r(mat4_namespaceObject);\n__webpack_require__.d(mat4_namespaceObject, {\n  "add": () => (mat4_add),\n  "adjoint": () => (mat4_adjoint),\n  "clone": () => (mat4_clone),\n  "copy": () => (mat4_copy),\n  "create": () => (mat4_create),\n  "determinant": () => (mat4_determinant),\n  "equals": () => (mat4_equals),\n  "exactEquals": () => (mat4_exactEquals),\n  "frob": () => (mat4_frob),\n  "fromQuat": () => (fromQuat),\n  "fromQuat2": () => (fromQuat2),\n  "fromRotation": () => (mat4_fromRotation),\n  "fromRotationTranslation": () => (fromRotationTranslation),\n  "fromRotationTranslationScale": () => (fromRotationTranslationScale),\n  "fromRotationTranslationScaleOrigin": () => (fromRotationTranslationScaleOrigin),\n  "fromScaling": () => (mat4_fromScaling),\n  "fromTranslation": () => (mat4_fromTranslation),\n  "fromValues": () => (mat4_fromValues),\n  "fromXRotation": () => (fromXRotation),\n  "fromYRotation": () => (fromYRotation),\n  "fromZRotation": () => (fromZRotation),\n  "frustum": () => (frustum),\n  "getRotation": () => (getRotation),\n  "getScaling": () => (getScaling),\n  "getTranslation": () => (getTranslation),\n  "identity": () => (mat4_identity),\n  "invert": () => (mat4_invert),\n  "lookAt": () => (lookAt),\n  "mul": () => (mat4_mul),\n  "multiply": () => (mat4_multiply),\n  "multiplyScalar": () => (mat4_multiplyScalar),\n  "multiplyScalarAndAdd": () => (mat4_multiplyScalarAndAdd),\n  "ortho": () => (ortho),\n  "perspective": () => (perspective),\n  "perspectiveFromFieldOfView": () => (perspectiveFromFieldOfView),\n  "rotate": () => (mat4_rotate),\n  "rotateX": () => (rotateX),\n  "rotateY": () => (rotateY),\n  "rotateZ": () => (rotateZ),\n  "scale": () => (mat4_scale),\n  "set": () => (mat4_set),\n  "str": () => (mat4_str),\n  "sub": () => (mat4_sub),\n  "subtract": () => (mat4_subtract),\n  "targetTo": () => (targetTo),\n  "translate": () => (mat4_translate),\n  "transpose": () => (mat4_transpose)\n});\n\n// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/vec3.js\nvar vec3_namespaceObject = {};\n__webpack_require__.r(vec3_namespaceObject);\n__webpack_require__.d(vec3_namespaceObject, {\n  "add": () => (vec3_add),\n  "angle": () => (angle),\n  "bezier": () => (bezier),\n  "ceil": () => (ceil),\n  "clone": () => (vec3_clone),\n  "copy": () => (vec3_copy),\n  "create": () => (vec3_create),\n  "cross": () => (cross),\n  "dist": () => (dist),\n  "distance": () => (distance),\n  "div": () => (div),\n  "divide": () => (divide),\n  "dot": () => (vec3_dot),\n  "equals": () => (vec3_equals),\n  "exactEquals": () => (vec3_exactEquals),\n  "floor": () => (floor),\n  "forEach": () => (forEach),\n  "fromValues": () => (vec3_fromValues),\n  "hermite": () => (hermite),\n  "inverse": () => (inverse),\n  "len": () => (len),\n  "length": () => (vec3_length),\n  "lerp": () => (lerp),\n  "max": () => (max),\n  "min": () => (min),\n  "mul": () => (vec3_mul),\n  "multiply": () => (vec3_multiply),\n  "negate": () => (negate),\n  "normalize": () => (vec3_normalize),\n  "random": () => (random),\n  "rotateX": () => (vec3_rotateX),\n  "rotateY": () => (vec3_rotateY),\n  "rotateZ": () => (vec3_rotateZ),\n  "round": () => (round),\n  "scale": () => (vec3_scale),\n  "scaleAndAdd": () => (scaleAndAdd),\n  "set": () => (vec3_set),\n  "sqrDist": () => (sqrDist),\n  "sqrLen": () => (sqrLen),\n  "squaredDistance": () => (squaredDistance),\n  "squaredLength": () => (squaredLength),\n  "str": () => (vec3_str),\n  "sub": () => (vec3_sub),\n  "subtract": () => (vec3_subtract),\n  "transformMat3": () => (transformMat3),\n  "transformMat4": () => (transformMat4),\n  "transformQuat": () => (transformQuat),\n  "zero": () => (zero)\n});\n\n// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/vec4.js\nvar vec4_namespaceObject = {};\n__webpack_require__.r(vec4_namespaceObject);\n__webpack_require__.d(vec4_namespaceObject, {\n  "add": () => (vec4_add),\n  "ceil": () => (vec4_ceil),\n  "clone": () => (vec4_clone),\n  "copy": () => (vec4_copy),\n  "create": () => (vec4_create),\n  "cross": () => (vec4_cross),\n  "dist": () => (vec4_dist),\n  "distance": () => (vec4_distance),\n  "div": () => (vec4_div),\n  "divide": () => (vec4_divide),\n  "dot": () => (dot),\n  "equals": () => (vec4_equals),\n  "exactEquals": () => (vec4_exactEquals),\n  "floor": () => (vec4_floor),\n  "forEach": () => (vec4_forEach),\n  "fromValues": () => (vec4_fromValues),\n  "inverse": () => (vec4_inverse),\n  "len": () => (vec4_len),\n  "length": () => (vec4_length),\n  "lerp": () => (vec4_lerp),\n  "max": () => (vec4_max),\n  "min": () => (vec4_min),\n  "mul": () => (vec4_mul),\n  "multiply": () => (vec4_multiply),\n  "negate": () => (vec4_negate),\n  "normalize": () => (vec4_normalize),\n  "random": () => (vec4_random),\n  "round": () => (vec4_round),\n  "scale": () => (vec4_scale),\n  "scaleAndAdd": () => (vec4_scaleAndAdd),\n  "set": () => (vec4_set),\n  "sqrDist": () => (vec4_sqrDist),\n  "sqrLen": () => (vec4_sqrLen),\n  "squaredDistance": () => (vec4_squaredDistance),\n  "squaredLength": () => (vec4_squaredLength),\n  "str": () => (vec4_str),\n  "sub": () => (vec4_sub),\n  "subtract": () => (vec4_subtract),\n  "transformMat4": () => (vec4_transformMat4),\n  "transformQuat": () => (vec4_transformQuat),\n  "zero": () => (vec4_zero)\n});\n\n// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/quat.js\nvar quat_namespaceObject = {};\n__webpack_require__.r(quat_namespaceObject);\n__webpack_require__.d(quat_namespaceObject, {\n  "add": () => (quat_add),\n  "calculateW": () => (calculateW),\n  "clone": () => (quat_clone),\n  "conjugate": () => (conjugate),\n  "copy": () => (quat_copy),\n  "create": () => (quat_create),\n  "dot": () => (quat_dot),\n  "equals": () => (quat_equals),\n  "exactEquals": () => (quat_exactEquals),\n  "exp": () => (exp),\n  "fromEuler": () => (fromEuler),\n  "fromMat3": () => (fromMat3),\n  "fromValues": () => (quat_fromValues),\n  "getAngle": () => (getAngle),\n  "getAxisAngle": () => (getAxisAngle),\n  "identity": () => (quat_identity),\n  "invert": () => (quat_invert),\n  "len": () => (quat_len),\n  "length": () => (quat_length),\n  "lerp": () => (quat_lerp),\n  "ln": () => (ln),\n  "mul": () => (quat_mul),\n  "multiply": () => (quat_multiply),\n  "normalize": () => (quat_normalize),\n  "pow": () => (pow),\n  "random": () => (quat_random),\n  "rotateX": () => (quat_rotateX),\n  "rotateY": () => (quat_rotateY),\n  "rotateZ": () => (quat_rotateZ),\n  "rotationTo": () => (rotationTo),\n  "scale": () => (quat_scale),\n  "set": () => (quat_set),\n  "setAxes": () => (setAxes),\n  "setAxisAngle": () => (setAxisAngle),\n  "slerp": () => (slerp),\n  "sqlerp": () => (sqlerp),\n  "sqrLen": () => (quat_sqrLen),\n  "squaredLength": () => (quat_squaredLength),\n  "str": () => (quat_str)\n});\n\n// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/quat2.js\nvar quat2_namespaceObject = {};\n__webpack_require__.r(quat2_namespaceObject);\n__webpack_require__.d(quat2_namespaceObject, {\n  "add": () => (quat2_add),\n  "clone": () => (quat2_clone),\n  "conjugate": () => (quat2_conjugate),\n  "copy": () => (quat2_copy),\n  "create": () => (quat2_create),\n  "dot": () => (quat2_dot),\n  "equals": () => (quat2_equals),\n  "exactEquals": () => (quat2_exactEquals),\n  "fromMat4": () => (fromMat4),\n  "fromRotation": () => (quat2_fromRotation),\n  "fromRotationTranslation": () => (quat2_fromRotationTranslation),\n  "fromRotationTranslationValues": () => (fromRotationTranslationValues),\n  "fromTranslation": () => (quat2_fromTranslation),\n  "fromValues": () => (quat2_fromValues),\n  "getDual": () => (getDual),\n  "getReal": () => (getReal),\n  "getTranslation": () => (quat2_getTranslation),\n  "identity": () => (quat2_identity),\n  "invert": () => (quat2_invert),\n  "len": () => (quat2_len),\n  "length": () => (quat2_length),\n  "lerp": () => (quat2_lerp),\n  "mul": () => (quat2_mul),\n  "multiply": () => (quat2_multiply),\n  "normalize": () => (quat2_normalize),\n  "rotateAroundAxis": () => (rotateAroundAxis),\n  "rotateByQuatAppend": () => (rotateByQuatAppend),\n  "rotateByQuatPrepend": () => (rotateByQuatPrepend),\n  "rotateX": () => (quat2_rotateX),\n  "rotateY": () => (quat2_rotateY),\n  "rotateZ": () => (quat2_rotateZ),\n  "scale": () => (quat2_scale),\n  "set": () => (quat2_set),\n  "setDual": () => (setDual),\n  "setReal": () => (setReal),\n  "sqrLen": () => (quat2_sqrLen),\n  "squaredLength": () => (quat2_squaredLength),\n  "str": () => (quat2_str),\n  "translate": () => (quat2_translate)\n});\n\n// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/vec2.js\nvar vec2_namespaceObject = {};\n__webpack_require__.r(vec2_namespaceObject);\n__webpack_require__.d(vec2_namespaceObject, {\n  "add": () => (vec2_add),\n  "angle": () => (vec2_angle),\n  "ceil": () => (vec2_ceil),\n  "clone": () => (vec2_clone),\n  "copy": () => (vec2_copy),\n  "create": () => (vec2_create),\n  "cross": () => (vec2_cross),\n  "dist": () => (vec2_dist),\n  "distance": () => (vec2_distance),\n  "div": () => (vec2_div),\n  "divide": () => (vec2_divide),\n  "dot": () => (vec2_dot),\n  "equals": () => (vec2_equals),\n  "exactEquals": () => (vec2_exactEquals),\n  "floor": () => (vec2_floor),\n  "forEach": () => (vec2_forEach),\n  "fromValues": () => (vec2_fromValues),\n  "inverse": () => (vec2_inverse),\n  "len": () => (vec2_len),\n  "length": () => (vec2_length),\n  "lerp": () => (vec2_lerp),\n  "max": () => (vec2_max),\n  "min": () => (vec2_min),\n  "mul": () => (vec2_mul),\n  "multiply": () => (vec2_multiply),\n  "negate": () => (vec2_negate),\n  "normalize": () => (vec2_normalize),\n  "random": () => (vec2_random),\n  "rotate": () => (vec2_rotate),\n  "round": () => (vec2_round),\n  "scale": () => (vec2_scale),\n  "scaleAndAdd": () => (vec2_scaleAndAdd),\n  "set": () => (vec2_set),\n  "sqrDist": () => (vec2_sqrDist),\n  "sqrLen": () => (vec2_sqrLen),\n  "squaredDistance": () => (vec2_squaredDistance),\n  "squaredLength": () => (vec2_squaredLength),\n  "str": () => (vec2_str),\n  "sub": () => (vec2_sub),\n  "subtract": () => (vec2_subtract),\n  "transformMat2": () => (transformMat2),\n  "transformMat2d": () => (transformMat2d),\n  "transformMat3": () => (vec2_transformMat3),\n  "transformMat4": () => (vec2_transformMat4),\n  "zero": () => (vec2_zero)\n});\n\n// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/index.js\nvar esm_namespaceObject = {};\n__webpack_require__.r(esm_namespaceObject);\n__webpack_require__.d(esm_namespaceObject, {\n  "glMatrix": () => (common),\n  "mat2": () => (mat2_namespaceObject),\n  "mat2d": () => (mat2d_namespaceObject),\n  "mat3": () => (mat3),\n  "mat4": () => (mat4_namespaceObject),\n  "quat": () => (quat_namespaceObject),\n  "quat2": () => (quat2_namespaceObject),\n  "vec2": () => (vec2_namespaceObject),\n  "vec3": () => (vec3_namespaceObject),\n  "vec4": () => (vec4_namespaceObject)\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(671);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(144);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__(326);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js + 1 modules\nvar inherits = __webpack_require__(340);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\nvar possibleConstructorReturn = __webpack_require__(963);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(120);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(942);\n;// CONCATENATED MODULE: ./src/Base.js\n\n\n\n\n/**\n * 图层基础类\n * @class\n */\nvar Base = /*#__PURE__*/function () {\n  function Base() {\n    (0,classCallCheck/* default */.Z)(this, Base);\n\n    (0,defineProperty/* default */.Z)(this, "layers", []);\n\n    (0,defineProperty/* default */.Z)(this, "_listeners", {});\n  }\n\n  (0,createClass/* default */.Z)(Base, [{\n    key: "on",\n    value:\n    /**\n     * 事件监听,用法同jQuery.on\n     */\n    function on(type, listener) {\n      var listeners = this._listeners;\n\n      if (listeners[type] === undefined) {\n        listeners[type] = [];\n      }\n\n      if (listeners[type].indexOf(listener) === -1) {\n        listeners[type].push(listener);\n      }\n    }\n    /**\n     * 触发事件\n     * @example\n     * this.fire("change",event)\n     */\n\n  }, {\n    key: "fire",\n    value: function fire(type, event) {\n      var listeners = this._listeners;\n      var listenerArray = listeners[type];\n\n      if (listenerArray !== undefined) {\n        var array = listenerArray.slice(0);\n\n        for (var i = 0, l = array.length; i < l; i++) {\n          array[i].call(this, event);\n        }\n      }\n    }\n    /**\n     * 关闭事件\n     * @example\n     * this.off(\'change\',onChange)\n     */\n\n  }, {\n    key: "off",\n    value: function off(type, listener) {\n      var listeners = this._listeners;\n      var listenerArray = listeners[type];\n\n      if (listenerArray !== undefined) {\n        if (listener) {\n          var index = listenerArray.indexOf(listener);\n\n          if (index !== -1) {\n            listenerArray.splice(index, 1);\n          }\n        } else {\n          this._listeners[type] = [];\n        }\n      }\n    }\n  }, {\n    key: "initConfig",\n    value: function initConfig(config) {}\n    /**\n     * 地图添加图层时调用,由子类实现\n     * @param {any} map\n     */\n\n  }, {\n    key: "onAdd",\n    value: function onAdd(map) {\n      this.miniGL = map;\n    }\n    /**\n     * 地图每帧调用该函数\n     */\n\n  }, {\n    key: "update",\n    value: function update() {}\n    /**\n     * 移除图层时调用\n     */\n\n  }, {\n    key: "onRemove",\n    value: function onRemove() {\n      this._listeners = {};\n    }\n    /**\n     * 添加图层\n     * @param {Layer} layer - 图层\n     */\n\n  }, {\n    key: "addLayer",\n    value: function addLayer(layer) {\n      layer.id = ++this._layerid;\n      this.layers.push(layer);\n      layer.onAdd(this); // 初始化layer\n    }\n    /**\n     * 删除图层\n     * @param {Layer} layer - 图层\n     */\n\n  }, {\n    key: "removeLayer",\n    value: function removeLayer(layer) {\n      for (var x in this.layers) {\n        if (this.layers[x].id === layer.id) {\n          this.layers[x].onRemove && this.layers[x].onRemove();\n          this.layers.splice(x, 1);\n          return;\n        }\n      }\n    }\n    /**\n     * 获取图层通过id\n     */\n\n  }, {\n    key: "getLayerById",\n    value: function getLayerById(id) {\n      for (var i = 0; i < this.layers.length; i++) {\n        if (this.layers[i].id === id) return this.layers[i];\n      }\n    }\n  }]);\n\n  return Base;\n}();\n\n/* harmony default export */ const src_Base = (Base);\n// EXTERNAL MODULE: ./node_modules/gl-matrix/esm/mat3.js\nvar mat3 = __webpack_require__(600);\n;// CONCATENATED MODULE: ./src/View/Viewport.js\n\n\n\n/**\n * @class\n */\n\nvar ViewPort = /*#__PURE__*/function () {\n  function ViewPort(config) {\n    (0,classCallCheck/* default */.Z)(this, ViewPort);\n\n    this.miniGL = config.miniGL;\n    this.gl = this.miniGL.gl;\n    this.config = Object.assign({}, config.config);\n    this.transform = mat3.create(); // 2d视图转换矩阵\n\n    this.convertTransform = mat3.create(); // 空间转换矩阵\n\n    this.scale = 1;\n    this.translate = [0, 0];\n    this.rotation = Math.PI * 2; // 弧度\n  }\n\n  (0,createClass/* default */.Z)(ViewPort, [{\n    key: "convertScreenToWorld",\n    value: function convertScreenToWorld() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return {\n        x: (x - this.translate[0]) / this.scale,\n        y: (y - this.translate[1]) / this.scale\n      };\n    }\n  }, {\n    key: "convertWorldToScreen",\n    value: function convertWorldToScreen() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return {\n        x: this.scale * x + this.translate[0],\n        y: this.scale * y + this.translate[1]\n      };\n    }\n    /**\n     * @param  {} x=0\n     * @param  {} y=0\n     */\n\n  }, {\n    key: "convertScreenToClip",\n    value: function convertScreenToClip() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return {\n        x: x * 2 / this.width - 1,\n        y: 1 - y * 2 / this.height\n      };\n    }\n    /**\n     * @param  {} x=0\n     * @param  {} y=0\n     */\n\n  }, {\n    key: "convertClipToScreen",\n    value: function convertClipToScreen() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return {\n        x: (x + 1) * this.width / 2,\n        y: (1 - y) * this.height / 2\n      };\n    }\n    /**\n     * 重新布局\n     */\n\n  }, {\n    key: "resize",\n    value: function resize() {\n      var ratio = window.devicePixelRatio;\n      this.pixelRatio = ratio;\n      var width = this.config.width || this.miniGL.container.clientWidth;\n      var height = this.config.height || this.miniGL.container.clientHeight;\n      var renderWidth = width * ratio;\n      var renderHeight = height * ratio;\n      this.miniGL.canvasDOM.width = renderWidth;\n      this.miniGL.canvasDOM.height = renderHeight;\n      this.miniGL.canvasDOM.style.width = width + \'px\';\n      this.miniGL.canvasDOM.style.height = height + \'px\';\n      this.gl.viewport(0, 0, renderWidth, renderHeight);\n      this.renderWidth = renderWidth;\n      this.renderHeight = renderHeight;\n      this.width = width;\n      this.height = height;\n      this.ratio = width / height;\n      this.makeMatrix();\n    }\n  }, {\n    key: "makeMatrix",\n    value: function makeMatrix() {\n      // 计算好坐标转换矩阵\n      var transform = mat3.create();\n      mat3.scale(transform, transform, [2 / this.width, -2 / this.height]); // gl-matrix会以初次进行换算的坐标系为基准空间，来进行换算\n      // 也就是说每次进行转换的时候，都是在原矩阵上做计算和转换，而不只是改变矩阵的值\n\n      mat3.translate(transform, transform, [-this.width / 2, -this.height / 2]);\n      this.matrix = transform;\n      mat3.copy(this.transform, transform);\n    }\n  }]);\n\n  return ViewPort;\n}();\n\n/* harmony default export */ const Viewport = (ViewPort);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 5 modules\nvar toConsumableArray = __webpack_require__(785);\n;// CONCATENATED MODULE: ./src/Shaders/mesh.js\n/* harmony default export */ const mesh = ({\n  vertexShader: "\\n\\tprecision highp float;\\n\\tattribute vec2 position;\\n\\tattribute vec4 color;\\n\\tvarying vec4 vColor;\\n    uniform mat3 transform;\\n    uniform mat3 modelView;\\n\\tuniform float z;\\n\\tvoid main()\\n\\t{\\n\\t\\tvColor = color;\\n\\t\\tvec3 mPosition = transform * modelView * vec3(position,1.);\\n\\t\\tgl_Position = vec4(mPosition.xy,z,1.0);\\n\\t\\t\\n\\t}\\n\\t",\n  fragmentShader: "\\n\\tprecision highp float;\\n\\tvarying vec4 vColor;\\n\\tvoid main()\\n\\t{\\n\\t\\tgl_FragColor = vColor;\\n\\t}\\n\\t"\n});\n// EXTERNAL MODULE: ./src/Mesh/Base.js\nvar Mesh_Base = __webpack_require__(33);\n;// CONCATENATED MODULE: ./src/Mesh/Mesh.js\n\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\nvar Mesh = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(Mesh, _Base);\n\n  var _super = _createSuper(Mesh);\n\n  // array.BYTES_PER_ELEMENT * indicesEachLength\n  function Mesh() {\n    var _this;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      wireFrame: false\n    };\n\n    (0,classCallCheck/* default */.Z)(this, Mesh);\n\n    _this = _super.call(this, config);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", \'TRIANGLES\');\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    _this.shaders = {\n      vertex: mesh.vertexShader,\n      fragment: mesh.fragmentShader\n    };\n    _this.uniformData.z = {\n      value: config.z || 1,\n      type: \'uniform1f\'\n    };\n\n    _this.init(config);\n\n    _this.vSize = 2;\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(Mesh, [{\n    key: "setMap",\n    value: function setMap(src) {\n      var _this2 = this;\n\n      return this.loadTexture(this.gl, src).then(function (texture) {\n        _this2.setData(texture);\n      });\n    }\n  }, {\n    key: "setData",\n    value: function setData(data, indices) {\n      this.dispose();\n      var points = [];\n      var colors = [];\n      this.data = data;\n      data.forEach(function (item) {\n        var coord = [item.position.x, item.position.y];\n        var color = item.color || [1, 1, 0, 1];\n        colors.push.apply(colors, (0,toConsumableArray/* default */.Z)(color));\n        points.push.apply(points, coord);\n      });\n      this.vertex = points;\n      this.setBufferData(points, \'position\', 2);\n      this.setBufferData(colors, \'color\', 4);\n      this.setIndices(indices);\n    }\n  }, {\n    key: "setBufferDatas",\n    value: function setBufferDatas(_ref) {\n      var position = _ref.position,\n          color = _ref.color,\n          indices = _ref.indices,\n          uvs = _ref.uvs;\n      var viewport = this.miniGL.viewport;\n      this.dispose();\n      this.vertex = position;\n      this.setBufferData(position, \'position\', 2);\n      this.setBufferData(color, \'color\', 4);\n      this.setBufferData(uvs, \'uv\', 2);\n      this.setIndices(indices);\n    }\n  }, {\n    key: "setIndices",\n    value: function setIndices(input) {\n      var indices = []; // 支持显示网格线\n\n      if (this.config.wireFrame && this.drawType === \'TRIANGLES\') {\n        for (var i = 0; i < input.length - 2; i += 3) {\n          indices.push(input[i], input[i + 1], input[i + 1], input[i + 2], input[i + 2], input[i]);\n        }\n      } else {\n        indices = input;\n      }\n\n      this.indices = indices; // 顶点buffer\n\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indicesPointer);\n      this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), this.gl.STATIC_DRAW);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      // 2D 只需要两个坐标轴标识位置\n      var offset = 0; // 从数据第几位开始偏移\n\n      var normalize = false; // 分别绑定数据到shader程序中\n\n      for (var key in this.buffers) {\n        var bufferData = this.buffers[key];\n        var bufferPosition = this.getAttribLocation(key); // 分别绑定数据到shader程序中\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData);\n        this.gl.vertexAttribPointer(bufferPosition, this.buffersSize[key], this.gl.FLOAT, normalize, 0, offset);\n        this.gl.enableVertexAttribArray(bufferPosition);\n      } // 使用顶点数据\n\n\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indicesPointer); // 加载shader程序\n\n      this.gl.useProgram(this.shaderProgram);\n      this.setUniformData(); // 渲染\n\n      if (this.indices.length) {\n        var drawType = this.config.wireFrame ? \'LINES\' : this.gl[this.drawType]; // offset必须乘以类型数组的长度，意味着要从内存中数据的对应字节数开始算 根据类型乘对应的BYTES_PER_ELEMENT\n\n        this.gl.drawElements(drawType, this.indices.length, this.gl.UNSIGNED_SHORT, this.offset);\n      }\n    }\n  }]);\n\n  return Mesh;\n}(Mesh_Base/* default */.Z);\n\n/* harmony default export */ const Mesh_Mesh = (Mesh);\n;// CONCATENATED MODULE: ./src/Shaders/point.js\n/* harmony default export */ const point = ({\n  vertexShader: function vertexShader(config) {\n    return "\\n\\t\\tprecision mediump float;\\n\\t\\tattribute vec2 position;\\n\\t\\tattribute vec4 color;\\n\\t\\tattribute float size;\\n\\t\\tattribute float initTime;\\n\\t\\tuniform float z;\\n\\t\\tuniform mat3 transform;\\n\\t\\tvarying vec4 vColor;\\n\\t\\tuniform float t;\\n\\t\\tuniform float scale;\\n        uniform float pixelRatio;\\n\\t\\tvarying float vTime;\\n\\t\\t\\n\\t\\tvoid main()\\n\\t\\t{\\n\\t\\t\\tvColor = color;\\n\\t\\t\\tgl_PointSize = size * pixelRatio ".concat(config.sizeAttenuation ? \'* scale\' : \'\', ";\\n\\t\\t\\tvec3 mPosition = transform * vec3(position,1.);\\n\\t\\t\\tgl_Position = vec4(mPosition.xy,z,1.);\\n\\t\\t\\tvTime = initTime;\\n\\t\\t}\\n\\t\\t");\n  },\n  fragmentShader: function fragmentShader(_ref) {\n    var isRound = _ref.isRound,\n        map = _ref.map,\n        isGradual = _ref.isGradual;\n    return "\\n\\t\\tprecision mediump float;\\n\\t\\tuniform float t;\\n\\t\\tuniform float antialias;\\n\\t\\tuniform sampler2D map;\\n\\t\\tvarying float vTime;\\n\\t\\tvarying vec4 vColor;\\n\\t\\tvoid main()\\n\\t\\t{\\n\\t\\t\\tfloat distance = distance(gl_PointCoord, vec2(0.5, 0.5));\\n\\t\\t".concat(isRound ? "\\n\\t\\t\\tif (distance <= 0.5){" : \'\', "\\n\\t\\t\\t").concat(map ? "\\n\\t\\t\\t\\tvec4 texelColor = texture2D( map, gl_PointCoord ); \\n\\t\\t\\t\\tgl_FragColor = texelColor;\\n\\t\\t\\t\\t".concat(isGradual ? "\\n\\t\\t\\t\\tgl_FragColor.w *= sin(t+vTime)*0.75/2. + 1.-0.75/2." : \'\', ";\\n\\t\\t\\t\\tif(texelColor.w<=0.01){\\n\\t\\t\\t\\t\\tdiscard;\\n\\t\\t\\t\\t}\\n\\t\\t\\t") : "\\n\\t\\t\\t\\tgl_FragColor = vColor;\\n\\t\\t\\t\\t".concat(isGradual ? "\\n\\t\\t\\t\\tgl_FragColor.w = 1. - distance*2.;\\n\\t\\t\\t\\tgl_FragColor.w *= sin(t+vTime)*0.75/2. + 1.-0.75/2. ;" : \'\', "\\n\\t\\t\\t"), "\\n\\t\\t").concat(isRound ? "\\n\\t\\t\\t\\tfloat smoothSideRatio = smoothstep(0.,antialias,(0.5-distance));\\n\\t\\t\\t\\tgl_FragColor.w *= smoothSideRatio;\\n\\t\\t\\t}else{\\n\\t\\t\\t\\tdiscard;\\n\\t\\t\\t}\\n\\t\\t" : \'\', "\\n\\t\\t}\\n\\t\\t");\n  }\n});\n;// CONCATENATED MODULE: ./src/Mesh/Point.js\n\n\n\n\n\n\n\n\n\nfunction Point_createSuper(Derived) { var hasNativeReflectConstruct = Point_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction Point_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\nvar Point = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(Point, _Base);\n\n  var _super = Point_createSuper(Point);\n\n  function Point(config) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, Point);\n\n    config = Object.assign({\n      isRound: true,\n      initTime: false,\n      sizeAttenuation: true\n    }, config);\n    _this = _super.call(this, config);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", \'POINTS\');\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "vertex", []);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "vSize", 2);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "bufferType", \'DYNAMIC_DRAW\');\n\n    _this.shaders = {\n      vertex: config.vertexShader || point.vertexShader(config),\n      fragment: config.fragmentShader || point.fragmentShader(config)\n    };\n    _this.uniformData = {\n      z: {\n        value: 1,\n        type: \'uniform1f\'\n      },\n      t: {\n        value: 1,\n        type: \'uniform1f\'\n      },\n      antialias: {\n        value: 0.1,\n        type: \'uniform1f\'\n      }\n    };\n\n    _this.init(config);\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(Point, [{\n    key: "setData",\n    value: function setData(data) {\n      var _this2 = this;\n\n      this.dispose();\n      var points = [];\n      var colors = [];\n      var size = [];\n      var vTime = [];\n      data.forEach(function (item) {\n        points.push(item.position.x, item.position.y);\n        colors.push.apply(colors, (0,toConsumableArray/* default */.Z)(item.color || [1, 0, 0, 1]));\n        size.push(item.size || 10);\n        vTime.push(item.initTime || _this2.config.initTime || 2 * Math.random() * Math.PI);\n      });\n      this.vertex = points;\n      this.setBufferData(points, \'position\', 2);\n      this.setBufferData(colors, \'color\', 4);\n      this.setBufferData(size, \'size\', 1);\n      this.setBufferData(vTime, \'initTime\', 1);\n    }\n    /**\n     * \n     * @param {any} param 入参\n     */\n\n  }, {\n    key: "setBufferDatas",\n    value: function setBufferDatas(_ref) {\n      var position = _ref.position,\n          color = _ref.color,\n          size = _ref.size,\n          initTime = _ref.initTime;\n      var viewport = this.miniGL.viewport;\n      this.dispose();\n      this.uniformData.transform = {\n        value: viewport.transform,\n        type: \'uniformMatrix3fv\'\n      };\n      this.vertex = position;\n      position && this.setBufferData(position, \'position\', 2);\n      color && this.setBufferData(color, \'color\', 4);\n      size && this.setBufferData(size, \'size\', 1);\n\n      if (initTime) {\n        this.setBufferData(initTime, \'initTime\', 1);\n      }\n    }\n  }]);\n\n  return Point;\n}(Mesh_Base/* default */.Z);\n\n/* harmony default export */ const Mesh_Point = (Point);\n// EXTERNAL MODULE: ./src/Mesh/Line.js + 1 modules\nvar Line = __webpack_require__(70);\n;// CONCATENATED MODULE: ./src/Shaders/widthLine.js\n/* harmony default export */ const widthLine = ({\n  // 先求连接线然后再求垂线\n  // 求出等比放大的值\n  vertexShader: "\\n\\tprecision lowp float;\\n\\tattribute vec2 now;\\n\\tattribute vec2 pre;\\n\\tattribute vec2 next;\\n\\tattribute float side;\\n\\tuniform float width;\\n\\tuniform float aspect;\\n\\tuniform mat3 transform;\\n\\tuniform float offset;\\n\\tvarying float vSide;\\n\\tvoid main()\\n\\t{\\n\\t\\tvSide = side;\\n\\n\\t\\t// \\u5148\\u8F6C\\u6362\\u5750\\u6807\\u7CFB\\n\\t\\tvec2 mNow = (transform*vec3(now,1.)).xy;\\n\\t\\tvec2 mNext = (transform*vec3(next,1.)).xy;\\n\\t\\tvec2 mPre = (transform*vec3(pre,1.)).xy;\\n\\t\\tvec2 _now = vec2(mNow);\\n\\t\\tvec2 _next = vec2(mNext);\\n\\t\\tvec2 _pre =  vec2(mPre);\\n\\t\\n\\t\\t// \\u5148\\u628A\\u672C\\u5750\\u6807\\u7CFB\\u7684\\u5750\\u6807\\u653E\\u5927\\uFF0C\\u548C\\u771F\\u5B9E\\u7684\\u5916\\u754C\\u5750\\u6807\\u4E00\\u6837,\\u8FD9\\u6837\\u6C42\\u51FA\\u6765\\u7684\\u76F8\\u5BF9\\u5411\\u91CF\\u662F\\u51C6\\u786E\\u7684\\uFF0C\\u5982\\u679C\\u5728\\u540E\\u9762\\u4E4B\\u95F4\\u5BF9normal\\u8FDB\\u884C\\u53D8\\u5316\\uFF0C\\u5C31\\u4F1A\\u5F97\\u51FA\\u9519\\u8BEF\\u7684\\u7ED3\\u679C\\n\\t\\t_now.x *= aspect;\\n\\t\\t_next.x *= aspect;\\n\\t\\t_pre.x *= aspect;\\n\\t\\t\\n\\t\\tvec2 point0_1 = normalize(_now - _pre);\\n\\t\\tvec2 point2_1 = normalize(_next - _now);\\n\\t\\tvec2 point2_1_0v = normalize(point2_1 + point0_1);\\n\\t\\t\\n\\t\\tvec2 normal = vec2( -point2_1_0v.y , point2_1_0v.x );\\n\\t\\tvec2 offsets = offset*normal;\\n\\n\\t\\t//\\u8FD9\\u4E2A\\u7B97\\u6CD5\\u4E0B\\u5148\\u653E\\u5927,\\u6C42\\u51FA\\u7684Normal\\u6BD4\\u4F8B\\u5728\\u653E\\u5927\\u7684\\u5750\\u6807\\u7CFB\\u4E0B\\u662F\\u5BF9\\u7684\\uFF0C\\u6839\\u636E\\u8FD9\\u4E2Anormal\\u6C42\\u51FA\\u653E\\u5927\\u7684\\u6BD4\\u4F8B\\n\\t\\tfloat ratio = sqrt(1.0 - pow(dot(normal,point0_1),2.0));\\n\\t\\tvec2 dir = normal * width/ratio * .5 * side + offsets;\\n\\n\\t\\t// \\u5F97\\u51FA\\u7684x\\u5750\\u6807\\u4F1A\\u88AB\\u653E\\u5927\\uFF0C\\u8FD9\\u91CC\\u8981\\u9664\\u6389,\\u8BB0\\u5F97\\u8981\\u7528\\u8F6C\\u6362\\u540E\\u5750\\u6807\\u8FDB\\u884C\\u52A0\\u51CF\\n\\t\\tgl_Position = vec4(mNow.x + dir.x/aspect,mNow.y+dir.y , 1., 1.);\\n\\t}\\n\\t",\n  fragmentShader: "\\n\\tprecision lowp float;\\n\\tuniform vec4 color;\\n\\tvarying float vSide;\\n\\tvoid main()\\n\\t{\\n\\t\\tfloat smoothSideRatio = max(0.1,smoothstep(0.,0.4,(1. - abs(vSide))));\\n\\t\\tgl_FragColor = color;\\n\\t\\tgl_FragColor.w = smoothSideRatio;\\n\\t}\\n\\t"\n});\n;// CONCATENATED MODULE: ./src/Mesh/WidthLine.js\n\n\n\n\n\n\n\n\nfunction WidthLine_createSuper(Derived) { var hasNativeReflectConstruct = WidthLine_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction WidthLine_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\nvar WidthLine = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(WidthLine, _Base);\n\n  var _super = WidthLine_createSuper(WidthLine);\n\n  // "TRIANGLE_STRIP";\n  function WidthLine(config) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, WidthLine);\n\n    _this = _super.call(this);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", \'TRIANGLES\');\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "shaders", {\n      vertex: widthLine.vertexShader,\n      fragment: widthLine.fragmentShader\n    });\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    config = Object.assign({\n      width: 20,\n      z: 1,\n      offset: 0\n    }, config);\n    _this.uniformData = {\n      z: {\n        value: config.z || 1,\n        type: \'uniform1f\'\n      }\n    };\n\n    _this.init(config);\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(WidthLine, [{\n    key: "setData",\n    value: function setData(data) {\n      var viewport = this.miniGL.viewport;\n      if (!data.length && data.length < 2) return console.warn(\'need input data.length >= 2\');\n      this.uniformData.color = {\n        value: this.config.color || [1, 0, 1, 1],\n        type: \'uniform4fv\'\n      };\n      this.uniformData.width = {\n        value: 2 * this.config.width / this.miniGL.viewport.height,\n        type: \'uniform1f\'\n      };\n      this.uniformData.offset = {\n        value: 2 * this.config.offset / this.miniGL.viewport.height,\n        type: \'uniform1f\'\n      };\n      this.data = data;\n      var points = [];\n      data.forEach(function (item) {\n        points.push(item.position.x, item.position.y);\n      }); // 生产双倍点for两个边\n\n      var res = this.calcSidePoints(points);\n      this.setBufferData(res.nowData, \'now\', 2);\n      this.setBufferData(res.preData, \'pre\', 2);\n      this.setBufferData(res.nextData, \'next\', 2);\n      this.setBufferData(res.side, \'side\', 1); // 生成顶点\n\n      var indices = [];\n      var indicesLength = res.nowData.length / 2; // TRIANGLES情况\n\n      for (var i = 0; i < indicesLength - 2; i += 2) {\n        indices.push(i);\n        indices.push(i + 1);\n        indices.push(i + 2);\n        indices.push(i + 2);\n        indices.push(i + 1);\n        indices.push(i + 3);\n      } // Strip退化方案太反人类，不hack 了\n      // for (let i = 0; i < indicesLength; i++) {\n      // \t//012 213 233 336 366 667 678\n      // \t// 4 =>3 5=>6 //退化过程\n      // \t// data[length - 1],\n      // \tindices.push(i);\n      // }\n\n\n      this.setIndices(indices);\n      this.res = res;\n    }\n  }, {\n    key: "addData",\n    value: function addData(data) {}\n  }, {\n    key: "calcSidePoints",\n    value: function calcSidePoints() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var length = data.length;\n      var side = [];\n      var nextData = [];\n      var preData = [];\n      var nowData = []; // 生产双倍点for两个边\n\n      for (var i = 0; i < length; i += 2) {\n        side.push(1, -1);\n        nowData.push(data[i], data[i + 1], data[i], data[i + 1]);\n      }\n\n      var next = [2 * data[length - 2] - data[length - 4], 2 * data[length - 1] - data[length - 3]];\n      nextData = [].concat(nowData, next, next);\n      nextData.splice(0, 4);\n      var pre = [2 * data[0] - data[2], 2 * data[1] - data[3]];\n      preData = [].concat(pre, pre, nowData);\n      return {\n        nowData: nowData,\n        preData: preData,\n        side: side,\n        nextData: nextData\n      };\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      // 2D 只需要两个坐标轴标识位置\n      var offset = 0; // 从数据第几位开始偏移\n\n      var normalize = false;\n\n      for (var key in this.buffers) {\n        var bufferData = this.buffers[key];\n        var bufferPosition = this.getAttribLocation(key); // 分别绑定数据到shader程序中\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData);\n        this.gl.vertexAttribPointer(bufferPosition, this.buffersSize[key], this.gl.FLOAT, normalize, 0, offset); // todo:webgl2.0 实例数组能减少同样形状但渲染不同的高性能方案\n\n        this.gl.enableVertexAttribArray(bufferPosition);\n      } // 使用顶点数据\n\n\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indicesPointer); // 加载shader程序\n\n      this.gl.useProgram(this.shaderProgram);\n      this.setUniformData(); // 渲染\n\n      if (this.indices.length) {\n        this.gl.drawElements(this.gl[this.drawType], this.indices.length, this.gl.UNSIGNED_SHORT, this.offset);\n      }\n    }\n  }]);\n\n  return WidthLine;\n}(Mesh_Base/* default */.Z);\n\n/* harmony default export */ const Mesh_WidthLine = (WidthLine);\n;// CONCATENATED MODULE: ./src/View/Canvas.js\n\n\n\n\n\n\n\n\n/**\n * @class\n */\n\nvar Canvas = /*#__PURE__*/function () {\n  function Canvas(config) {\n    var _this = this;\n\n    (0,classCallCheck/* default */.Z)(this, Canvas);\n\n    (0,defineProperty/* default */.Z)(this, "status", \'update\');\n\n    (0,defineProperty/* default */.Z)(this, "update", function () {\n      var time = new Date().getTime();\n      var delta = time - _this.beforeTime;\n      _this.beforeTime = time;\n\n      _this.render(delta);\n\n      if (_this.status === \'update\') requestAnimationFrame(_this.update);\n    });\n\n    this.index = 0;\n    this.meshes = [];\n    this.miniGL = config.miniGL;\n    this.gl = this.miniGL.gl; // 基础渲染以下类，其他形状让让用户自己new\n    // 牺牲一些性能，渲染多次drawElements来避免通过退化三角形合并形状，导致的事件处理困难（需要分层处理合并的图层，然后按照像素去检测，比较恶心）\n\n    this.mesh = new Mesh_Mesh(config.meshConfig);\n    this.point = new Mesh_Point(config.pointConfig);\n    this.line = new Line/* default */.Z(config.lineConfig);\n    this.widthLine = new Mesh_WidthLine(config.widthLineConfig);\n    this.add(this.mesh);\n    this.add(this.line);\n    this.add(this.point);\n    this.add(this.widthLine);\n  }\n\n  (0,createClass/* default */.Z)(Canvas, [{\n    key: "dispose",\n    value: function dispose() {\n      var _this2 = this;\n\n      this.meshes.forEach(function (item) {\n        _this2.remove(item);\n\n        item.destroy && item.destroy();\n      });\n      this.meshes = [];\n    }\n  }, {\n    key: "toDataUrl",\n    value: function toDataUrl() {\n      return this.gl.canvas.toDataUrl();\n    }\n  }, {\n    key: "add",\n    value:\n    /**\n     * @param  {} mesh\n     * @param  {} [key]\n     * @returns {String} key\n     */\n    function add(mesh) {\n      this.meshes.push(mesh);\n      mesh.onAdd && mesh.onAdd(this.miniGL);\n      mesh.parent = this;\n      return mesh;\n    }\n  }, {\n    key: "remove",\n    value: function remove(child) {\n      var index = this.meshes.indexOf(child);\n      this.meshes.splice(index, 1);\n    }\n  }, {\n    key: "addChild",\n    value: function addChild() {\n      var _this$add;\n\n      (_this$add = this.add).call.apply(_this$add, [this].concat(Array.prototype.slice.call(arguments)));\n    }\n  }, {\n    key: "removeChild",\n    value: function removeChild() {\n      var _this$remove;\n\n      (_this$remove = this.remove).call.apply(_this$remove, [this].concat(Array.prototype.slice.call(arguments)));\n    }\n  }, {\n    key: "render",\n    value: function render(delta) {\n      var _this3 = this;\n\n      var gl = this.gl;\n      this.miniGL.fire(\'beforerender\', delta); // 清空\n\n      gl.clearDepth(1.0); // gl.enable(gl.DEPTH_TEST);\n\n      gl.disable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n      gl.disable(gl.CULL_FACE);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      this.meshes.forEach(function (mesh) {\n        _this3.renderMesh(mesh, delta);\n      });\n    }\n    /**\n     * @param  {} mesh\n     * @param  {} delta\n     * @param  {} parentMatrix 一级级传下来的矩阵\n     */\n\n  }, {\n    key: "renderMesh",\n    value: function renderMesh(mesh, delta, parentMatrix) {\n      var _this4 = this;\n\n      var gl = this.gl;\n      var blendMode = (mesh.texture || {}).premultiplyAlpha ? \'ONE\' : \'SRC_ALPHA\';\n      gl.enable(gl.BLEND);\n      gl.blendFunc(gl[blendMode], mesh.blendMode || gl.ONE_MINUS_SRC_ALPHA); // 写入深度缓冲\n\n      if (mesh.visible) {\n        this.makeTransform(mesh, parentMatrix);\n        this.makeNeedUniform(mesh);\n        mesh.render(delta); // 更新子元素\n\n        if (mesh.children) {\n          mesh.children.forEach(function (item) {\n            _this4.renderMesh(item, delta, mesh.uniformData.modelView.value);\n          });\n        }\n      }\n    }\n  }, {\n    key: "makeNeedUniform",\n    value: function makeNeedUniform(item) {\n      item.uniformData.aspect = {\n        value: this.miniGL.viewport.ratio,\n        type: \'uniform1f\'\n      };\n      item.uniformData.pixelRatio = {\n        value: this.miniGL.viewport.pixelRatio,\n        type: \'uniform1f\'\n      };\n      item.uniformData.scale = {\n        value: this.miniGL.viewport.scale,\n        type: \'uniform1f\'\n      };\n    }\n  }, {\n    key: "makeTransform",\n    value: function makeTransform(item, parentMatrix) {\n      if (parentMatrix) {\n        var modelView = mat3.mul(mat3.create(), parentMatrix, item.matrix);\n        item.uniformData.modelView = {\n          value: modelView,\n          type: \'uniformMatrix3fv\'\n        };\n      } else {\n        item.uniformData.modelView = {\n          value: item.matrix,\n          type: \'uniformMatrix3fv\'\n        };\n      }\n\n      item.uniformData.transform = {\n        value: this.miniGL.viewport.transform,\n        type: \'uniformMatrix3fv\'\n      };\n    }\n  }]);\n\n  return Canvas;\n}();\n\n/* harmony default export */ const View_Canvas = (Canvas);\n;// CONCATENATED MODULE: ./src/Control/Controller.js\n\n\n\n\n\nvar Controller = /*#__PURE__*/function () {\n  function Controller(config) {\n    var _this = this;\n\n    (0,classCallCheck/* default */.Z)(this, Controller);\n\n    (0,defineProperty/* default */.Z)(this, "onMouseMove", function (e) {\n      if (_this.status === \'disable\') return;\n      var x = e.offsetX - _this.startXY.x + _this.startXY.startX;\n      var y = e.offsetY - _this.startXY.y + _this.startXY.startY;\n\n      _this.moveTo(x, y);\n    });\n\n    (0,defineProperty/* default */.Z)(this, "onMouseUp", function () {\n      var container = _this.miniGL.container;\n      container.removeEventListener(\'mousemove\', _this.onMouseMove);\n      container.removeEventListener(\'mouseup\', _this.onMouseUp);\n    });\n\n    this.miniGL = config.miniGL;\n    this.viewport = this.miniGL.viewport;\n    this.gl = this.miniGL.gl;\n    this.status = \'enable\';\n    this.config = Object.assign({// 默认参数\n    }, config.config);\n\n    if (!config.disableController) {\n      this.addEvents();\n    }\n\n    this.matrix = mat3.create();\n  }\n\n  (0,createClass/* default */.Z)(Controller, [{\n    key: "disable",\n    value: function disable() {\n      this.status = \'disable\';\n    }\n  }, {\n    key: "enable",\n    value: function enable() {\n      this.status = \'enable\';\n    }\n  }, {\n    key: "addEvents",\n    value: function addEvents() {\n      var _this2 = this;\n\n      var container = this.miniGL.container;\n      container.addEventListener(\'mousedown\', function (e) {\n        if (e.ctrlKey) {\n          e.preventDefault();\n          return;\n        }\n\n        _this2.startXY = {\n          x: e.offsetX,\n          y: e.offsetY,\n          startX: _this2.viewport.translate[0],\n          startY: _this2.viewport.translate[1]\n        };\n\n        _this2.addMoveEvents();\n      });\n      container.addEventListener(\'wheel\', function (e) {\n        e.preventDefault();\n\n        _this2.zoom(e.deltaY > 0 ? 0.99 : 1.01, e.pageX, e.pageY);\n      });\n    }\n  }, {\n    key: "addMoveEvents",\n    value: function addMoveEvents() {\n      var container = this.miniGL.container;\n      container.addEventListener(\'mousemove\', this.onMouseMove);\n      container.addEventListener(\'mouseup\', this.onMouseUp);\n    }\n  }, {\n    key: "zoomTo",\n    value:\n    /**\n     * @param  {} scale\n     * @param  {} cx\n     * @param  {} cy\n     */\n    function zoomTo(scale, cx, cy) {\n      var changeScale = scale / this.viewport.scale;\n      this.zoom(changeScale, cx, cy);\n    }\n    /**\n     * @param  {number} scale 当前基础的放大倍率\n     * @param  {number} cx\n     * @param  {number} cy\n     */\n\n  }, {\n    key: "zoom",\n    value: function zoom(scale, cx, cy) {\n      // 求世界坐标\n      var canvasPos = this.viewport.convertScreenToWorld(cx, cy);\n      var nextScale = scale * this.viewport.scale; // 求出变换后的偏移坐标\n\n      var x = cx - canvasPos.x * nextScale;\n      var y = cy - canvasPos.y * nextScale;\n      this.transform(nextScale, x, y);\n    } // 这个x,y是当前屏幕的x,y,变换后的\n\n    /**\n     * @param  {} x\n     * @param  {} y\n     */\n\n  }, {\n    key: "moveTo",\n    value: function moveTo(x, y) {\n      var scale = this.viewport.scale;\n      this.transform(scale, x, y);\n    }\n  }, {\n    key: "move",\n    value: function move(x, y) {\n      var scale = this.viewport.scale;\n      x = x + this.viewport.translate[0];\n      y = y + this.viewport.translate[1];\n      this.transform(scale, x, y);\n    }\n    /** 转换到指定情形，先放大后平移，然后注入到viewport.transform\n     * @param  {} scale\n     * @param  {} x\n     * @param  {} y\n     */\n\n  }, {\n    key: "transform",\n    value: function transform(scale, x, y) {\n      this.viewport.translate = [x, y];\n      this.viewport.scale = scale;\n      this.matrix = mat3.create();\n      mat3.translate(this.matrix, this.matrix, this.viewport.translate);\n      mat3.scale(this.matrix, this.matrix, [scale, scale]);\n      mat3.mul(this.viewport.transform, this.viewport.matrix, this.matrix);\n    }\n    /**\n     * @param  {} rad\n     * @param  {} cx=this.viewport.width/2\n     * @param  {} cy=this.viewport.height/2\n     */\n\n  }, {\n    key: "rotateTo",\n    value: function rotateTo(rad) {\n      var cx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.viewport.width / 2;\n      var cy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.viewport.height / 2;\n      var changeRad = rad - this.viewport.rotation || 0;\n      this.rotate(changeRad, cx, cy);\n    }\n  }, {\n    key: "rotate",\n    value: function rotate(rad) {\n      var cx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.viewport.width / 2;\n      var cy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.viewport.height / 2;\n      var transform = this.viewport.transform;\n      this.viewport.rotation += rad;\n      mat3.translate(transform, transform, [cx, cy]); // 再平移回去\n\n      mat3.rotate(transform, transform, rad); // 再平移回去\n\n      mat3.translate(transform, transform, [-cx, -cy]); // 先平移到原点\n    }\n  }]);\n\n  return Controller;\n}();\n\n/* harmony default export */ const Control_Controller = (Controller);\n;// CONCATENATED MODULE: ./src/Shaders/flyline.js\n/* harmony default export */ const flyline = ({\n  // shader中进行坐标转换会不会快？CPU只会调用一次，GPU每帧都要重复去运算，2d情况下没有相机，\n  // 没有坐标因相机而变化的情况，所以不用再shader中运算，可以减少cpu的调用率\n  vertexShader: "\\n\\tprecision mediump float;\\n\\tattribute vec4 position;\\n\\tattribute float number;\\n\\tuniform vec4 startColor;\\n\\tuniform vec4 endColor;\\n\\tuniform float length;\\n\\tuniform float t;\\n\\tuniform float z;\\n\\tvarying vec4 vColor;\\n\\tvoid main()\\n\\t{\\n\\t\\tgl_Position = vec4(position.xy,z,1.);\\n\\t\\tvColor = endColor - (length + t - number)/length*(endColor - startColor);\\n\\t}\\n\\t",\n  fragmentShader: "\\n\\tprecision mediump float;\\n\\tvarying vec4 vColor;\\n\\tvoid main()\\n\\t{\\n\\t\\tif(vColor.w<=0.02){\\n\\t\\t\\tdiscard;\\n\\t\\t}\\n\\t\\tgl_FragColor = vColor;\\n\\t}\\n\\t"\n});\n;// CONCATENATED MODULE: ./src/Utils/vector.js\nfunction normalize(v) {\n  var length = Math.sqrt(v.x * v.x + v.y * v.y);\n  return {\n    x: v.x / length,\n    y: v.y / length\n  };\n}\n\nfunction addVector(v0, v1) {\n  return {\n    x: v0.x + v1.x,\n    y: v0.y + v1.y\n  };\n}\n\nfunction getVectorLength(v) {\n  var length = Math.sqrt(v.x * v.x + v.y * v.y);\n  return length;\n}\n\nfunction subVector(v0, v1) {\n  return {\n    x: v1.x - v0.x,\n    y: v1.y - v0.y\n  };\n}\n\nfunction multiple(v, t) {\n  return {\n    x: v.x * t,\n    y: v.y * t\n  };\n}\n\n\n;// CONCATENATED MODULE: ./src/Utils/BezierLine.js\n\n\n\n\nvar BezierLine = /*#__PURE__*/function () {\n  function BezierLine() {\n    (0,classCallCheck/* default */.Z)(this, BezierLine);\n  }\n\n  (0,createClass/* default */.Z)(BezierLine, [{\n    key: "setControl",\n    value: function setControl(v0, v1, v2, v3) {\n      this.v0 = v0;\n      this.v1 = v1;\n      this.v2 = v2;\n      this.v3 = v3;\n    }\n  }, {\n    key: "setData",\n    value: function setData(data) {\n      this.data = data;\n    }\n  }, {\n    key: "getPoint",\n    value: function getPoint(t) {\n      var v0 = this.v0,\n          v1 = this.v1,\n          v2 = this.v2,\n          v3 = this.v3;\n      return {\n        x: this.cubicBezier(t, v0.x, v1.x, v2.x, v3.x),\n        y: this.cubicBezier(t, v0.y, v1.y, v2.y, v3.y)\n      };\n    }\n  }, {\n    key: "cubicBezier",\n    value: function cubicBezier(t, p0, p1, p2, p3) {\n      return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n    }\n  }, {\n    key: "getSpacedPoints",\n    value: function getSpacedPoints(n) {\n      var points = [];\n      this.lengths = this.getLengths(n); // 缓存起来\n\n      for (var i = 0; i <= n; i++) {\n        var t = this.getUtoTmapping(i / n);\n        points.push(this.getPoint(t));\n      }\n\n      return points;\n    }\n  }, {\n    key: "getLengths",\n    value: function getLengths() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      var length = 0;\n      var lengths = [0];\n\n      for (var i = 1; i <= n; i++) {\n        var current = this.getPoint(i / n);\n        var last = this.getPoint((i - 1) / n);\n        length += getVectorLength(subVector(last, current));\n        lengths.push(length);\n      }\n\n      return lengths;\n    }\n  }, {\n    key: "getLength",\n    value: function getLength(n) {\n      var lengths = this.getLengths(n);\n      return lengths[lengths.length - 1];\n    } // 根据总长度算出一定比例的长度所对应的t值，\n    // 这个等距划分的算法不知道为何在贝塞尔中间的部分间距过大不再等距，有空再看下吧\n\n  }, {\n    key: "getUtoTmapping",\n    value: function getUtoTmapping(u) {\n      var lengths = this.lengths;\n      var length = lengths[lengths.length - 1];\n      var targetLength = u * length;\n      var nextIndex;\n      var nowIndex = 0;\n      lengths.find(function (item, index) {\n        if (item >= targetLength) {\n          nextIndex = index;\n          return true;\n        } else {\n          nowIndex = index;\n          return false;\n        }\n      });\n      var restRatio = u === 0 ? 0 : (targetLength - lengths[nowIndex]) / (lengths[nextIndex] - lengths[nowIndex]);\n      var t = (nowIndex + Math.max(restRatio, 0)) / (this.lengths.length - 1);\n      return t;\n    }\n  }]);\n\n  return BezierLine;\n}();\n\nfunction CubicBezierP0(t, p) {\n  var k = 1 - t;\n  return k * k * k * p;\n}\n\nfunction CubicBezierP1(t, p) {\n  var k = 1 - t;\n  return 3 * k * k * t * p;\n}\n\nfunction CubicBezierP2(t, p) {\n  return 3 * (1 - t) * t * t * p;\n}\n\nfunction CubicBezierP3(t, p) {\n  return t * t * t * p;\n}\n\n/* harmony default export */ const Utils_BezierLine = (BezierLine);\n;// CONCATENATED MODULE: ./src/Mesh/FlyLine.js\n\n\n\n\n\n\n\n\nfunction FlyLine_createSuper(Derived) { var hasNativeReflectConstruct = FlyLine_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction FlyLine_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\nvar FlyLine_Line = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(Line, _Base);\n\n  var _super = FlyLine_createSuper(Line);\n\n  function Line(config) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, Line);\n\n    config = Object.assign({\n      z: 0.1,\n      length: 50,\n      lineHeight: 0.2,\n      speed: 1,\n      smoothNumber: 1\n    }, config);\n    _this = _super.call(this, config);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", \'LINE_STRIP\');\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "shaders", {\n      vertex: flyline.vertexShader,\n      fragment: flyline.fragmentShader\n    });\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "depthMask", false);\n\n    _this.init(config);\n\n    _this.bezierLine = new Utils_BezierLine();\n    _this.uniformData = {\n      t: {\n        value: 0,\n        type: \'uniform1f\'\n      },\n      length: {\n        value: config.length,\n        type: \'uniform1f\'\n      },\n      startColor: {\n        value: config.startColor || [1, 0, 0, 0],\n        type: \'uniform4fv\'\n      },\n      endColor: {\n        value: config.endColor || [1, 0, 0, 1],\n        type: \'uniform4fv\'\n      },\n      z: {\n        value: _this.config.z,\n        type: \'uniform1f\'\n      }\n    };\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(Line, [{\n    key: "setData",\n    value: function setData(data) {\n      var viewport = this.miniGL.viewport;\n      this.data = data;\n      this.data.startXY = viewport.convertScreenToClip(data.start.x, data.start.y);\n      this.data.endXY = viewport.convertScreenToClip(data.end.x, data.end.y);\n      var midPoint = {\n        x: this.data.start.x / 2 + this.data.end.x / 2,\n        y: this.data.start.y / 2 + this.data.end.y / 2\n      };\n      var end_start = {\n        x: this.data.end.x - this.data.start.x,\n        y: this.data.end.y - this.data.start.y\n      };\n      var normal = {\n        x: end_start.y,\n        y: -end_start.x\n      };\n\n      if (end_start.x < 0) {\n        normal = {\n          x: -end_start.y,\n          y: end_start.x\n        };\n      }\n\n      var length = getVectorLength(subVector(data.end, data.start));\n      var lineHeight = this.config.lineHeight * length;\n      var controlPoint = addVector(multiple(normalize(normal), lineHeight), midPoint);\n      this.bezierLine.setControl(this.data.start, this.data.start, controlPoint, this.data.end);\n      var allPoints = this.bezierLine.getSpacedPoints(length * this.config.smoothNumber);\n      var points = [];\n      var numbers = [];\n      allPoints.forEach(function (item, index) {\n        // 最后再近些坐标转换，避免因为画布缩放导致长度计算失准\n        var point = viewport.convertScreenToClip(item.x, item.y);\n        points.push(point.x, point.y);\n        numbers.push(index);\n      });\n      this.vertex = points; // this.pointsBufferLength = points.length*Float32Array.BYTES_PER_ELEMENT;\n\n      this.setBufferData(points, \'position\', 2);\n      this.setBufferData(numbers, \'number\', 1);\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      this.startFlag = true;\n    }\n  }, {\n    key: "pause",\n    value: function pause() {\n      this.startFlag = false;\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      // 2D 只需要两个坐标轴标识位置\n      var normalize = false;\n      var length = this.vertex.length / 2;\n      var _this$uniformData = this.uniformData,\n          uniformData = _this$uniformData === void 0 ? {} : _this$uniformData,\n          config = this.config;\n      if (!this.startFlag) return;\n      uniformData.t.value += this.config.speed;\n\n      if (uniformData.t.value >= length) {\n        uniformData.t.value = -this.config.length;\n      } // 分别绑定数据到shader程序中\n\n\n      for (var key in this.buffers) {\n        var bufferData = this.buffers[key];\n        var bufferPosition = this.getAttribLocation(key); // 分别绑定数据到shader程序中\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData);\n        this.gl.vertexAttribPointer(bufferPosition, this.buffersSize[key], this.gl.FLOAT, normalize, 0, 0);\n        this.gl.enableVertexAttribArray(bufferPosition);\n      } // 加载shader程序\n\n\n      this.gl.useProgram(this.shaderProgram);\n      this.setUniformData(); // 渲染\n\n      if (this.vertex.length) {\n        // specifying the starting index in the array of vector points.\n        // specifying the number of indices to be rendered.\n        var offset = Math.max(uniformData.t.value, 0); // 起步时要算出真实的减掉负数的size，到达时，不能超过整个数组长度\n\n        var size = Math.min(uniformData.t.value + config.length - offset, length - offset);\n        if (size === 0) return;\n        this.gl.drawArrays(this.gl[this.drawType], offset, size);\n      }\n    }\n  }]);\n\n  return Line;\n}(Mesh_Base/* default */.Z);\n\n/* harmony default export */ const FlyLine = (FlyLine_Line);\n;// CONCATENATED MODULE: ./src/Shaders/image.js\n/* harmony default export */ const Shaders_image = ({\n  vertexShader: "\\n\\tprecision highp float;\\n\\tattribute vec2 position;\\n\\tattribute vec2 uv;\\n\\tvarying vec4 vColor;\\n\\tvarying vec2 vUv;\\n    uniform mat3 transform;\\n    uniform mat3 modelView;\\n    uniform float z;\\n\\tvoid main()\\n\\t{\\n        vUv = uv;\\n\\t\\tvec3 mPosition = transform * modelView * vec3(position,1.0);\\n\\t\\tgl_Position = vec4(mPosition.xy,z,1.0);\\n\\t}\\n\\t",\n  fragmentShader: "\\n\\tprecision highp float;\\n    varying vec2 vUv;\\n    uniform vec4 alphaColor;\\n\\tuniform sampler2D u_Sampler;\\n\\tvoid main()\\n\\t{\\n        gl_FragColor = texture2D(u_Sampler,vUv)*alphaColor;\\n\\t}\\n\\t"\n});\n// EXTERNAL MODULE: ./src/Utils/LoadTexture.js\nvar LoadTexture = __webpack_require__(816);\n;// CONCATENATED MODULE: ./src/Mesh/Image.js\n\n\n\n\n\n\n\n\nfunction Image_createSuper(Derived) { var hasNativeReflectConstruct = Image_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction Image_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\nvar Image = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(Image, _Base);\n\n  var _super = Image_createSuper(Image);\n\n  // array.BYTES_PER_ELEMENT * indicesEachLength\n  function Image() {\n    var _this;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    (0,classCallCheck/* default */.Z)(this, Image);\n\n    _this = _super.call(this, config);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", \'TRIANGLES\');\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    _this.shaders = {\n      vertex: Shaders_image.vertexShader,\n      fragment: Shaders_image.fragmentShader\n    };\n    _this.uniformData = {\n      z: {\n        value: config.z || 1,\n        type: \'uniform1f\'\n      },\n      alphaColor: {\n        value: config.alphaColor || [1, 1, 1, 1],\n        type: \'uniform4fv\'\n      }\n    };\n\n    _this.init(config);\n\n    _this.vSize = 2;\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(Image, [{\n    key: "setMap",\n    value: function setMap(imagePath) {\n      var _this2 = this;\n\n      (0,LoadTexture/* default */.Z)(this.gl, imagePath).then(function (texture) {\n        _this2.setTexture(texture);\n      });\n    }\n  }, {\n    key: "setData",\n    value: function setData(data) {\n      if (!this.miniGL) {\n        throw new Error(\'请先将组件通过miniGL.canvas.add()加入实例中\');\n      } // 释放内存空间\n\n\n      this.dispose();\n      this.data = data;\n      var width = data.width,\n          height = data.height,\n          src = data.src,\n          texture = data.texture,\n          _data$x = data.x,\n          x = _data$x === void 0 ? 0 : _data$x,\n          _data$y = data.y,\n          y = _data$y === void 0 ? 0 : _data$y; // 设置纹理\n\n      if (src) {\n        this.setMap(src);\n      }\n\n      if (texture) {\n        this.setTexture(texture);\n      } // 计算uv\n\n\n      var points = [x, y, x, y + height, x + width, y, x + width, y + height];\n      var indices = [0, 1, 2, 2, 1, 3];\n      var uv = [0, 0, 0, 1, 1, 0, 1, 1];\n      this.vertex = points;\n      this.setBufferData(points, \'position\', 2);\n      this.setBufferData(uv, \'uv\', 2);\n      this.setIndices(indices);\n      this.uniformsNeedUpdate = true;\n    } // 设置纹理数据\n\n  }, {\n    key: "setTexture",\n    value: function setTexture(texture) {\n      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'u_Sampler\';\n      this.uniformData[key] = {\n        type: \'uniform1i\',\n        // image\n        value: 0,\n        // 0号纹理传递\n        texture: texture.webglTexture ? texture.webglTexture : texture\n      };\n      this.texture = texture;\n      this.uniformsNeedUpdate = true;\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      // 2D 只需要两个坐标轴标识位置\n      var offset = 0; // 从数据第几位开始偏移\n\n      var normalize = false;\n      var gl = this.gl; // 图片加载完了再说\n\n      if (!this.uniformData || !this.uniformData[\'u_Sampler\']) {\n        return;\n      } // 分别绑定数据到shader程序中\n\n\n      for (var key in this.buffers) {\n        var bufferData = this.buffers[key];\n        var bufferPosition = this.getAttribLocation(key); // 分别绑定数据到shader程序中\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, bufferData);\n        gl.vertexAttribPointer(bufferPosition, this.buffersSize[key], gl.FLOAT, normalize, 0, offset);\n        gl.enableVertexAttribArray(bufferPosition);\n      } // 使用顶点数据\n\n\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesPointer); // 加载shader程序\n\n      gl.useProgram(this.shaderProgram);\n      this.setUniformData(); // offset必须乘以类型数组的长度，意味着要从内存中数据的对应字节数开始算 根据类型乘对应的BYTES_PER_ELEMENT\n      // 渲染\n\n      if (this.indices.length) {\n        gl.drawElements(gl[this.drawType], this.indices.length, gl.UNSIGNED_SHORT, this.offset);\n      }\n    }\n  }]);\n\n  return Image;\n}(Mesh_Base/* default */.Z);\n\n/* harmony default export */ const Mesh_Image = (Image);\n;// CONCATENATED MODULE: ./src/Shaders/roundLine.js\n/* harmony default export */ const roundLine = ({\n  // 先求连接线然后再求垂线\n  // 求出等比放大的值\n  vertexShader: "\\n\\tprecision lowp float;\\n\\tattribute vec2 now;\\n\\tattribute vec2 pre;\\n\\tattribute vec2 next;\\n\\tattribute float side;\\n\\tattribute float status;\\n\\tuniform float width;\\n\\tuniform float aspect;\\n\\tuniform mat3 transform;\\n\\tuniform float offset;\\n\\tvarying float vSide;\\n\\tvoid main()\\n\\t{\\n\\t\\tvSide = side;\\n\\t\\t\\n\\t\\t// \\u5148\\u8F6C\\u6362\\u5750\\u6807\\u7CFB\\n\\t\\tvec2 mNow = (transform*vec3(now,1.)).xy;\\n\\t\\tvec2 mNext = (transform*vec3(next,1.)).xy;\\n\\t\\tvec2 mPre = (transform*vec3(pre,1.)).xy;\\n\\t\\tvec2 _now = vec2(mNow);\\n\\t\\tvec2 _next = vec2(mNext);\\n\\t\\tvec2 _pre =  vec2(mPre);\\n\\t\\n\\t\\t// \\u5148\\u628A\\u672C\\u5750\\u6807\\u7CFB\\u7684\\u5750\\u6807\\u653E\\u5927\\uFF0C\\u548C\\u771F\\u5B9E\\u7684\\u5916\\u754C\\u5750\\u6807\\u4E00\\u6837,\\u8FD9\\u6837\\u6C42\\u51FA\\u6765\\u7684\\u76F8\\u5BF9\\u5411\\u91CF\\u662F\\u51C6\\u786E\\u7684\\uFF0C\\u5982\\u679C\\u5728\\u540E\\u9762\\u4E4B\\u95F4\\u5BF9normal\\u8FDB\\u884C\\u53D8\\u5316\\uFF0C\\u5C31\\u4F1A\\u5F97\\u51FA\\u9519\\u8BEF\\u7684\\u7ED3\\u679C\\n\\t\\t_now.x *= aspect;\\n\\t\\t_next.x *= aspect;\\n\\t\\t_pre.x *= aspect;\\n\\t\\t\\n\\t\\tvec2 _dir = normalize(status*_now - status*_pre + (1.0-status)*_next - (1.0-status)*_now);\\n\\n\\t\\tvec2 normal = vec2( -_dir.y , _dir.x );\\n\\t\\tvec2 dir = normal * width * .5 * side;\\n\\n\\t\\t// \\u504F\\u79FB\\u91CF\\n\\t\\tif(offset!=0.){\\n\\t\\t\\tvec2 point21 = normalize(_next - _now);\\n\\t\\t\\tvec2 point10 = normalize(_now - _pre);\\n\\t\\t\\tvec2 offsetDir = normalize( point21 + point10);\\n\\t\\t\\tvec2 offsetNormal = vec2( -offsetDir.y, offsetDir.x);\\n\\t\\t\\tfloat ratio = sqrt(1.0 - pow(dot(offsetNormal,point10),2.0));\\n\\t\\t\\tvec2 offsets =  offsetNormal * offset/ratio  ;\\n\\t\\t\\tdir += offsets;\\n\\t\\t}\\n\\n\\t\\t// \\u5F97\\u51FA\\u7684x\\u5750\\u6807\\u4F1A\\u88AB\\u653E\\u5927\\uFF0C\\u8FD9\\u91CC\\u8981\\u9664\\u6389,\\u8BB0\\u5F97\\u8981\\u7528\\u8F6C\\u6362\\u540E\\u5750\\u6807\\u8FDB\\u884C\\u52A0\\u51CF\\n\\t\\tgl_Position = vec4(mNow.x + dir.x/aspect,mNow.y+dir.y , 1., 1.);\\n\\t}\\n\\t",\n  fragmentShader: "\\n\\tprecision lowp float;\\n\\tuniform vec4 color;\\n\\tvarying float vSide;\\n\\tvoid main()\\n\\t{\\n\\t\\tfloat smoothSideRatio = max(0.1,smoothstep(0.,0.3,(1. - abs(vSide))));\\n\\t\\tgl_FragColor = color;\\n\\t\\tgl_FragColor.w *= smoothSideRatio;\\n\\t}\\n\\t"\n});\n;// CONCATENATED MODULE: ./src/Mesh/RoundLine/Line.js\n\n\n\n\n\n\n\n\nfunction Line_createSuper(Derived) { var hasNativeReflectConstruct = Line_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction Line_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\nvar RoundLine = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(RoundLine, _Base);\n\n  var _super = Line_createSuper(RoundLine);\n\n  //"TRIANGLE_STRIP";\n  function RoundLine(config) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, RoundLine);\n\n    _this = _super.call(this);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", "TRIANGLES");\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "shaders", {\n      vertex: roundLine.vertexShader,\n      fragment: roundLine.fragmentShader\n    });\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    config = Object.assign({\n      width: 20,\n      z: 1,\n      offset: 0\n    }, config);\n    _this.uniformData = {\n      z: {\n        value: config.z || 1,\n        type: "uniform1f"\n      }\n    };\n\n    _this.init(config);\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(RoundLine, [{\n    key: "setData",\n    value: function setData(data) {\n      var viewport = this.miniGL.viewport;\n      if (!data.length && data.length < 2) return console.warn("need input data.length >= 2");\n      this.uniformData.transform = {\n        value: viewport.transform,\n        type: "uniformMatrix3fv"\n      };\n      this.uniformData.aspect = {\n        value: viewport.ratio,\n        type: "uniform1f"\n      };\n      this.uniformData.color = {\n        value: this.config.color || [1, 0, 1, 1],\n        type: "uniform4fv"\n      };\n      this.uniformData.width = {\n        value: 2 * this.config.width / this.miniGL.viewport.height,\n        type: "uniform1f"\n      };\n      this.uniformData.offset = {\n        value: 2 * this.config.offset / this.miniGL.viewport.height,\n        type: "uniform1f"\n      };\n      this.data = data;\n      var points = [];\n      data.forEach(function (item) {\n        points.push(item.position.x, item.position.y);\n      }); // 生产双倍点for两个边\n\n      var res = this.calcSidePoints(data);\n      this.setBufferData(res.nowData, "now", 2);\n      this.setBufferData(res.preData, "pre", 2);\n      this.setBufferData(res.nextData, "next", 2);\n      this.setBufferData(res.side, "side", 1);\n      this.setBufferData(res.status, "status", 1); // 生成顶点\n\n      var indices = [];\n\n      for (var j = 0; j < data.length - 1; j++) {\n        var n = j * 4;\n        indices.push(n, n + 1, n + 2, n + 2, n + 1, n + 3);\n      }\n\n      this.setIndices(indices);\n      this.res = res;\n    }\n  }, {\n    key: "calcSidePoints",\n    value: function calcSidePoints() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var length = data.length;\n      var side = [];\n      var nextData = [];\n      var preData = [];\n      var nowData = [];\n      var status = []; // 生产双倍点for两个边\n\n      for (var i = 0; i < length - 1; i++) {\n        var point1 = data[i].position;\n        var point0 = data[i - 1] ? data[i - 1].position : {\n          x: 2 * data[i].position.x - data[i + 1].position.x,\n          y: 2 * data[i].position.y - data[i + 1].position.y\n        };\n        var point2 = data[i + 1] ? data[i + 1].position : {\n          x: 2 * data[i].position.x - data[i - 1].position.x,\n          y: 2 * data[i].position.y - data[i - 1].position.y\n        };\n        side.push(1, -1);\n        preData.push(point0.x, point0.y, point0.x, point0.y);\n        nowData.push(point1.x, point1.y, point1.x, point1.y);\n        nextData.push(point2.x, point2.y, point2.x, point2.y);\n        var j = i + 1;\n        point1 = data[j].position;\n        point0 = data[j - 1] ? data[j - 1].position : {\n          x: 2 * data[j].position.x - data[j + 1].position.x,\n          y: 2 * data[j].position.y - data[j + 1].position.y\n        };\n        point2 = data[j + 1] ? data[j + 1].position : {\n          x: 2 * data[j].position.x - data[j - 1].position.x,\n          y: 2 * data[j].position.y - data[j - 1].position.y\n        };\n        side.push(1, -1);\n        preData.push(point0.x, point0.y, point0.x, point0.y);\n        nowData.push(point1.x, point1.y, point1.x, point1.y);\n        nextData.push(point2.x, point2.y, point2.x, point2.y);\n        status.push(0, 0, 1, 1);\n      }\n\n      return {\n        preData: preData,\n        nowData: nowData,\n        nextData: nextData,\n        side: side,\n        status: status\n      };\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      // 2D 只需要两个坐标轴标识位置\n      var offset = 0; // 从数据第几位开始偏移\n\n      var normalize = false;\n\n      for (var key in this.buffers) {\n        var bufferData = this.buffers[key];\n        var bufferPosition = this.getAttribLocation(key); // 分别绑定数据到shader程序中\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData);\n        this.gl.vertexAttribPointer(bufferPosition, this.buffersSize[key], this.gl.FLOAT, normalize, 0, offset); //todo:webgl2.0 实例数组能减少同样形状但渲染不同的高性能方案\n\n        this.gl.enableVertexAttribArray(bufferPosition);\n      } // 使用顶点数据\n\n\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indicesPointer); // 加载shader程序\n\n      this.gl.useProgram(this.shaderProgram);\n      this.setUniformData(); // 渲染\n\n      if (this.indices.length) {\n        this.gl.drawElements(this.gl[this.drawType], this.indices.length, this.gl.UNSIGNED_SHORT, this.offset);\n      }\n    }\n  }]);\n\n  return RoundLine;\n}(Mesh_Base/* default */.Z);\n\n/* harmony default export */ const RoundLine_Line = (RoundLine);\n;// CONCATENATED MODULE: ./src/Shaders/roundLinePoint.js\n/* harmony default export */ const roundLinePoint = ({\n  // 先求连接线然后再求垂线\n  // 求出等比放大的值\n  vertexShader: "\\n\\tprecision highp float;\\n\\tattribute vec2 now;\\n\\tattribute vec2 pre;\\n\\tattribute vec2 next;\\n\\tuniform float width;\\n\\tuniform float aspect;\\n\\tuniform float z;\\n\\tuniform mat3 transform;\\n\\tuniform float offset;\\n\\tvoid main()\\n\\t{\\n\\t\\t// \\u5148\\u8F6C\\u6362\\u5750\\u6807\\u7CFB\\n\\t\\tvec2 mNow = (transform*vec3(now,1.)).xy;\\n\\t\\tvec2 mNext = (transform*vec3(next,1.)).xy;\\n\\t\\tvec2 mPre = (transform*vec3(pre,1.)).xy;\\n\\t\\tvec2 _now = vec2(mNow);\\n\\t\\tvec2 _next = vec2(mNext);\\n\\t\\tvec2 _pre =  vec2(mPre);\\n\\t\\n\\t\\t// \\u5148\\u628A\\u672C\\u5750\\u6807\\u7CFB\\u7684\\u5750\\u6807\\u653E\\u5927\\uFF0C\\u548C\\u771F\\u5B9E\\u7684\\u5916\\u754C\\u5750\\u6807\\u4E00\\u6837,\\u8FD9\\u6837\\u6C42\\u51FA\\u6765\\u7684\\u76F8\\u5BF9\\u5411\\u91CF\\u662F\\u51C6\\u786E\\u7684\\uFF0C\\u5982\\u679C\\u5728\\u540E\\u9762\\u4E4B\\u95F4\\u5BF9normal\\u8FDB\\u884C\\u53D8\\u5316\\uFF0C\\u5C31\\u4F1A\\u5F97\\u51FA\\u9519\\u8BEF\\u7684\\u7ED3\\u679C\\n\\t\\t_now.x *= aspect;\\n\\t\\t_next.x *= aspect;\\n\\t\\t_pre.x *= aspect;\\n\\t\\t\\n\\t\\t// \\u504F\\u79FB\\n\\t\\tif(offset!=0.){\\n\\t\\t\\tvec2 point21 = normalize(_next - _now);\\n\\t\\t\\tvec2 point10 = normalize(_now - _pre);\\n\\t\\t\\tvec2 offsetDir = normalize( point21 + point10);\\n\\t\\t\\tvec2 offsetNormal = vec2( -offsetDir.y, offsetDir.x);\\n\\t\\t\\tfloat ratio = sqrt(1.0 - pow(dot(offsetNormal,point10),2.0));\\n\\t\\t\\tvec2 offsets =  offsetNormal * offset/ratio ;\\n\\t\\t\\toffsets.x /= aspect;\\n\\t\\t\\tmNow += offsets;\\n\\t\\t}\\n\\n\\t\\t// \\u5F97\\u51FA\\u7684x\\u5750\\u6807\\u4F1A\\u88AB\\u653E\\u5927\\uFF0C\\u8FD9\\u91CC\\u8981\\u9664\\u6389,\\u8BB0\\u5F97\\u8981\\u7528\\u8F6C\\u6362\\u540E\\u5750\\u6807\\u8FDB\\u884C\\u52A0\\u51CF\\n\\t\\tgl_PointSize = width;\\n\\n\\t\\tgl_Position = vec4(mNow.x,mNow.y , z, 1.);\\n\\t}\\n\\t",\n  fragmentShader: "\\n\\tprecision highp float;\\n\\tuniform vec4 color;\\n\\tvoid main()\\n\\t{\\n\\t\\tfloat l = length(gl_PointCoord - vec2(0.5,0.5));\\n\\t\\t\\n\\t\\tfloat smoothSideRatio = smoothstep(0.,0.3,(0.5-l));\\n\\t\\tgl_FragColor = color;\\n\\t\\tgl_FragColor.w *= smoothSideRatio;\\n\\t}\\n\\t"\n});\n;// CONCATENATED MODULE: ./src/Mesh/RoundLine/LinePoint.js\n\n\n\n\n\n\n\n\nfunction LinePoint_createSuper(Derived) { var hasNativeReflectConstruct = LinePoint_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction LinePoint_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\nvar LinePoint = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(LinePoint, _Base);\n\n  var _super = LinePoint_createSuper(LinePoint);\n\n  //"TRIANGLE_STRIP";\n  function LinePoint(config) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, LinePoint);\n\n    _this = _super.call(this);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawType", "POINTS");\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "shaders", {\n      vertex: roundLinePoint.vertexShader,\n      fragment: roundLinePoint.fragmentShader\n    });\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "offset", 0);\n\n    config = Object.assign({\n      width: 20,\n      z: 1,\n      offset: 0\n    }, config);\n    _this.uniformData = {\n      z: {\n        value: config.z || 1,\n        type: "uniform1f"\n      }\n    };\n\n    _this.init(config);\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(LinePoint, [{\n    key: "setData",\n    value: function setData(res) {\n      var viewport = this.miniGL.viewport;\n      this.uniformData.transform = {\n        value: viewport.transform,\n        type: "uniformMatrix3fv"\n      };\n      this.uniformData.aspect = {\n        value: viewport.ratio,\n        type: "uniform1f"\n      };\n      this.uniformData.color = {\n        value: this.config.color || [1, 0, 1, 1],\n        type: "uniform4fv"\n      };\n      this.uniformData.width = {\n        value: this.config.width,\n        type: "uniform1f"\n      };\n      this.uniformData.offset = {\n        value: 2 * this.config.offset / this.miniGL.viewport.height,\n        type: "uniform1f"\n      }; // 生产双倍点for两个边\n\n      this.vertex = res.nowData;\n      this.setBufferData(res.nowData, "now", 2);\n      this.setBufferData(res.preData, "pre", 2);\n      this.setBufferData(res.nextData, "next", 2);\n    }\n  }]);\n\n  return LinePoint;\n}(Mesh_Base/* default */.Z);\n\n/* harmony default export */ const RoundLine_LinePoint = (LinePoint);\n;// CONCATENATED MODULE: ./src/Mesh/RoundLine/index.js\n\n\n\n\n\n\nvar RoundLine_RoundLine = /*#__PURE__*/function () {\n  function RoundLine(config) {\n    (0,classCallCheck/* default */.Z)(this, RoundLine);\n\n    (0,defineProperty/* default */.Z)(this, "depthMask", true);\n\n    (0,defineProperty/* default */.Z)(this, "depthTest", true);\n\n    (0,defineProperty/* default */.Z)(this, "transparent", true);\n\n    this.line = new RoundLine_Line(config);\n    this.linePoint = new RoundLine_LinePoint(config);\n  }\n\n  (0,createClass/* default */.Z)(RoundLine, [{\n    key: "onAdd",\n    value: function onAdd() {\n      var _this$line, _this$linePoint;\n\n      (_this$line = this.line).onAdd.apply(_this$line, arguments);\n\n      (_this$linePoint = this.linePoint).onAdd.apply(_this$linePoint, arguments);\n    }\n  }, {\n    key: "setData",\n    value: function setData() {\n      var _this$line2;\n\n      (_this$line2 = this.line).setData.apply(_this$line2, arguments);\n\n      this.linePoint.setData(this.line.res);\n    }\n  }, {\n    key: "dispose",\n    value: function dispose() {\n      var _this$line3, _this$linePoint2;\n\n      (_this$line3 = this.line).dispose.apply(_this$line3, arguments);\n\n      (_this$linePoint2 = this.linePoint).dispose.apply(_this$linePoint2, arguments);\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      var _this$line4, _this$linePoint3;\n\n      (_this$line4 = this.line).destroy.apply(_this$line4, arguments);\n\n      (_this$linePoint3 = this.linePoint).destroy.apply(_this$linePoint3, arguments);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _this$linePoint4, _this$line5;\n\n      (_this$linePoint4 = this.linePoint).render.apply(_this$linePoint4, arguments);\n\n      (_this$line5 = this.line).render.apply(_this$line5, arguments);\n    }\n  }]);\n\n  return RoundLine;\n}();\n\n/* harmony default export */ const Mesh_RoundLine = (RoundLine_RoundLine);\n;// CONCATENATED MODULE: ./src/Group/Group.js\n\n\n\n\n\n\n\n\nfunction Group_createSuper(Derived) { var hasNativeReflectConstruct = Group_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction Group_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n/**\n * 进行批量渲染\n * @class\n */\n\nvar Group = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(Group, _Base);\n\n  var _super = Group_createSuper(Group);\n\n  function Group(config) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, Group);\n\n    _this = _super.call(this);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "depthMask", true);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "depthTest", true);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "transparent", true);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "children", []);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "childId", -1);\n\n    _this.children = [];\n\n    _this.init(config);\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(Group, [{\n    key: "dispose",\n    value: function dispose() {\n      Mesh_Base/* default.dispose.call */.Z.dispose.call(this);\n      this.children.forEach(function (item, index) {\n        item.destroy && item.destroy();\n      });\n    }\n  }, {\n    key: "onAdd",\n    value: function onAdd(miniGL) {\n      this.miniGL = miniGL; // 获取顶点数据内存里的指针\n\n      this.gl = miniGL.gl;\n      this.indicesPointer = this.gl.createBuffer();\n      this.children.forEach(function (each) {\n        if (!each.miniGL) {\n          each.onAdd(miniGL);\n        }\n      });\n    }\n  }, {\n    key: "addChild",\n    value: function addChild(child) {\n      this.childId++;\n      child.childId = this.childId;\n      child.parent = this;\n      this.children.push(child);\n      child.zOrder = this.children.length - 1;\n\n      if (this.miniGL) {\n        child.onAdd(this.miniGL);\n      }\n    }\n  }, {\n    key: "addChildAt",\n    value: function addChildAt(child, index) {\n      child.childId = this.childId++;\n      child.parent = this;\n\n      if (this.miniGL) {\n        child.onAdd(this.miniGL);\n      }\n\n      this.children.splice(index, 0, child);\n      child.zOrder = index + 1;\n    }\n  }, {\n    key: "removeChild",\n    value: function removeChild(child) {\n      var pos = this.children.indexOf(child);\n\n      if (!pos <= -1) {\n        return;\n      }\n\n      this.children[pos].parent = undefined;\n      this.children.splice(pos, 1);\n    }\n  }, {\n    key: "swapChildren",\n    value: function swapChildren(a, b) {\n      var _this2 = this;\n\n      this.children.forEach(function (item, index) {\n        if (item === a) {\n          _this2.children[index] = b;\n          _this2.children[index].zOrder = index;\n        }\n\n        if (item === b) {\n          _this2.children[index] = a;\n          _this2.children[index].zOrder = index;\n        }\n      });\n    }\n  }]);\n\n  return Group;\n}(Mesh_Base/* default */.Z);\n\n/* harmony default export */ const Group_Group = (Group);\n;// CONCATENATED MODULE: ./src/dragonBones/Enum.js\nvar BlendMode = {\n  Normal: 0,\n  Add: 1,\n  Alpha: 2,\n  Darken: 3,\n  Difference: 4,\n  Erase: 5,\n  HardLight: 6,\n  Invert: 7,\n  Layer: 8,\n  Lighten: 9,\n  Multiply: 10,\n  Overlay: 11,\n  Screen: 12,\n  Subtract: 13\n};\nvar BoneType = {\n  Bone: 0,\n  Surface: 1\n};\nvar BinaryOffset = {\n  WeigthBoneCount: 0,\n  WeigthFloatOffset: 1,\n  WeigthBoneIndices: 2,\n  GeometryVertexCount: 0,\n  GeometryTriangleCount: 1,\n  GeometryFloatOffset: 2,\n  GeometryWeightOffset: 3,\n  GeometryVertexIndices: 4,\n  TimelineScale: 0,\n  TimelineOffset: 1,\n  TimelineKeyFrameCount: 2,\n  TimelineFrameValueCount: 3,\n  TimelineFrameValueOffset: 4,\n  TimelineFrameOffset: 5,\n  FramePosition: 0,\n  FrameTweenType: 1,\n  FrameTweenEasingOrCurveSampleCount: 2,\n  FrameCurveSamples: 3,\n  DeformVertexOffset: 0,\n  DeformCount: 1,\n  DeformValueCount: 2,\n  DeformValueOffset: 3,\n  DeformFloatOffset: 4\n};\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/superPropBase.js\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = (0,getPrototypeOf/* default */.Z)(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/get.js\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== "undefined" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n// EXTERNAL MODULE: ./src/Texture/Texture.js\nvar Texture = __webpack_require__(776);\n;// CONCATENATED MODULE: ./src/dragonBones/MiniGLTextureAtlasData.js\n\n\n\n\n\n\n\n\n\nfunction MiniGLTextureAtlasData_createSuper(Derived) { var hasNativeReflectConstruct = MiniGLTextureAtlasData_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction MiniGLTextureAtlasData_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar _ref = window.dragonBones || {},\n    _ref$TextureData = _ref.TextureData,\n    TextureData = _ref$TextureData === void 0 ? null : _ref$TextureData,\n    _ref$BaseObject = _ref.BaseObject,\n    BaseObject = _ref$BaseObject === void 0 ? null : _ref$BaseObject,\n    _ref$TextureAtlasData = _ref.TextureAtlasData,\n    TextureAtlasData = _ref$TextureAtlasData === void 0 ? null : _ref$TextureAtlasData;\n\n\n\nvar MiniGLTextureAtlasData = /*#__PURE__*/function (_TextureAtlasData) {\n  (0,inherits/* default */.Z)(MiniGLTextureAtlasData, _TextureAtlasData);\n\n  var _super = MiniGLTextureAtlasData_createSuper(MiniGLTextureAtlasData);\n\n  function MiniGLTextureAtlasData() {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, MiniGLTextureAtlasData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "scale", 1);\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(MiniGLTextureAtlasData, [{\n    key: "_onClear",\n    value: function _onClear() {\n      _get((0,getPrototypeOf/* default */.Z)(MiniGLTextureAtlasData.prototype), "_onClear", this).call(this);\n\n      if (this.disposeEnabled && this._renderTexture !== null) {\n        this._renderTexture.dispose();\n      }\n\n      this.disposeEnabled = false;\n      this._renderTexture = null;\n    }\n  }, {\n    key: "createTexture",\n    value: function createTexture() {\n      var texture = BaseObject.borrowObject(MiniTextureData);\n      return texture;\n    }\n  }, {\n    key: "setRenderTexture",\n    value: function setRenderTexture(texture, miniGL) {\n      this._renderTexture = texture;\n\n      if (this._renderTexture !== null) {\n        for (var k in this.textures) {\n          var textureData = this.textures[k];\n\n          if (textureData.region.rotated) {}\n\n          var renderTexture = new Texture/* default */.Z(miniGL);\n          renderTexture.create({\n            image: texture,\n            rect: textureData.region,\n            reverseY: false,\n            name: textureData.name\n          });\n          textureData.renderTexture = renderTexture;\n        }\n      } else {\n        for (var _k in this.textures) {\n          var _textureData = this.textures[_k];\n          _textureData.renderTexture = null;\n        }\n      }\n\n      return texture;\n    }\n  }]);\n\n  return MiniGLTextureAtlasData;\n}(TextureAtlasData);\n/**\n * @internal\n */\n\n\nvar MiniTextureData = /*#__PURE__*/function (_TextureData) {\n  (0,inherits/* default */.Z)(MiniTextureData, _TextureData);\n\n  var _super2 = MiniGLTextureAtlasData_createSuper(MiniTextureData);\n\n  function MiniTextureData() {\n    var _this2;\n\n    (0,classCallCheck/* default */.Z)(this, MiniTextureData);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this2 = _super2.call.apply(_super2, [this].concat(args));\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this2), "renderTexture", null);\n\n    return _this2;\n  }\n\n  (0,createClass/* default */.Z)(MiniTextureData, [{\n    key: "_onClear",\n    value: // Initial value.\n    function _onClear() {\n      TextureData.prototype._onClear.call(this);\n\n      if (this.renderTexture !== null) {\n        this.renderTexture.destroy(false);\n      }\n\n      this.renderTexture = null;\n    }\n  }]);\n\n  return MiniTextureData;\n}(TextureData);\n\nMiniTextureData.toString = function () {\n  return \'[class dragonBones.MiniTextureData]\';\n};\n\nMiniGLTextureAtlasData.toString = function () {\n  return \'[class dragonBones.MiniAtlasData]\';\n};\n\n/* harmony default export */ const dragonBones_MiniGLTextureAtlasData = (MiniGLTextureAtlasData);\n;// CONCATENATED MODULE: ./src/dragonBones/MiniGLSlot.js\n\n\n\n\n\n\nfunction MiniGLSlot_createSuper(Derived) { var hasNativeReflectConstruct = MiniGLSlot_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction MiniGLSlot_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar MiniGLSlot_ref = window.dragonBones || {},\n    _ref$Slot = MiniGLSlot_ref.Slot,\n    Slot = _ref$Slot === void 0 ? function () {} : _ref$Slot;\n\n\n\n\n/**\n * 骨骼插槽\n * @class\n */\n\nvar MiniGLSlot = /*#__PURE__*/function (_Slot) {\n  (0,inherits/* default */.Z)(MiniGLSlot, _Slot);\n\n  var _super = MiniGLSlot_createSuper(MiniGLSlot);\n\n  function MiniGLSlot() {\n    (0,classCallCheck/* default */.Z)(this, MiniGLSlot);\n\n    return _super.apply(this, arguments);\n  }\n\n  (0,createClass/* default */.Z)(MiniGLSlot, [{\n    key: "_onClear",\n    value: function _onClear() {\n      Slot.prototype._onClear.call(this);\n\n      this._armatureDisplay = null; //\n\n      this._renderDisplay = null; //\n\n      this._colorFilter = null;\n    }\n  }, {\n    key: "_initDisplay",\n    value: function _initDisplay(value, isRetain) {}\n  }, {\n    key: "_disposeDisplay",\n    value: function _disposeDisplay(value, isRelease) {\n      // value.destroy();\n      value.parent.remove(value);\n      value.destroy();\n    } // 更新前函数\n\n  }, {\n    key: "_onUpdateDisplay",\n    value: function _onUpdateDisplay() {\n      this._armatureDisplay = this._armature.display;\n      this._renderDisplay = this._display ? this._display : this._rawDisplay;\n    } // 添加到骨架容器中\n\n  }, {\n    key: "_addDisplay",\n    value: function _addDisplay() {\n      if (this._renderDisplay.parent) {\n        this._renderDisplay.parent.removeChild(this._renderDisplay);\n      }\n\n      this._armature.display.addChild(this._renderDisplay);\n    }\n  }, {\n    key: "_replaceDisplay",\n    value: function _replaceDisplay(value) {\n      this._renderDisplay.parent && this._renderDisplay.parent.removeChild(this._renderDisplay);\n\n      this._armatureDisplay.addChild(this._renderDisplay);\n\n      this._armatureDisplay.swapChildren(this._renderDisplay, value);\n\n      this._armatureDisplay.removeChild(value);\n\n      value.destroy();\n    }\n  }, {\n    key: "_removeDisplay",\n    value: function _removeDisplay() {\n      this._armatureDisplay.removeChild(this._renderDisplay);\n    }\n  }, {\n    key: "_updateZOrder",\n    value: function _updateZOrder() {\n      var index = this._renderDisplay.zOrder;\n\n      if (index === this._zOrder) {\n        return;\n      }\n\n      this._armatureDisplay.removeChild(this._renderDisplay);\n\n      this._armatureDisplay.addChildAt(this._renderDisplay, this._zOrder);\n    }\n  }, {\n    key: "_updateVisible",\n    value: function _updateVisible() {\n      var visible = this._parent.visible && this._visible;\n      this._renderDisplay.visible = visible;\n    }\n  }, {\n    key: "_updateBlendMode",\n    value: function _updateBlendMode() {\n      var gl = this._armatureDisplay.miniGL.gl;\n\n      switch (this._blendMode) {\n        case BlendMode.Normal:\n          this._renderDisplay.blendMode = gl.ONE_MINUS_SRC_ALPHA;\n          break;\n\n        case BlendMode.Add:\n          this._renderDisplay.blendMode = gl.ONE_MINUS_DST_ALPHA;\n          break;\n\n        case BlendMode.Erase:\n          this._renderDisplay.blendMode = gl.DST_ALPHA;\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: "_updateColor",\n    value: function _updateColor() {\n      var alpha = this._colorTransform.alphaMultiplier * this._globalAlpha;\n\n      try {\n        this._renderDisplay.uniformData.alpha.value = alpha;\n      } catch (e) {}\n    }\n  }, {\n    key: "_updateFrame",\n    value: function _updateFrame() {\n      var currentTextureData = this._textureData;\n      this._renderDisplay.textureData = this._textureData;\n\n      if (this._displayFrame !== null && this._display !== null && currentTextureData !== null) {\n        var currentTextureAtlasData = currentTextureData.parent;\n\n        if (this._armature.replacedTexture !== null) {\n          // Update replaced texture atlas.\n          if (this._armature._replaceTextureAtlasData === null) {\n            currentTextureAtlasData = new dragonBones_MiniGLTextureAtlasData();\n            currentTextureAtlasData.copyFrom(currentTextureData.parent);\n            currentTextureAtlasData.texture = this._armature.replacedTexture;\n            this._armature._replaceTextureAtlasData = currentTextureAtlasData;\n          } else {\n            currentTextureAtlasData = this._armature._replaceTextureAtlasData;\n          }\n\n          currentTextureData = currentTextureAtlasData.getTexture(currentTextureData.name);\n        }\n\n        if (currentTextureData.renderTexture !== null) {\n          if (this._geometryData !== null) {\n            // Mesh.\n            var data = this._geometryData.data;\n            var intArray = data.intArray;\n            var floatArray = data.floatArray;\n            var vertexCount = intArray[this._geometryData.offset + BinaryOffset.GeometryVertexCount];\n            var triangleCount = intArray[this._geometryData.offset + BinaryOffset.GeometryTriangleCount];\n            var vertexOffset = intArray[this._geometryData.offset + BinaryOffset.GeometryFloatOffset];\n\n            if (vertexOffset < 0) {\n              vertexOffset += 65536; // Fixed out of bounds bug.\n            }\n\n            var uvOffset = vertexOffset + vertexCount * 2;\n            var scale = this._armature._armatureData.scale;\n            var meshDisplay = this._renderDisplay; // 这一步生成所需要的点和uv和索引\n\n            var uvs = [];\n            var vertices = [];\n            var indices = [];\n\n            for (var i = 0, l = vertexCount * 2; i < l; ++i) {\n              vertices[i] = floatArray[vertexOffset + i] * scale;\n              uvs[i] = floatArray[uvOffset + i];\n            }\n\n            for (var _i = 0; _i < triangleCount * 3; ++_i) {\n              indices[_i] = intArray[this._geometryData.offset + BinaryOffset.GeometryVertexIndices + _i];\n            }\n\n            meshDisplay.dispose();\n            meshDisplay.setTexture(currentTextureData.renderTexture);\n            meshDisplay.setBufferData(vertices, \'position\', 2);\n            meshDisplay.setBufferData(uvs, \'uv\', 2);\n            meshDisplay.setIndices(indices);\n            meshDisplay.vertex = vertices;\n            var isSkinned = this._geometryData.weight !== null;\n            var isSurface = this._parent._boneData.type !== BoneType.Bone;\n\n            if (isSkinned || isSurface) {\n              this._identityTransform();\n            }\n          } else {\n            // Normal texture.\n            var _scale = currentTextureData.parent.scale * this._armature._armatureData.scale;\n\n            var textureWidth = currentTextureData.region.width * _scale;\n            var textureHeight = currentTextureData.region.height * _scale;\n            var normalDisplay = this._renderDisplay;\n            var texture = currentTextureData.renderTexture;\n            normalDisplay.setData({\n              texture: texture,\n              width: textureWidth,\n              height: textureHeight\n            });\n          }\n\n          this._visibleDirty = true;\n          return;\n        }\n      }\n\n      this._renderDisplay.visible = false;\n    }\n  }, {\n    key: "_updateMesh",\n    value: function _updateMesh() {\n      var scale = this._armature._armatureData.scale;\n      var deformVertices = this._displayFrame.deformVertices;\n      var bones = this._geometryBones;\n      var geometryData = this._geometryData;\n      var weightData = geometryData.weight;\n      var hasDeform = deformVertices.length > 0 && geometryData.inheritDeform;\n      var meshDisplay = this._renderDisplay;\n\n      if (weightData !== null) {\n        var data = geometryData.data;\n        var intArray = data.intArray;\n        var floatArray = data.floatArray;\n        var vertexCount = intArray[geometryData.offset + BinaryOffset.GeometryVertexCount];\n        var weightFloatOffset = intArray[weightData.offset + BinaryOffset.WeigthFloatOffset];\n\n        if (weightFloatOffset < 0) {\n          weightFloatOffset += 65536; // Fixed out of bounds bug.\n        }\n\n        for (var i = 0, iD = 0, iB = weightData.offset + BinaryOffset.WeigthBoneIndices + bones.length, iV = weightFloatOffset, iF = 0; i < vertexCount; ++i) {\n          var boneCount = intArray[iB++];\n          var xG = 0.0;\n          var yG = 0.0;\n\n          for (var j = 0; j < boneCount; ++j) {\n            var boneIndex = intArray[iB++];\n            var bone = bones[boneIndex];\n\n            if (bone !== null) {\n              var matrix = bone.globalTransformMatrix;\n              var weight = floatArray[iV++];\n              var xL = floatArray[iV++] * scale;\n              var yL = floatArray[iV++] * scale;\n\n              if (hasDeform) {\n                xL += deformVertices[iF++];\n                yL += deformVertices[iF++];\n              }\n\n              xG += (matrix.a * xL + matrix.c * yL + matrix.tx) * weight;\n              yG += (matrix.b * xL + matrix.d * yL + matrix.ty) * weight;\n            }\n          }\n\n          meshDisplay.vertex[iD++] = xG;\n          meshDisplay.vertex[iD++] = yG;\n        }\n\n        meshDisplay.setBufferData(meshDisplay.vertex, \'position\', 2);\n      } else {\n        var isSurface = this._parent._boneData.type !== BoneType.Bone;\n        var _data = geometryData.data;\n        var _intArray = _data.intArray;\n        var _floatArray = _data.floatArray;\n        var _vertexCount = _intArray[geometryData.offset + BinaryOffset.GeometryVertexCount];\n        var vertexOffset = _intArray[geometryData.offset + BinaryOffset.GeometryFloatOffset];\n\n        if (vertexOffset < 0) {\n          vertexOffset += 65536; // Fixed out of bounds bug.\n        }\n\n        for (var _i2 = 0, l = _vertexCount * 2; _i2 < l; _i2 += 2) {\n          var x = _floatArray[vertexOffset + _i2] * scale;\n          var y = _floatArray[vertexOffset + _i2 + 1] * scale;\n\n          if (hasDeform) {\n            x += deformVertices[_i2];\n            y += deformVertices[_i2 + 1];\n          }\n\n          if (isSurface) {\n            var _matrix = this._parent._getGlobalTransformMatrix(x, y);\n\n            meshDisplay.vertex[_i2] = _matrix.a * x + _matrix.c * y + _matrix.tx;\n            meshDisplay.vertex[_i2 + 1] = _matrix.b * x + _matrix.d * y + _matrix.ty;\n          } else {\n            meshDisplay.vertex[_i2] = x;\n            meshDisplay.vertex[_i2 + 1] = y;\n          }\n        }\n\n        meshDisplay.setBufferData(meshDisplay.vertex, \'position\', 2);\n      }\n    }\n  }, {\n    key: "_identityTransform",\n    value: function _identityTransform() {\n      this._renderDisplay.setMatrix(mat3.create());\n    }\n  }, {\n    key: "_updateTransform",\n    value: function _updateTransform() {\n      var matrix = this.globalTransformMatrix;\n      var newMatrix = mat3.fromValues(matrix.a, matrix.b, 0, matrix.c, matrix.d, 0, matrix.tx, matrix.ty, 1);\n      mat3.translate(newMatrix, newMatrix, [-this._pivotX, -this._pivotY]);\n\n      this._renderDisplay.setMatrix(newMatrix);\n    }\n  }]);\n\n  return MiniGLSlot;\n}(Slot);\n\nMiniGLSlot.toString = function () {\n  return \'[class dragonBones.MiniSlot]\';\n};\n\n/* harmony default export */ const dragonBones_MiniGLSlot = (MiniGLSlot);\n;// CONCATENATED MODULE: ./src/dragonBones/MiniGLArmatureDisplay.js\n\n\n\n\n\n\n\n\nfunction MiniGLArmatureDisplay_createSuper(Derived) { var hasNativeReflectConstruct = MiniGLArmatureDisplay_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction MiniGLArmatureDisplay_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n/**\n * 骨架显示\n * @class\n */\n\nvar MiniGLArmatureDisplay = /*#__PURE__*/function (_Group) {\n  (0,inherits/* default */.Z)(MiniGLArmatureDisplay, _Group);\n\n  var _super = MiniGLArmatureDisplay_createSuper(MiniGLArmatureDisplay);\n\n  function MiniGLArmatureDisplay() {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, MiniGLArmatureDisplay);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "_armature", null);\n\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(MiniGLArmatureDisplay, [{\n    key: "dispatchDBEvent",\n    value: function dispatchDBEvent(type, eventObject) {\n      this.listener.fire(type, eventObject);\n    }\n  }, {\n    key: "hasDBEventListener",\n    value: function hasDBEventListener(type) {\n      return this.listener._listeners[type]; // .d.ts bug\n    }\n  }, {\n    key: "addDBEventListener",\n    value: function addDBEventListener(type, func) {\n      this.listener.on(type, func);\n    }\n  }, {\n    key: "removeDBEventListener",\n    value: function removeDBEventListener(type, func) {\n      this.listener.off(type, func);\n    }\n  }, {\n    key: "dbInit",\n    value: function dbInit(armature) {\n      this._armature = armature;\n      this.listener = new src_Base();\n      var mesh = new Line/* default */.Z({\n        color: [0, 0.1, 0.2, 1]\n      });\n      mesh.drawType = \'LINES\';\n      this.drawer = mesh;\n      this.addChild(mesh);\n    }\n  }, {\n    key: "dbClear",\n    value: function dbClear() {\n      this.destroy();\n    }\n  }, {\n    key: "dbUpdate",\n    value: function dbUpdate() {\n      if (!this.mesh) return;\n\n      var bones = this._armature.getBones();\n\n      var data = [];\n\n      for (var i = 0, l = bones.length; i < l; ++i) {\n        var bone = bones[i];\n        var boneLength = bone.boneData.length;\n        var startX = bone.globalTransformMatrix.tx;\n        var startY = bone.globalTransformMatrix.ty;\n        var endX = startX + bone.globalTransformMatrix.a * boneLength;\n        var endY = startY + bone.globalTransformMatrix.b * boneLength;\n        data.push({\n          position: {\n            x: startX,\n            y: startY\n          }\n        }, {\n          position: {\n            x: endX,\n            y: endY\n          }\n        });\n      }\n\n      this.drawer.setData(data);\n    }\n  }, {\n    key: "dispose",\n    value: function dispose() {\n      if (this._armature !== null) {\n        this._armature.dispose();\n\n        this._armature = null;\n      }\n\n      this.drawer.destroy();\n      Group_Group.dispose.call(this);\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      this.dispose();\n    }\n  }, {\n    key: "getArmature",\n    value: function getArmature() {\n      return this._armature;\n    }\n  }, {\n    key: "getAnimation",\n    value: function getAnimation() {\n      return this._armature.animation;\n    }\n  }]);\n\n  return MiniGLArmatureDisplay;\n}(Group_Group);\n\n/* harmony default export */ const dragonBones_MiniGLArmatureDisplay = (MiniGLArmatureDisplay);\n;// CONCATENATED MODULE: ./src/dragonBones/index.js\n\n\n\n\n\n\nfunction dragonBones_createSuper(Derived) { var hasNativeReflectConstruct = dragonBones_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction dragonBones_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar dragonBones_ref = window.dragonBones || {},\n    DragonBones = dragonBones_ref.DragonBones,\n    _ref$BaseFactory = dragonBones_ref.BaseFactory,\n    BaseFactory = _ref$BaseFactory === void 0 ? null : _ref$BaseFactory,\n    BuildArmaturePackage = dragonBones_ref.BuildArmaturePackage,\n    dragonBones_BaseObject = dragonBones_ref.BaseObject,\n    Armature = dragonBones_ref.Armature;\n\n\n\n\n\n\nvar DragonBoneObject = /*#__PURE__*/function (_BaseFactory) {\n  (0,inherits/* default */.Z)(DragonBoneObject, _BaseFactory);\n\n  var _super = dragonBones_createSuper(DragonBoneObject);\n\n  function DragonBoneObject(miniGL) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, DragonBoneObject);\n\n    _this = _super.call(this);\n\n    if (!BaseFactory) {\n      throw new Error(\'请先加载DragonBones基础JS库！\');\n    }\n\n    _this.miniGL = miniGL;\n\n    _this.getDragonBonesInstance();\n\n    _this.display = new dragonBones_MiniGLArmatureDisplay();\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(DragonBoneObject, [{\n    key: "addFrameEvent",\n    value: function addFrameEvent() {\n      this.miniGL.on(\'beforerender\', DragonBoneObject.update);\n    }\n  }, {\n    key: "getDragonBonesInstance",\n    value: function getDragonBonesInstance() {\n      var _this2 = this;\n\n      if (!DragonBoneObject._dragonBonesInstance) {\n        DragonBoneObject._dragonBonesInstance = new DragonBones({\n          hasDBEventListener: function hasDBEventListener(event) {\n            return _this2.miniGL._listeners[event];\n          },\n          // 转发事件\n          dispatchDBEvent: function dispatchDBEvent(event, data) {\n            _this2.miniGL.fire(event, data);\n          }\n        });\n        this.addFrameEvent();\n      }\n\n      this._dragonBonesInstance = DragonBoneObject._dragonBonesInstance;\n    } // 构建对象\n\n  }, {\n    key: "buildArmatureDisplay",\n    value: function buildArmatureDisplay(armatureName) {\n      var dragonBonesName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'\';\n      var skinName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \'\';\n      var textureAtlasName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \'\';\n      var armature = this.buildArmature(armatureName, dragonBonesName, skinName, textureAtlasName);\n\n      this._dragonBonesInstance.clock.add(armature);\n\n      return armature.display;\n    }\n    /**\n     * @override 复现方法\n     * @param {*} dataPackage\n     */\n\n  }, {\n    key: "_buildArmature",\n    value: function _buildArmature(dataPackage) {\n      var armature = dragonBones_BaseObject.borrowObject(Armature);\n      var armatureDisplay = new dragonBones_MiniGLArmatureDisplay({\n        miniGL: this.miniGL\n      });\n      armature.init(dataPackage.armature, armatureDisplay, armatureDisplay, this._dragonBones);\n      return armature;\n    }\n  }, {\n    key: "_buildSlot",\n    value: function _buildSlot(_dataPackage, slotData, armature) {\n      var slot = dragonBones_BaseObject.borrowObject(dragonBones_MiniGLSlot);\n      var sprite = new src.Image();\n      slot.init(slotData, armature, sprite, sprite);\n      return slot;\n    }\n  }, {\n    key: "_buildTextureAtlasData",\n    value: function _buildTextureAtlasData(textureAtlasData, textureAtlas) {\n      if (textureAtlasData) {\n        textureAtlasData.setRenderTexture(textureAtlas, this.miniGL);\n      } else {\n        textureAtlasData = dragonBones_BaseObject.borrowObject(dragonBones_MiniGLTextureAtlasData);\n      }\n\n      return textureAtlasData;\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {}\n  }]);\n\n  return DragonBoneObject;\n}(BaseFactory);\n\nDragonBoneObject.update = function (delta) {\n  DragonBoneObject._dragonBonesInstance.advanceTime(delta * 0.001);\n};\n\nDragonBoneObject.MiniGLArmatureDisplay = dragonBones_MiniGLArmatureDisplay;\n/* harmony default export */ const dragonBones = (DragonBoneObject);\n// EXTERNAL MODULE: ./node_modules/gl-matrix/esm/common.js\nvar common = __webpack_require__(685);\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat2.js\n\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nfunction create() {\n  var out = new common.ARRAY_TYPE(4);\n\n  if (common.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nfunction clone(a) {\n  var out = new common.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nfunction fromValues(m00, m01, m10, m11) {\n  var out = new common.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nfunction set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nfunction invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nfunction adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nfunction determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2\'s\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nfunction multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nfunction rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nfunction scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {ReadonlyMat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nfunction str(a) {\n  return "mat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nfunction frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {ReadonlyMat2} L the lower triangular matrix\r\n * @param {ReadonlyMat2} D the diagonal matrix\r\n * @param {ReadonlyMat2} U the upper triangular matrix\r\n * @param {ReadonlyMat2} a the input matrix to factorize\r\n */\n\nfunction LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2\'s\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= common.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= common.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= common.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= common.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix\'s elements by\r\n * @returns {mat2} out\r\n */\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2\'s after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @param {Number} scale the amount to scale b\'s elements by before adding\r\n * @returns {mat2} out\r\n */\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nvar sub = subtract;\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat2d.js\n\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, b,\r\n *  c, d,\r\n *  tx, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, b, 0,\r\n *  c, d, 0,\r\n *  tx, ty, 1]\r\n * </pre>\r\n * The last column is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nfunction mat2d_create() {\n  var out = new common.ARRAY_TYPE(6);\n\n  if (common.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nfunction mat2d_clone(a) {\n  var out = new common.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nfunction mat2d_copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nfunction mat2d_identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nfunction mat2d_fromValues(a, b, c, d, tx, ty) {\n  var out = new common.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nfunction mat2d_set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nfunction mat2d_invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nfunction mat2d_determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d\'s\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nfunction mat2d_multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nfunction mat2d_rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nfunction mat2d_scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nfunction translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nfunction mat2d_fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nfunction mat2d_fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nfunction mat2d_str(a) {\n  return "mat2d(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ")";\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nfunction mat2d_frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\r\n * Adds two mat2d\'s\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nfunction mat2d_add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nfunction mat2d_subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix\'s elements by\r\n * @returns {mat2d} out\r\n */\n\nfunction mat2d_multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d\'s after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @param {Number} scale the amount to scale b\'s elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nfunction mat2d_multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction mat2d_exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction mat2d_equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= common.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= common.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= common.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= common.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= common.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= common.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nvar mat2d_mul = mat2d_multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nvar mat2d_sub = mat2d_subtract;\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat4.js\n\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nfunction mat4_create() {\n  var out = new common.ARRAY_TYPE(16);\n\n  if (common.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nfunction mat4_clone(a) {\n  var out = new common.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nfunction mat4_copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nfunction mat4_fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new common.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nfunction mat4_set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nfunction mat4_identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nfunction mat4_transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nfunction mat4_invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nfunction mat4_adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nfunction mat4_determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nfunction mat4_multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nfunction mat4_translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nfunction mat4_scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nfunction mat4_rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < common.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nfunction mat4_fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nfunction mat4_fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nfunction mat4_fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < common.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nfunction fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nfunction fromQuat2(out, a) {\n  var translation = new common.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nfunction getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nfunction getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nfunction getRotation(out, mat) {\n  var scaling = new common.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nfunction fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nfunction fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nfunction frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nfunction perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nfunction perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nfunction ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nfunction lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < common.EPSILON && Math.abs(eyey - centery) < common.EPSILON && Math.abs(eyez - centerz) < common.EPSILON) {\n    return mat4_identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nfunction targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nfunction mat4_str(a) {\n  return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nfunction mat4_frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4\'s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nfunction mat4_add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nfunction mat4_subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix\'s elements by\r\n * @returns {mat4} out\r\n */\n\nfunction mat4_multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4\'s after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b\'s elements by before adding\r\n * @returns {mat4} out\r\n */\n\nfunction mat4_multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction mat4_exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction mat4_equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= common.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= common.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= common.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= common.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= common.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= common.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= common.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= common.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= common.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= common.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= common.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= common.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= common.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= common.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= common.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= common.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nvar mat4_mul = mat4_multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nvar mat4_sub = mat4_subtract;\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec3.js\n\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction vec3_create() {\n  var out = new common.ARRAY_TYPE(3);\n\n  if (common.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction vec3_clone(a) {\n  var out = new common.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nfunction vec3_length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction vec3_fromValues(x, y, z) {\n  var out = new common.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3\'s\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3\'s\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3\'s\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3\'s\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3\'s\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3\'s after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3\'s\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3\'s\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3\'s\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nfunction vec3_dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3\'s\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3\'s\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = common.RANDOM() * 2.0 * Math.PI;\n  var z = common.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly \'1\'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nfunction vec3_rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nfunction angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && vec3_dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nfunction vec3_str(a) {\n  return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction vec3_exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction vec3_equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= common.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= common.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= common.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nvar vec3_sub = vec3_subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nvar vec3_mul = vec3_multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nvar div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nvar dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nvar sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nvar len = vec3_length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nvar sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar forEach = function () {\n  var vec = vec3_create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec4.js\n\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nfunction vec4_create() {\n  var out = new common.ARRAY_TYPE(4);\n\n  if (common.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nfunction vec4_clone(a) {\n  var out = new common.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nfunction vec4_fromValues(x, y, z, w) {\n  var out = new common.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4\'s\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4\'s\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4\'s\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4\'s\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4\'s\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4\'s after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4\'s\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nfunction vec4_distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4\'s\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nfunction vec4_squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nfunction vec4_length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nfunction vec4_squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4\'s\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nfunction vec4_cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4\'s\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = common.RANDOM() * 2 - 1;\n    v2 = common.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = common.RANDOM() * 2 - 1;\n    v4 = common.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nfunction vec4_zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nfunction vec4_str(a) {\n  return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction vec4_exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction vec4_equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= common.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= common.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= common.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= common.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nvar vec4_sub = vec4_subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nvar vec4_mul = vec4_multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nvar vec4_div = vec4_divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nvar vec4_dist = vec4_distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nvar vec4_sqrDist = vec4_squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nvar vec4_len = vec4_length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nvar vec4_sqrLen = vec4_squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar vec4_forEach = function () {\n  var vec = vec4_create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/quat.js\n\n\n\n\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nfunction quat_create() {\n  var out = new common.ARRAY_TYPE(4);\n\n  if (common.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nfunction quat_identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nfunction setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nfunction getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > common.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nfunction getAngle(a, b) {\n  var dotproduct = quat_dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat\'s\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\n\nfunction quat_multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nfunction quat_rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nfunction quat_rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nfunction quat_rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nfunction calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nfunction exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nfunction ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nfunction pow(out, a, b) {\n  ln(out, a);\n  quat_scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nfunction slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > common.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // "from" and "to" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nfunction quat_random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = common.RANDOM();\n  var u2 = common.RANDOM();\n  var u3 = common.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nfunction quat_invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nfunction conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nfunction fromMat3(out, m) {\n  // Algorithm in Ken Shoemake\'s article in 1987 SIGGRAPH course notes\n  // article "Quaternion Calculus and Fast Animation".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nfunction fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nfunction quat_str(a) {\n  return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nvar quat_clone = vec4_clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nvar quat_fromValues = vec4_fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar quat_copy = vec4_copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar quat_set = vec4_set;\n/**\r\n * Adds two quat\'s\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar quat_add = vec4_add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nvar quat_mul = quat_multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar quat_scale = vec4_scale;\n/**\r\n * Calculates the dot product of two quat\'s\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nvar quat_dot = dot;\n/**\r\n * Performs a linear interpolation between two quat\'s\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar quat_lerp = vec4_lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nvar quat_length = vec4_length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nvar quat_len = quat_length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nvar quat_squaredLength = vec4_squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nvar quat_sqrLen = quat_squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar quat_normalize = vec4_normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nvar quat_exactEquals = vec4_exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nvar quat_equals = vec4_equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nvar rotationTo = function () {\n  var tmpvec3 = vec3_create();\n  var xUnitVec3 = vec3_fromValues(1, 0, 0);\n  var yUnitVec3 = vec3_fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3_dot(a, b);\n\n    if (dot < -0.999999) {\n      cross(tmpvec3, xUnitVec3, a);\n      if (len(tmpvec3) < 0.000001) cross(tmpvec3, yUnitVec3, a);\n      vec3_normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return quat_normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nvar sqlerp = function () {\n  var temp1 = quat_create();\n  var temp2 = quat_create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local "right" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local "up" direction\r\n * @returns {quat} out\r\n */\n\nvar setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return quat_normalize(out, fromMat3(out, matr));\n  };\n}();\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/quat2.js\n\n\n\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nfunction quat2_create() {\n  var dq = new common.ARRAY_TYPE(8);\n\n  if (common.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nfunction quat2_clone(a) {\n  var dq = new common.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nfunction quat2_fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new common.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nfunction fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new common.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q a normalized quaternion\r\n * @param {ReadonlyVec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nfunction quat2_fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyVec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nfunction quat2_fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nfunction quat2_fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {ReadonlyMat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nfunction fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat_create();\n  getRotation(outer, a);\n  var t = new common.ARRAY_TYPE(3);\n  getTranslation(t, a);\n  quat2_fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nfunction quat2_copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nfunction quat2_identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nfunction quat2_set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nvar getReal = quat_copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nfunction getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nvar setReal = quat_copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nfunction setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nfunction quat2_getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nfunction quat2_translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nfunction quat2_rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat_rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nfunction quat2_rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat_rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nfunction quat2_rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat_rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nfunction rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nfunction rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nfunction rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < common.EPSILON) {\n    return quat2_copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat\'s\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nfunction quat2_add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat\'s\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nfunction quat2_multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nvar quat2_mul = quat2_multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nfunction quat2_scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat\'s (The dot product of the real parts)\r\n *\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nvar quat2_dot = quat_dot;\n/**\r\n * Performs a linear interpolation between two dual quats\'s\r\n * NOTE: The resulting dual quaternions won\'t always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nfunction quat2_lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (quat2_dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nfunction quat2_invert(out, a) {\n  var sqlen = quat2_squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nfunction quat2_conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nvar quat2_length = quat_length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nvar quat2_len = quat2_length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nvar quat2_squaredLength = quat_squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nvar quat2_sqrLen = quat2_squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nfunction quat2_normalize(out, a) {\n  var magnitude = quat2_squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nfunction quat2_str(a) {\n  return "quat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ")";\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quaternion.\r\n * @param {ReadonlyQuat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nfunction quat2_exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quat.\r\n * @param {ReadonlyQuat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nfunction quat2_equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= common.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= common.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= common.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= common.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= common.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= common.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= common.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= common.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec2.js\n\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nfunction vec2_create() {\n  var out = new common.ARRAY_TYPE(2);\n\n  if (common.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nfunction vec2_clone(a) {\n  var out = new common.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nfunction vec2_fromValues(x, y) {\n  var out = new common.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2\'s after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2\'s\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nfunction vec2_distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2\'s\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nfunction vec2_squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nfunction vec2_length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nfunction vec2_squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2\'s\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nfunction vec2_dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2\'s\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction vec2_cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2\'s\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_random(out, scale) {\n  scale = scale || 1.0;\n  var r = common.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nfunction transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nfunction transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly \'1\'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly \'0\'\r\n * 4th vector component is implicitly \'1\'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {ReadonlyVec2} a The vec2 point to rotate\r\n * @param {ReadonlyVec2} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {ReadonlyVec2} a The first operand\r\n * @param {ReadonlyVec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nfunction vec2_angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nfunction vec2_zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nfunction vec2_str(a) {\n  return "vec2(" + a[0] + ", " + a[1] + ")";\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction vec2_exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction vec2_equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= common.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= common.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nvar vec2_len = vec2_length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nvar vec2_sub = vec2_subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nvar vec2_mul = vec2_multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nvar vec2_div = vec2_divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nvar vec2_dist = vec2_distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nvar vec2_sqrDist = vec2_squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nvar vec2_sqrLen = vec2_squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar vec2_forEach = function () {\n  var vec = vec2_create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();\n;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/index.js\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction src_createSuper(Derived) { var hasNativeReflectConstruct = src_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\n\nfunction src_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar MiniGL = /*#__PURE__*/function (_Base) {\n  (0,inherits/* default */.Z)(MiniGL, _Base);\n\n  var _super = src_createSuper(MiniGL);\n\n  /**\n   * \n   * @param {any} config \n   * @param {HTMLDivElement} config.container\n   */\n  function MiniGL(config) {\n    var _this;\n\n    (0,classCallCheck/* default */.Z)(this, MiniGL);\n\n    _this = _super.call(this, config);\n\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "autoUpdate", false);\n\n    _this.container = config.container;\n    _this.config = Object.assign({\n      contextOption: {\n        alpha: true,\n        antialias: true,\n        antialiasSamples: 16,\n        stencil: true,\n        powerPreference: \'high-performance\',\n        preserveDrawingBuffer: true\n      },\n      pointConfig: {}\n    }, config);\n    return _this;\n  }\n\n  (0,createClass/* default */.Z)(MiniGL, [{\n    key: "init",\n    value: function init() {\n      var _this$config$contextO = this.config.contextOption,\n          contextOption = _this$config$contextO === void 0 ? {} : _this$config$contextO;\n      this.canvasDOM = document.createElement(\'canvas\');\n      this.container.appendChild(this.canvasDOM);\n      this.gl = this.canvasDOM.getContext(\'webgl2\', contextOption);\n\n      if (this.gl == null) {\n        return console.error(\'你的浏览器不支持webgl2,请更新使用chrome浏览器\');\n      }\n\n      this.viewport = new Viewport(_objectSpread({\n        miniGL: this\n      }, this.config));\n      this.viewport.resize();\n      this.canvas = new View_Canvas(_objectSpread({\n        miniGL: this\n      }, this.config));\n      this.controller = new Control_Controller(_objectSpread({\n        miniGL: this\n      }, this.config));\n      this.canvas.update();\n    }\n  }]);\n\n  return MiniGL;\n}(src_Base);\n\nMiniGL.FlyLine = FlyLine;\nMiniGL.Image = Mesh_Image;\nMiniGL.Mesh = Mesh_Mesh;\nMiniGL.Point = Mesh_Point;\nMiniGL.Line = (__webpack_require__(70)/* ["default"] */ .Z);\n;\nMiniGL.MeshBase = Mesh_Base/* default */.Z;\nMiniGL.WidthLine = Mesh_WidthLine;\nMiniGL.RoundLine = Mesh_RoundLine; // 暂时做形状没有意义，本来是要专心做2d特效库的,另外去做形状，做重了和canvas性能没差了，还是专心利用gpu多进程运算\n// MiniGL.Shape = require(\'./Shapes\').default;\n\nMiniGL.InstanceMesh = (__webpack_require__(947)/* ["default"] */ .Z);\nMiniGL.Group = Group_Group;\nMiniGL.Util = (__webpack_require__(88)/* ["default"] */ .Z);\nMiniGL.Texture = (__webpack_require__(776)/* ["default"] */ .Z);\nMiniGL.DragonBones = dragonBones;\nMiniGL.Arrow = (__webpack_require__(247)/* ["default"] */ .Z);\nMiniGL.glMatrix = esm_namespaceObject;\n/* harmony default export */ const src = (MiniGL);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///594\n')},685:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "EPSILON": () => (/* binding */ EPSILON),\n/* harmony export */   "ARRAY_TYPE": () => (/* binding */ ARRAY_TYPE),\n/* harmony export */   "RANDOM": () => (/* binding */ RANDOM),\n/* harmony export */   "setMatrixArrayType": () => (/* binding */ setMatrixArrayType),\n/* harmony export */   "toRadian": () => (/* binding */ toRadian),\n/* harmony export */   "equals": () => (/* binding */ equals)\n/* harmony export */ });\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = typeof Float32Array !== \'undefined\' ? Float32Array : Array;\nvar RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nfunction setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nfunction toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjg1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNBO0FBQ0E7QUFDUDtBQUNBO0FBQ0E7QUFDQSxXQUFXLDRDQUE0QztBQUN2RDs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLFNBQVM7QUFDdEI7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vTWluaUdMLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9lc20vY29tbW9uLmpzP2M5NGQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvbW1vbiB1dGlsaXRpZXNcclxuICogQG1vZHVsZSBnbE1hdHJpeFxyXG4gKi9cbi8vIENvbmZpZ3VyYXRpb24gQ29uc3RhbnRzXG5leHBvcnQgdmFyIEVQU0lMT04gPSAwLjAwMDAwMTtcbmV4cG9ydCB2YXIgQVJSQVlfVFlQRSA9IHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09ICd1bmRlZmluZWQnID8gRmxvYXQzMkFycmF5IDogQXJyYXk7XG5leHBvcnQgdmFyIFJBTkRPTSA9IE1hdGgucmFuZG9tO1xuLyoqXHJcbiAqIFNldHMgdGhlIHR5cGUgb2YgYXJyYXkgdXNlZCB3aGVuIGNyZWF0aW5nIG5ldyB2ZWN0b3JzIGFuZCBtYXRyaWNlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheUNvbnN0cnVjdG9yIHwgQXJyYXlDb25zdHJ1Y3Rvcn0gdHlwZSBBcnJheSB0eXBlLCBzdWNoIGFzIEZsb2F0MzJBcnJheSBvciBBcnJheVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNldE1hdHJpeEFycmF5VHlwZSh0eXBlKSB7XG4gIEFSUkFZX1RZUEUgPSB0eXBlO1xufVxudmFyIGRlZ3JlZSA9IE1hdGguUEkgLyAxODA7XG4vKipcclxuICogQ29udmVydCBEZWdyZWUgVG8gUmFkaWFuXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBhIEFuZ2xlIGluIERlZ3JlZXNcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0b1JhZGlhbihhKSB7XG4gIHJldHVybiBhICogZGVncmVlO1xufVxuLyoqXHJcbiAqIFRlc3RzIHdoZXRoZXIgb3Igbm90IHRoZSBhcmd1bWVudHMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIHZhbHVlLCB3aXRoaW4gYW4gYWJzb2x1dGVcclxuICogb3IgcmVsYXRpdmUgdG9sZXJhbmNlIG9mIGdsTWF0cml4LkVQU0lMT04gKGFuIGFic29sdXRlIHRvbGVyYW5jZSBpcyB1c2VkIGZvciB2YWx1ZXMgbGVzc1xyXG4gKiB0aGFuIG9yIGVxdWFsIHRvIDEuMCwgYW5kIGEgcmVsYXRpdmUgdG9sZXJhbmNlIGlzIHVzZWQgZm9yIGxhcmdlciB2YWx1ZXMpXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBhIFRoZSBmaXJzdCBudW1iZXIgdG8gdGVzdC5cclxuICogQHBhcmFtIHtOdW1iZXJ9IGIgVGhlIHNlY29uZCBudW1iZXIgdG8gdGVzdC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG51bWJlcnMgYXJlIGFwcHJveGltYXRlbHkgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICByZXR1cm4gTWF0aC5hYnMoYSAtIGIpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEpLCBNYXRoLmFicyhiKSk7XG59XG5pZiAoIU1hdGguaHlwb3QpIE1hdGguaHlwb3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB5ID0gMCxcbiAgICAgIGkgPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICB5ICs9IGFyZ3VtZW50c1tpXSAqIGFyZ3VtZW50c1tpXTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLnNxcnQoeSk7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///685\n')},600:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "create": () => (/* binding */ create),\n/* harmony export */   "fromMat4": () => (/* binding */ fromMat4),\n/* harmony export */   "clone": () => (/* binding */ clone),\n/* harmony export */   "copy": () => (/* binding */ copy),\n/* harmony export */   "fromValues": () => (/* binding */ fromValues),\n/* harmony export */   "set": () => (/* binding */ set),\n/* harmony export */   "identity": () => (/* binding */ identity),\n/* harmony export */   "transpose": () => (/* binding */ transpose),\n/* harmony export */   "invert": () => (/* binding */ invert),\n/* harmony export */   "adjoint": () => (/* binding */ adjoint),\n/* harmony export */   "determinant": () => (/* binding */ determinant),\n/* harmony export */   "multiply": () => (/* binding */ multiply),\n/* harmony export */   "translate": () => (/* binding */ translate),\n/* harmony export */   "rotate": () => (/* binding */ rotate),\n/* harmony export */   "scale": () => (/* binding */ scale),\n/* harmony export */   "fromTranslation": () => (/* binding */ fromTranslation),\n/* harmony export */   "fromRotation": () => (/* binding */ fromRotation),\n/* harmony export */   "fromScaling": () => (/* binding */ fromScaling),\n/* harmony export */   "fromMat2d": () => (/* binding */ fromMat2d),\n/* harmony export */   "fromQuat": () => (/* binding */ fromQuat),\n/* harmony export */   "normalFromMat4": () => (/* binding */ normalFromMat4),\n/* harmony export */   "projection": () => (/* binding */ projection),\n/* harmony export */   "str": () => (/* binding */ str),\n/* harmony export */   "frob": () => (/* binding */ frob),\n/* harmony export */   "add": () => (/* binding */ add),\n/* harmony export */   "subtract": () => (/* binding */ subtract),\n/* harmony export */   "multiplyScalar": () => (/* binding */ multiplyScalar),\n/* harmony export */   "multiplyScalarAndAdd": () => (/* binding */ multiplyScalarAndAdd),\n/* harmony export */   "exactEquals": () => (/* binding */ exactEquals),\n/* harmony export */   "equals": () => (/* binding */ equals),\n/* harmony export */   "mul": () => (/* binding */ mul),\n/* harmony export */   "sub": () => (/* binding */ sub)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(685);\n\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(9);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nfunction fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nfunction fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nfunction set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nfunction invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nfunction adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nfunction determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3\'s\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nfunction multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nfunction translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nfunction rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nfunction scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nfunction fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nfunction normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nfunction projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nfunction str(a) {\n  return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nfunction frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3\'s\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix\'s elements by\r\n * @returns {mat3} out\r\n */\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3\'s after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b\'s elements by before adding\r\n * @returns {mat3} out\r\n */\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nvar sub = subtract;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///600\n')},326:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ _assertThisInitialized)\n/* harmony export */ });\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return self;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI2LmpzIiwibWFwcGluZ3MiOiI7OztBQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaW5pR0wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzP2UxZjUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///326\n')},671:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ _classCallCheck)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjcxLmpzIiwibWFwcGluZ3MiOiI7OztBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaW5pR0wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanM/OTcwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///671\n')},144:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ _createClass)\n/* harmony export */ });\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ0LmpzIiwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZTtBQUNmO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vTWluaUdMLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzP2M2MDciXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///144\n')},942:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ _defineProperty)\n/* harmony export */ });\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQyLmpzIiwibWFwcGluZ3MiOiI7OztBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaW5pR0wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanM/OTdlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///942\n')},120:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ _getPrototypeOf)\n/* harmony export */ });\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIwLmpzIiwibWFwcGluZ3MiOiI7OztBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL01pbmlHTC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZi5qcz80YTQzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///120\n')},340:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": () => (/* binding */ _inherits)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQzs7QUNQaUQ7QUFDbEM7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILGtCQUFrQixlQUFjO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vTWluaUdMLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzPzc2Y2IiLCJ3ZWJwYWNrOi8vTWluaUdMLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzLmpzPzZkNmIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///340\n')},963:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ _possibleConstructorReturn)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n/* harmony import */ var _assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(326);\n\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(call) === "object" || typeof call === "function")) {\n    return call;\n  }\n\n  return (0,_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)(self);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9EO0FBQ1c7QUFDaEQ7QUFDZixlQUFlLGtGQUFPO0FBQ3RCO0FBQ0E7O0FBRUEsU0FBUyw4RUFBcUI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaW5pR0wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcz9iNGM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiO1xuaW1wb3J0IGFzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///963\n')},785:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": () => (/* binding */ _toConsumableArray)\n});\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js\nfunction _nonIterableSpread() {\n  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\n\n\n\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzg1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZTtBQUNmOztBQUVBLHlDQUF5QyxTQUFTO0FBQ2xEO0FBQ0E7O0FBRUE7QUFDQSxDOztBQ1JxRDtBQUN0QztBQUNmLGlDQUFpQyxpQkFBZ0I7QUFDakQsQzs7QUNIZTtBQUNmO0FBQ0EsQzs7QUNGcUQ7QUFDdEM7QUFDZjtBQUNBLG9DQUFvQyxpQkFBZ0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0Esc0ZBQXNGLGlCQUFnQjtBQUN0RyxDOztBQ1JlO0FBQ2Y7QUFDQSxDOztBQ0Z1RDtBQUNKO0FBQ3NCO0FBQ2xCO0FBQ3hDO0FBQ2YsU0FBUyxrQkFBaUIsU0FBUyxnQkFBZSxTQUFTLDJCQUEwQixTQUFTLGtCQUFpQjtBQUMvRyIsInNvdXJjZXMiOlsid2VicGFjazovL01pbmlHTC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzPzc5NzgiLCJ3ZWJwYWNrOi8vTWluaUdMLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzLmpzPzZlYzUiLCJ3ZWJwYWNrOi8vTWluaUdMLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcz9jYjM0Iiwid2VicGFjazovL01pbmlHTC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcz83YTg2Iiwid2VicGFjazovL01pbmlHTC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVNwcmVhZC5qcz9iYmQ5Iiwid2VicGFjazovL01pbmlHTC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcz82ODQ0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJpbXBvcnQgYXJyYXlXaXRob3V0SG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRob3V0SG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVNwcmVhZCBmcm9tIFwiLi9ub25JdGVyYWJsZVNwcmVhZC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///785\n')},2:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ _typeof)\n/* harmony export */ });\nfunction _typeof(obj) {\n  "@babel/helpers - typeof";\n\n  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBZTtBQUNmOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaW5pR0wvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzPzk1MmMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n')}},__webpack_module_cache__={};function __webpack_require__(B){var Q=__webpack_module_cache__[B];if(void 0!==Q)return Q.exports;var n=__webpack_module_cache__[B]={exports:{}};return __webpack_modules__[B](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(B,Q)=>{for(var n in Q)__webpack_require__.o(Q,n)&&!__webpack_require__.o(B,n)&&Object.defineProperty(B,n,{enumerable:!0,get:Q[n]})},__webpack_require__.o=(B,Q)=>Object.prototype.hasOwnProperty.call(B,Q),__webpack_require__.r=B=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(B,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(B,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(594);return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));